
# SPEC

pgrep [-i] [-v] <rgx> <path>


# PARSER_DEBUG

parse(mode_check = 'started')
    eat(wanted = 'section_name')
        get_next_token(lexed = 'name')
    eat(wanted = 'name')
        get_next_token(lexed = 'name')
        taste(isfirst = True)
        get_next_token(returned = 'name')
        eat(eaten = 'name', text = 'pgrep', pos = 1, line = 2, col = 1)
parse(mode = 'variant')
do_parse(handler = 'section_title')
    eat(wanted = 'section_title,section_name')
        get_next_token(lexed = 'brack_open')
do_parse(handler = 'variant')
    eat(wanted = 'variant_def,partial_def')
        get_next_token(lexed = 'brack_open')
    eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_open')
    eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
    eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
    eat(wanted = 'paren_open')
        get_next_token(lexed = 'brack_open')
    eat(wanted = 'brack_open')
        get_next_token(lexed = 'brack_open')
        taste(isfirst = True)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 7, line = 2, col = 7)
    eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'choice_sep')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'partial_usage')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'paren_open')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'brack_open')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'angle_open')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'long_option')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'short_option')
        get_next_token(lexed = 'short_option')
        taste(indent_ok = 'line', line = 2)
        get_next_token(returned = 'short_option')
        eat(eaten = 'short_option', text = '-i', pos = 8, line = 2, col = 8)
    eat(wanted = 'angle_open')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'triple_dot')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'quant_range')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'question')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'paren_open')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'brack_open')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'angle_open')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'long_option')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'short_option')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(indent_ok = 'line', line = 2)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 10, line = 2, col = 10)
    eat(wanted = 'triple_dot')
        get_next_token(lexed = 'brack_open')
    eat(wanted = 'quant_range')
        get_next_token(lexed = 'brack_open')
    eat(wanted = 'question')
        get_next_token(lexed = 'brack_open')
    eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_open')
    eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
    eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
    eat(wanted = 'paren_open')
        get_next_token(lexed = 'brack_open')
    eat(wanted = 'brack_open')
        get_next_token(lexed = 'brack_open')
        taste(indent_ok = 'line', line = 2)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 12, line = 2, col = 12)
    eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'choice_sep')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'partial_usage')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'paren_open')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'brack_open')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'angle_open')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'long_option')
        get_next_token(lexed = 'short_option')
    eat(wanted = 'short_option')
        get_next_token(lexed = 'short_option')
        taste(indent_ok = 'line', line = 2)
        get_next_token(returned = 'short_option')
        eat(eaten = 'short_option', text = '-v', pos = 13, line = 2, col = 13)
    eat(wanted = 'angle_open')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'triple_dot')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'quant_range')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'question')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'paren_open')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'brack_open')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'angle_open')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'long_option')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'short_option')
        get_next_token(lexed = 'brack_close')
    eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(indent_ok = 'line', line = 2)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 15, line = 2, col = 15)
    eat(wanted = 'triple_dot')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'quant_range')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'question')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'paren_open')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'brack_open')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(indent_ok = 'line', line = 2)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 17, line = 2, col = 17)
    eat(wanted = 'sym_dest,dot_dest,solo_dest')
        get_next_token(lexed = 'solo_dest')
        taste(indent_ok = 'line', line = 2)
        get_next_token(returned = 'solo_dest')
        eat(eaten = 'solo_dest', text = 'rgx', pos = 18, line = 2, col = 18)
    eat(wanted = 'assign')
        get_next_token(lexed = 'angle_close')
    eat(wanted = 'quoted_literal,name,solo_dest')
        get_next_token(lexed = 'angle_close')
    eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(indent_ok = 'line', line = 2)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 21, line = 2, col = 21)
    eat(wanted = 'triple_dot')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'quant_range')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'question')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'paren_open')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'brack_open')
        get_next_token(lexed = 'angle_open')
    eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(indent_ok = 'line', line = 2)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 23, line = 2, col = 23)
    eat(wanted = 'sym_dest,dot_dest,solo_dest')
        get_next_token(lexed = 'solo_dest')
        taste(indent_ok = 'line', line = 2)
        get_next_token(returned = 'solo_dest')
        eat(eaten = 'solo_dest', text = 'path', pos = 24, line = 2, col = 24)
    eat(wanted = 'assign')
        get_next_token(lexed = 'angle_close')
    eat(wanted = 'quoted_literal,name,solo_dest')
        get_next_token(lexed = 'angle_close')
    eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(indent_ok = 'line', line = 2)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 28, line = 2, col = 28)
    eat(wanted = 'triple_dot')
    eat(wanted = 'quant_range')
    eat(wanted = 'question')
    eat(wanted = 'quoted_literal')
    eat(wanted = 'choice_sep')
    eat(wanted = 'partial_usage')
    eat(wanted = 'paren_open')
    eat(wanted = 'brack_open')
    eat(wanted = 'angle_open')
    eat(wanted = 'long_option')
    eat(wanted = 'short_option')
do_parse(handler = 'section_title')
    eat(wanted = 'section_title,section_name')
do_parse(handler = 'variant')
    eat(wanted = 'variant_def,partial_def')
    eat(wanted = 'quoted_literal')
    eat(wanted = 'choice_sep')
    eat(wanted = 'partial_usage')
    eat(wanted = 'paren_open')
    eat(wanted = 'brack_open')
    eat(wanted = 'angle_open')
    eat(wanted = 'long_option')
    eat(wanted = 'short_option')


# GRAMMAR
Grammar(
    Variant(
        name = None
        is_partial = False
        Bracketed(
            quantifier = None
            Option(
                dest = 'i'
                quantifier = None
        Bracketed(
            quantifier = None
            Option(
                dest = 'v'
                quantifier = None
        Positional(
            sym = None
            dest = 'rgx'
            symlit = False
            choices = []
            quantifier = None
        Positional(
            sym = None
            dest = 'path'
            symlit = False
            choices = []
            quantifier = None
