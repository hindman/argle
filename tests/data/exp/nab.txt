
# SPEC
chomp!   : `/` <cmd=chomp>
findall! : `/` <cmd=findall> <rgx> [-a]
grep!    : `/` <cmd=grep> <rgx> [-i] [-v] [-s]
range!   : `/` <cmd=range> <start> <stop> [<step>] [-g]
run!     : `/` <cmd=run> <code> [-g <>] [-a] [-v] [-i]

main : [--trace] commands=(chomp! | findall! | grep! | range! | run!)...
help : --help



# PARSER_DEBUG

parse()
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'chomp!   :', pos = 0, line = 1, col = 1)
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'backquote1')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'backquote1')
        eat(eaten = 'backquote1', text = '`', pos = 11, line = 1, col = 12)
        quoted_text()
          eat(wanted = 'literal_backslash|literal_backquote1|quoted_char1|backquote1')
          get_next_token(lexed = 'quoted_char1')
          taste(ok = True, indent_reason = 'quoted', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'quoted_char1')
          eat(eaten = 'quoted_char1', text = '/', pos = 12, line = 1, col = 13)
          eat(wanted = 'literal_backslash|literal_backquote1|quoted_char1|backquote1')
          get_next_token(lexed = 'backquote1')
          taste(ok = True, indent_reason = 'quoted', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'backquote1')
          eat(eaten = 'backquote1', text = '`', pos = 13, line = 1, col = 14)
          quoted_text(RESULT = QuotedText)
        literal(RESULT = Literal)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'angle_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 15, line = 1, col = 16)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'cmd', pos = 16, line = 1, col = 17)
          eat(wanted = 'assign')
          get_next_token(lexed = 'assign')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'assign')
          eat(eaten = 'assign', text = '=', pos = 19, line = 1, col = 20)
          next_choice()
            literal()
              eat(wanted = 'backquote1')
              get_next_token(lexed = 'valid_name')
              literal(∅)
            eat(wanted = 'valid_name')
            get_next_token(lexed = 'valid_name')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'valid_name')
            eat(eaten = 'valid_name', text = 'chomp', pos = 20, line = 1, col = 21)
            next_choice(RESULT = Choice)
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 25, line = 1, col = 26)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'variant_def')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'variant_def')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'variant_def')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'variant_def')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'variant_def')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'variant_def')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'findall! :', pos = 27, line = 2, col = 1)
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'backquote1')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'backquote1')
        eat(eaten = 'backquote1', text = '`', pos = 38, line = 2, col = 12)
        quoted_text()
          eat(wanted = 'literal_backslash|literal_backquote1|quoted_char1|backquote1')
          get_next_token(lexed = 'quoted_char1')
          taste(ok = True, indent_reason = 'quoted', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'quoted_char1')
          eat(eaten = 'quoted_char1', text = '/', pos = 39, line = 2, col = 13)
          eat(wanted = 'literal_backslash|literal_backquote1|quoted_char1|backquote1')
          get_next_token(lexed = 'backquote1')
          taste(ok = True, indent_reason = 'quoted', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'backquote1')
          eat(eaten = 'backquote1', text = '`', pos = 40, line = 2, col = 14)
          quoted_text(RESULT = QuotedText)
        literal(RESULT = Literal)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'angle_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 42, line = 2, col = 16)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'cmd', pos = 43, line = 2, col = 17)
          eat(wanted = 'assign')
          get_next_token(lexed = 'assign')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'assign')
          eat(eaten = 'assign', text = '=', pos = 46, line = 2, col = 20)
          next_choice()
            literal()
              eat(wanted = 'backquote1')
              get_next_token(lexed = 'valid_name')
              literal(∅)
            eat(wanted = 'valid_name')
            get_next_token(lexed = 'valid_name')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'valid_name')
            eat(eaten = 'valid_name', text = 'findall', pos = 47, line = 2, col = 21)
            next_choice(RESULT = Choice)
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 54, line = 2, col = 28)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'angle_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'angle_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'angle_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 56, line = 2, col = 30)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'rgx', pos = 57, line = 2, col = 31)
          eat(wanted = 'assign')
          get_next_token(lexed = 'angle_close')
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 60, line = 2, col = 34)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 62, line = 2, col = 36)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'short_option')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'short_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'short_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'short_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'short_option')
              eat(eaten = 'short_option', text = '-a', pos = 63, line = 2, col = 37)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 65, line = 2, col = 39)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'variant_def')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'variant_def')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'variant_def')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'variant_def')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'variant_def')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'variant_def')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'grep!    :', pos = 67, line = 3, col = 1)
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'backquote1')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'backquote1')
        eat(eaten = 'backquote1', text = '`', pos = 78, line = 3, col = 12)
        quoted_text()
          eat(wanted = 'literal_backslash|literal_backquote1|quoted_char1|backquote1')
          get_next_token(lexed = 'quoted_char1')
          taste(ok = True, indent_reason = 'quoted', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'quoted_char1')
          eat(eaten = 'quoted_char1', text = '/', pos = 79, line = 3, col = 13)
          eat(wanted = 'literal_backslash|literal_backquote1|quoted_char1|backquote1')
          get_next_token(lexed = 'backquote1')
          taste(ok = True, indent_reason = 'quoted', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'backquote1')
          eat(eaten = 'backquote1', text = '`', pos = 80, line = 3, col = 14)
          quoted_text(RESULT = QuotedText)
        literal(RESULT = Literal)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'angle_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 82, line = 3, col = 16)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'cmd', pos = 83, line = 3, col = 17)
          eat(wanted = 'assign')
          get_next_token(lexed = 'assign')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'assign')
          eat(eaten = 'assign', text = '=', pos = 86, line = 3, col = 20)
          next_choice()
            literal()
              eat(wanted = 'backquote1')
              get_next_token(lexed = 'valid_name')
              literal(∅)
            eat(wanted = 'valid_name')
            get_next_token(lexed = 'valid_name')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'valid_name')
            eat(eaten = 'valid_name', text = 'grep', pos = 87, line = 3, col = 21)
            next_choice(RESULT = Choice)
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 91, line = 3, col = 25)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'angle_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'angle_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'angle_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 93, line = 3, col = 27)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'rgx', pos = 94, line = 3, col = 28)
          eat(wanted = 'assign')
          get_next_token(lexed = 'angle_close')
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 97, line = 3, col = 31)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 99, line = 3, col = 33)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'short_option')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'short_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'short_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'short_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'short_option')
              eat(eaten = 'short_option', text = '-i', pos = 100, line = 3, col = 34)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 102, line = 3, col = 36)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 104, line = 3, col = 38)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'short_option')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'short_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'short_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'short_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'short_option')
              eat(eaten = 'short_option', text = '-v', pos = 105, line = 3, col = 39)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 107, line = 3, col = 41)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 109, line = 3, col = 43)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'short_option')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'short_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'short_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'short_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'short_option')
              eat(eaten = 'short_option', text = '-s', pos = 110, line = 3, col = 44)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 112, line = 3, col = 46)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'variant_def')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'variant_def')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'variant_def')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'variant_def')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'variant_def')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'variant_def')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'range!   :', pos = 114, line = 4, col = 1)
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'backquote1')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'backquote1')
        eat(eaten = 'backquote1', text = '`', pos = 125, line = 4, col = 12)
        quoted_text()
          eat(wanted = 'literal_backslash|literal_backquote1|quoted_char1|backquote1')
          get_next_token(lexed = 'quoted_char1')
          taste(ok = True, indent_reason = 'quoted', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'quoted_char1')
          eat(eaten = 'quoted_char1', text = '/', pos = 126, line = 4, col = 13)
          eat(wanted = 'literal_backslash|literal_backquote1|quoted_char1|backquote1')
          get_next_token(lexed = 'backquote1')
          taste(ok = True, indent_reason = 'quoted', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'backquote1')
          eat(eaten = 'backquote1', text = '`', pos = 127, line = 4, col = 14)
          quoted_text(RESULT = QuotedText)
        literal(RESULT = Literal)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'angle_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 129, line = 4, col = 16)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'cmd', pos = 130, line = 4, col = 17)
          eat(wanted = 'assign')
          get_next_token(lexed = 'assign')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'assign')
          eat(eaten = 'assign', text = '=', pos = 133, line = 4, col = 20)
          next_choice()
            literal()
              eat(wanted = 'backquote1')
              get_next_token(lexed = 'valid_name')
              literal(∅)
            eat(wanted = 'valid_name')
            get_next_token(lexed = 'valid_name')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'valid_name')
            eat(eaten = 'valid_name', text = 'range', pos = 134, line = 4, col = 21)
            next_choice(RESULT = Choice)
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 139, line = 4, col = 26)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'angle_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'angle_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'angle_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 141, line = 4, col = 28)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'start', pos = 142, line = 4, col = 29)
          eat(wanted = 'assign')
          get_next_token(lexed = 'angle_close')
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 147, line = 4, col = 34)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'angle_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'angle_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'angle_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 149, line = 4, col = 36)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'stop', pos = 150, line = 4, col = 37)
          eat(wanted = 'assign')
          get_next_token(lexed = 'angle_close')
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 154, line = 4, col = 41)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 156, line = 4, col = 43)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'angle_open')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 157, line = 4, col = 44)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'step', pos = 158, line = 4, col = 45)
              eat(wanted = 'assign')
              get_next_token(lexed = 'angle_close')
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 162, line = 4, col = 49)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 163, line = 4, col = 50)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 165, line = 4, col = 52)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'short_option')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'short_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'short_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'short_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'short_option')
              eat(eaten = 'short_option', text = '-g', pos = 166, line = 4, col = 53)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 168, line = 4, col = 55)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'variant_def')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'variant_def')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'variant_def')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'variant_def')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'variant_def')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'variant_def')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'run!     :', pos = 170, line = 5, col = 1)
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'backquote1')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'backquote1')
        eat(eaten = 'backquote1', text = '`', pos = 181, line = 5, col = 12)
        quoted_text()
          eat(wanted = 'literal_backslash|literal_backquote1|quoted_char1|backquote1')
          get_next_token(lexed = 'quoted_char1')
          taste(ok = True, indent_reason = 'quoted', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'quoted_char1')
          eat(eaten = 'quoted_char1', text = '/', pos = 182, line = 5, col = 13)
          eat(wanted = 'literal_backslash|literal_backquote1|quoted_char1|backquote1')
          get_next_token(lexed = 'backquote1')
          taste(ok = True, indent_reason = 'quoted', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'backquote1')
          eat(eaten = 'backquote1', text = '`', pos = 183, line = 5, col = 14)
          quoted_text(RESULT = QuotedText)
        literal(RESULT = Literal)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'angle_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 185, line = 5, col = 16)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'cmd', pos = 186, line = 5, col = 17)
          eat(wanted = 'assign')
          get_next_token(lexed = 'assign')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'assign')
          eat(eaten = 'assign', text = '=', pos = 189, line = 5, col = 20)
          next_choice()
            literal()
              eat(wanted = 'backquote1')
              get_next_token(lexed = 'valid_name')
              literal(∅)
            eat(wanted = 'valid_name')
            get_next_token(lexed = 'valid_name')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'valid_name')
            eat(eaten = 'valid_name', text = 'run', pos = 190, line = 5, col = 21)
            next_choice(RESULT = Choice)
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 193, line = 5, col = 24)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'angle_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'angle_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'angle_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 195, line = 5, col = 26)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'code', pos = 196, line = 5, col = 27)
          eat(wanted = 'assign')
          get_next_token(lexed = 'angle_close')
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 200, line = 5, col = 31)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 202, line = 5, col = 33)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'short_option')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'short_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'short_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'short_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'short_option')
              eat(eaten = 'short_option', text = '-g', pos = 203, line = 5, col = 34)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'angle_open')
                taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                get_next_token(returned = 'angle_open')
                eat(eaten = 'angle_open', text = '<', pos = 206, line = 5, col = 37)
                var_input_elems()
                  eat(wanted = 'valid_name')
                  get_next_token(lexed = 'angle_close')
                  eat(wanted = 'assign')
                  get_next_token(lexed = 'angle_close')
                  next_choice()
                    eat(wanted = 'choice_sep')
                    get_next_token(lexed = 'angle_close')
                    next_choice(∅)
                  var_input_elems(RESULT = VarInput)
                eat(wanted = 'angle_close')
                get_next_token(lexed = 'angle_close')
                taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                get_next_token(returned = 'angle_close')
                eat(eaten = 'angle_close', text = '>', pos = 207, line = 5, col = 38)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    quantifier(∅)
                  with_quantifer(RESULT = Parameter)
                parameter(RESULT = Parameter)
              any_parameter(RESULT = Parameter)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            option(RESULT = Option)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 208, line = 5, col = 39)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 210, line = 5, col = 41)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'short_option')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'short_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'short_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'short_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'short_option')
              eat(eaten = 'short_option', text = '-a', pos = 211, line = 5, col = 42)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 213, line = 5, col = 44)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 215, line = 5, col = 46)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'short_option')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'short_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'short_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'short_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'short_option')
              eat(eaten = 'short_option', text = '-v', pos = 216, line = 5, col = 47)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 218, line = 5, col = 49)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 220, line = 5, col = 51)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'short_option')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'short_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'short_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'short_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'short_option')
              eat(eaten = 'short_option', text = '-i', pos = 221, line = 5, col = 52)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 223, line = 5, col = 54)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'variant_def')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'variant_def')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'variant_def')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'variant_def')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'variant_def')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'variant_def')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'main :', pos = 226, line = 7, col = 1)
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 233, line = 7, col = 8)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'long_option')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'long_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'long_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'long_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'long_option')
              eat(eaten = 'long_option', text = '--trace', pos = 234, line = 7, col = 9)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 241, line = 7, col = 16)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'paren_open_named')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'paren_open_named')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'paren_open_named')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'paren_open_named')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'paren_open_named')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'paren_open_named')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'paren_open_named')
        eat(eaten = 'paren_open_named', text = 'commands=(', pos = 243, line = 7, col = 18)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'partial_usage')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'partial_usage')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'partial_usage')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'partial_usage')
            eat(eaten = 'partial_usage', text = 'chomp!', pos = 253, line = 7, col = 28)
            partial_usage(RESULT = PartialUsage)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'choice_sep')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'choice_sep')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'choice_sep')
            eat(eaten = 'choice_sep', text = '|', pos = 260, line = 7, col = 35)
            choice_sep(RESULT = ChoiceSep)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'partial_usage')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'partial_usage')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'partial_usage')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'partial_usage')
            eat(eaten = 'partial_usage', text = 'findall!', pos = 262, line = 7, col = 37)
            partial_usage(RESULT = PartialUsage)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'choice_sep')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'choice_sep')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'choice_sep')
            eat(eaten = 'choice_sep', text = '|', pos = 271, line = 7, col = 46)
            choice_sep(RESULT = ChoiceSep)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'partial_usage')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'partial_usage')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'partial_usage')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'partial_usage')
            eat(eaten = 'partial_usage', text = 'grep!', pos = 273, line = 7, col = 48)
            partial_usage(RESULT = PartialUsage)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'choice_sep')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'choice_sep')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'choice_sep')
            eat(eaten = 'choice_sep', text = '|', pos = 279, line = 7, col = 54)
            choice_sep(RESULT = ChoiceSep)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'partial_usage')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'partial_usage')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'partial_usage')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'partial_usage')
            eat(eaten = 'partial_usage', text = 'range!', pos = 281, line = 7, col = 56)
            partial_usage(RESULT = PartialUsage)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'choice_sep')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'choice_sep')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'choice_sep')
            eat(eaten = 'choice_sep', text = '|', pos = 288, line = 7, col = 63)
            choice_sep(RESULT = ChoiceSep)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'partial_usage')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'partial_usage')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'partial_usage')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'partial_usage')
            eat(eaten = 'partial_usage', text = 'run!', pos = 290, line = 7, col = 65)
            partial_usage(RESULT = PartialUsage)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'paren_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'paren_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'paren_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'paren_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'paren_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'paren_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'paren_close')
        get_next_token(lexed = 'paren_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'paren_close')
        eat(eaten = 'paren_close', text = ')', pos = 294, line = 7, col = 69)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'triple_dot')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'triple_dot')
              eat(eaten = 'triple_dot', text = '...', pos = 295, line = 7, col = 70)
              triple_dot(RESULT = Quantifier)
            eat(wanted = 'question')
            get_next_token(lexed = 'variant_def')
            quantifier(RESULT = Quantifier)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'variant_def')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'variant_def')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'variant_def')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'variant_def')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'help :', pos = 299, line = 8, col = 1)
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'long_option')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'long_option')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'long_option')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'long_option')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'long_option')
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'long_option')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'long_option')
          eat(eaten = 'long_option', text = '--help', pos = 306, line = 8, col = 8)
          bare_option(RESULT = BareOption)
        any_parameter()
          parameter()
            eat(wanted = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            parameter(∅)
          parameter_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            with_quantifer()
              with_quantifer(∅)
            parameter_group(∅)
          any_parameter(∅)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Option)
        option(RESULT = Option)
      literal()
        eat(wanted = 'backquote1')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          bare_option(∅)
        option(∅)
      variant_elems(∅)
    variant(∅)
  collect_section_elems()
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        heading(∅)
      block_quote()
        eat(wanted = 'backquote3_no_wrap|backquote3_comment|backquote3')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            with_quantifer()
              with_quantifer(∅)
            opt_spec_group(∅)
          opt_spec_elem()
            positional()
              eat(wanted = 'angle_open')
              with_quantifer()
                with_quantifer(∅)
              positional(∅)
            aliases_and_option()
              bare_option()
                eat(wanted = 'long_option|short_option')
                bare_option(∅)
              aliases_and_option(∅)
            opt_spec_elem(∅)
          opt_spec_def(∅)
        opt_spec(∅)
      section_content_elem(∅)
    collect_section_elems(∅)
  parse(RESULT = SpecAST)


# GRAMMAR
SpecAST(
    elems = [
        Variant(
            name = 'chomp',
            is_partial = True,
            elems = [
                Literal(
                    text = QuotedText(text='/'),
                ),
                Positional(
                    name = 'cmd',
                    nargs = None,
                    elems = [
                        Choice(
                            text = 'chomp',
                        ),
                    ],
                ),
            ],
        ),
        Variant(
            name = 'findall',
            is_partial = True,
            elems = [
                Literal(
                    text = QuotedText(text='/'),
                ),
                Positional(
                    name = 'cmd',
                    nargs = None,
                    elems = [
                        Choice(
                            text = 'findall',
                        ),
                    ],
                ),
                Positional(
                    name = 'rgx',
                    nargs = None,
                    elems = [
                    ],
                ),
                Group(
                    name = None,
                    ntimes = Quantifier(m=1, n=1, required=False, greedy=True),
                    required = False,
                    elems = [
                        Option(
                            name = 'a',
                            nargs = None,
                            ntimes = None,
                            aliases = [],
                            elems = [
                            ],
                        ),
                    ],
                ),
            ],
        ),
        Variant(
            name = 'grep',
            is_partial = True,
            elems = [
                Literal(
                    text = QuotedText(text='/'),
                ),
                Positional(
                    name = 'cmd',
                    nargs = None,
                    elems = [
                        Choice(
                            text = 'grep',
                        ),
                    ],
                ),
                Positional(
                    name = 'rgx',
                    nargs = None,
                    elems = [
                    ],
                ),
                Group(
                    name = None,
                    ntimes = Quantifier(m=1, n=1, required=False, greedy=True),
                    required = False,
                    elems = [
                        Option(
                            name = 'i',
                            nargs = None,
                            ntimes = None,
                            aliases = [],
                            elems = [
                            ],
                        ),
                    ],
                ),
                Group(
                    name = None,
                    ntimes = Quantifier(m=1, n=1, required=False, greedy=True),
                    required = False,
                    elems = [
                        Option(
                            name = 'v',
                            nargs = None,
                            ntimes = None,
                            aliases = [],
                            elems = [
                            ],
                        ),
                    ],
                ),
                Group(
                    name = None,
                    ntimes = Quantifier(m=1, n=1, required=False, greedy=True),
                    required = False,
                    elems = [
                        Option(
                            name = 's',
                            nargs = None,
                            ntimes = None,
                            aliases = [],
                            elems = [
                            ],
                        ),
                    ],
                ),
            ],
        ),
        Variant(
            name = 'range',
            is_partial = True,
            elems = [
                Literal(
                    text = QuotedText(text='/'),
                ),
                Positional(
                    name = 'cmd',
                    nargs = None,
                    elems = [
                        Choice(
                            text = 'range',
                        ),
                    ],
                ),
                Positional(
                    name = 'start',
                    nargs = None,
                    elems = [
                    ],
                ),
                Positional(
                    name = 'stop',
                    nargs = None,
                    elems = [
                    ],
                ),
                Group(
                    name = None,
                    ntimes = Quantifier(m=1, n=1, required=False, greedy=True),
                    required = False,
                    elems = [
                        Positional(
                            name = 'step',
                            nargs = None,
                            elems = [
                            ],
                        ),
                    ],
                ),
                Group(
                    name = None,
                    ntimes = Quantifier(m=1, n=1, required=False, greedy=True),
                    required = False,
                    elems = [
                        Option(
                            name = 'g',
                            nargs = None,
                            ntimes = None,
                            aliases = [],
                            elems = [
                            ],
                        ),
                    ],
                ),
            ],
        ),
        Variant(
            name = 'run',
            is_partial = True,
            elems = [
                Literal(
                    text = QuotedText(text='/'),
                ),
                Positional(
                    name = 'cmd',
                    nargs = None,
                    elems = [
                        Choice(
                            text = 'run',
                        ),
                    ],
                ),
                Positional(
                    name = 'code',
                    nargs = None,
                    elems = [
                    ],
                ),
                Group(
                    name = None,
                    ntimes = Quantifier(m=1, n=1, required=False, greedy=True),
                    required = False,
                    elems = [
                        Option(
                            name = 'g',
                            nargs = None,
                            ntimes = None,
                            aliases = [],
                            elems = [
                                Parameter(
                                    name = None,
                                    nargs = None,
                                    elems = [
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
                Group(
                    name = None,
                    ntimes = Quantifier(m=1, n=1, required=False, greedy=True),
                    required = False,
                    elems = [
                        Option(
                            name = 'a',
                            nargs = None,
                            ntimes = None,
                            aliases = [],
                            elems = [
                            ],
                        ),
                    ],
                ),
                Group(
                    name = None,
                    ntimes = Quantifier(m=1, n=1, required=False, greedy=True),
                    required = False,
                    elems = [
                        Option(
                            name = 'v',
                            nargs = None,
                            ntimes = None,
                            aliases = [],
                            elems = [
                            ],
                        ),
                    ],
                ),
                Group(
                    name = None,
                    ntimes = Quantifier(m=1, n=1, required=False, greedy=True),
                    required = False,
                    elems = [
                        Option(
                            name = 'i',
                            nargs = None,
                            ntimes = None,
                            aliases = [],
                            elems = [
                            ],
                        ),
                    ],
                ),
            ],
        ),
        Variant(
            name = 'main',
            is_partial = False,
            elems = [
                Group(
                    name = None,
                    ntimes = Quantifier(m=1, n=1, required=False, greedy=True),
                    required = False,
                    elems = [
                        Option(
                            name = 'trace',
                            nargs = None,
                            ntimes = None,
                            aliases = [],
                            elems = [
                            ],
                        ),
                    ],
                ),
                Group(
                    name = 'commands',
                    ntimes = Quantifier(m=1, n=None, required=True, greedy=True),
                    required = True,
                    elems = [
                        PartialUsage(
                            name = 'chomp',
                        ),
                        ChoiceSep(
                        ),
                        PartialUsage(
                            name = 'findall',
                        ),
                        ChoiceSep(
                        ),
                        PartialUsage(
                            name = 'grep',
                        ),
                        ChoiceSep(
                        ),
                        PartialUsage(
                            name = 'range',
                        ),
                        ChoiceSep(
                        ),
                        PartialUsage(
                            name = 'run',
                        ),
                    ],
                ),
            ],
        ),
        Variant(
            name = 'help',
            is_partial = False,
            elems = [
                Option(
                    name = 'help',
                    nargs = None,
                    ntimes = None,
                    aliases = [],
                    elems = [
                    ],
                ),
            ],
        ),
    ],
),
