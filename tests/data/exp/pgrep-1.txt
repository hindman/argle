
# SPEC
[-i] [-v] <rgx> <path>


# PARSER_DEBUG

parse()
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'brack_open')
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, is_first = True)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 0, line = 1, col = 1)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'short_option')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'short_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'short_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'short_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'short_option')
              eat(eaten = 'short_option', text = '-i', pos = 1, line = 1, col = 2)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 3, line = 1, col = 4)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 5, line = 1, col = 6)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'short_option')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'short_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'short_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'short_option')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'short_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'short_option')
              eat(eaten = 'short_option', text = '-v', pos = 6, line = 1, col = 7)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 8, line = 1, col = 9)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'angle_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'angle_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'angle_open')
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'angle_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 10, line = 1, col = 11)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'rgx', pos = 11, line = 1, col = 12)
          eat(wanted = 'assign')
          get_next_token(lexed = 'angle_close')
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 14, line = 1, col = 15)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'angle_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'angle_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'angle_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'angle_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'angle_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'angle_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'angle_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 16, line = 1, col = 17)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'path', pos = 17, line = 1, col = 18)
          eat(wanted = 'assign')
          get_next_token(lexed = 'angle_close')
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 21, line = 1, col = 22)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              quant_range(∅)
            eat(wanted = 'question')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              quant_range(∅)
            eat(wanted = 'question')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      literal()
        eat(wanted = 'backquote1')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          bare_option(∅)
        option(∅)
      variant_elems(∅)
    variant(∅)
  collect_section_elems()
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        heading(∅)
      block_quote()
        eat(wanted = 'backquote3_no_wrap|backquote3_comment|backquote3')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            with_quantifer()
              with_quantifer(∅)
            opt_spec_group(∅)
          opt_spec_elem()
            positional()
              eat(wanted = 'angle_open')
              with_quantifer()
                with_quantifer(∅)
              with_quantifer()
                with_quantifer(∅)
              positional(∅)
            aliases_and_option()
              bare_option()
                eat(wanted = 'long_option|short_option')
                bare_option(∅)
              aliases_and_option(∅)
            opt_spec_elem(∅)
          opt_spec_def(∅)
        opt_spec(∅)
      section_content_elem(∅)
    collect_section_elems(∅)
  parse(RESULT = SpecAST)


# GRAMMAR
SpecAST(
    elems = [
        Variant(
            name = None,
            is_partial = False,
            elems = [
                Group(
                    name = None,
                    quantifier = None,
                    required = False,
                    elems = [
                        Option(
                            name = 'i',
                            quantifier = None,
                            aliases = [],
                            params = [
                            ],
                        ),
                    ],
                ),
                Group(
                    name = None,
                    quantifier = None,
                    required = False,
                    elems = [
                        Option(
                            name = 'v',
                            quantifier = None,
                            aliases = [],
                            params = [
                            ],
                        ),
                    ],
                ),
                Positional(
                    name = 'rgx',
                    quantifier = None,
                    elems = [
                    ],
                ),
                Positional(
                    name = 'path',
                    quantifier = None,
                    elems = [
                    ],
                ),
            ],
        ),
    ],
),
