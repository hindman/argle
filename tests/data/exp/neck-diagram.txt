
# SPEC
cmd! :  command=(
            <cmd=snum>   <snum>             |
            <cmd=fnum>   <fnum>             |
            <cmd=number> <numbering=on|off> |
            <cmd=tuning> <notes>...         |
            <cmd=fret>   <syms>...          |
            <cmd=invert> <syms>...
            )

main : cmd! [ `/` cmd! ]...



# PARSER_DEBUG

parse()
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'cmd! :', pos = 0, line = 1, col = 1)
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'paren_open_named')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'paren_open_named')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'paren_open_named')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'paren_open_named')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'paren_open_named')
        eat(eaten = 'paren_open_named', text = 'command=(', pos = 8, line = 1, col = 9)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'angle_open')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 30, line = 2, col = 13)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'cmd', pos = 31, line = 2, col = 14)
              eat(wanted = 'assign')
              get_next_token(lexed = 'assign')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'assign')
              eat(eaten = 'assign', text = '=', pos = 34, line = 2, col = 17)
              next_choice()
                literal()
                  eat(wanted = 'backquote1')
                  get_next_token(lexed = 'valid_name')
                  literal(∅)
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'snum', pos = 35, line = 2, col = 18)
                next_choice(RESULT = Choice)
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 39, line = 2, col = 22)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'angle_open')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'angle_open')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'angle_open')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 43, line = 2, col = 26)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'snum', pos = 44, line = 2, col = 27)
              eat(wanted = 'assign')
              get_next_token(lexed = 'angle_close')
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 48, line = 2, col = 31)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'choice_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'choice_sep')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'choice_sep')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'choice_sep')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'choice_sep')
            eat(eaten = 'choice_sep', text = '|', pos = 62, line = 2, col = 45)
            choice_sep(RESULT = ChoiceSep)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'angle_open')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 76, line = 3, col = 13)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'cmd', pos = 77, line = 3, col = 14)
              eat(wanted = 'assign')
              get_next_token(lexed = 'assign')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'assign')
              eat(eaten = 'assign', text = '=', pos = 80, line = 3, col = 17)
              next_choice()
                literal()
                  eat(wanted = 'backquote1')
                  get_next_token(lexed = 'valid_name')
                  literal(∅)
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'fnum', pos = 81, line = 3, col = 18)
                next_choice(RESULT = Choice)
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 85, line = 3, col = 22)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'angle_open')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'angle_open')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'angle_open')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 89, line = 3, col = 26)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'fnum', pos = 90, line = 3, col = 27)
              eat(wanted = 'assign')
              get_next_token(lexed = 'angle_close')
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 94, line = 3, col = 31)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'choice_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'choice_sep')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'choice_sep')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'choice_sep')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'choice_sep')
            eat(eaten = 'choice_sep', text = '|', pos = 108, line = 3, col = 45)
            choice_sep(RESULT = ChoiceSep)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'angle_open')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 122, line = 4, col = 13)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'cmd', pos = 123, line = 4, col = 14)
              eat(wanted = 'assign')
              get_next_token(lexed = 'assign')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'assign')
              eat(eaten = 'assign', text = '=', pos = 126, line = 4, col = 17)
              next_choice()
                literal()
                  eat(wanted = 'backquote1')
                  get_next_token(lexed = 'valid_name')
                  literal(∅)
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'number', pos = 127, line = 4, col = 18)
                next_choice(RESULT = Choice)
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 133, line = 4, col = 24)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'angle_open')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'angle_open')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'angle_open')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 135, line = 4, col = 26)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'numbering', pos = 136, line = 4, col = 27)
              eat(wanted = 'assign')
              get_next_token(lexed = 'assign')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'assign')
              eat(eaten = 'assign', text = '=', pos = 145, line = 4, col = 36)
              next_choice()
                literal()
                  eat(wanted = 'backquote1')
                  get_next_token(lexed = 'valid_name')
                  literal(∅)
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'on', pos = 146, line = 4, col = 37)
                next_choice(RESULT = Choice)
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'choice_sep')
                taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
                get_next_token(returned = 'choice_sep')
                eat(eaten = 'choice_sep', text = '|', pos = 148, line = 4, col = 39)
                literal()
                  eat(wanted = 'backquote1')
                  get_next_token(lexed = 'valid_name')
                  literal(∅)
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'off', pos = 149, line = 4, col = 40)
                next_choice(RESULT = Choice)
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 152, line = 4, col = 43)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'choice_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'choice_sep')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'choice_sep')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'choice_sep')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'choice_sep')
            eat(eaten = 'choice_sep', text = '|', pos = 154, line = 4, col = 45)
            choice_sep(RESULT = ChoiceSep)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'angle_open')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 168, line = 5, col = 13)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'cmd', pos = 169, line = 5, col = 14)
              eat(wanted = 'assign')
              get_next_token(lexed = 'assign')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'assign')
              eat(eaten = 'assign', text = '=', pos = 172, line = 5, col = 17)
              next_choice()
                literal()
                  eat(wanted = 'backquote1')
                  get_next_token(lexed = 'valid_name')
                  literal(∅)
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'tuning', pos = 173, line = 5, col = 18)
                next_choice(RESULT = Choice)
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 179, line = 5, col = 24)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'angle_open')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'angle_open')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'angle_open')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 181, line = 5, col = 26)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'notes', pos = 182, line = 5, col = 27)
              eat(wanted = 'assign')
              get_next_token(lexed = 'angle_close')
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 187, line = 5, col = 32)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'triple_dot')
                  taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
                  get_next_token(returned = 'triple_dot')
                  eat(eaten = 'triple_dot', text = '...', pos = 188, line = 5, col = 33)
                  triple_dot(RESULT = Quantifier)
                eat(wanted = 'question')
                get_next_token(lexed = 'choice_sep')
                quantifier(RESULT = Quantifier)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'choice_sep')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'choice_sep')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'choice_sep')
            eat(eaten = 'choice_sep', text = '|', pos = 200, line = 5, col = 45)
            choice_sep(RESULT = ChoiceSep)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'angle_open')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 214, line = 6, col = 13)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'cmd', pos = 215, line = 6, col = 14)
              eat(wanted = 'assign')
              get_next_token(lexed = 'assign')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'assign')
              eat(eaten = 'assign', text = '=', pos = 218, line = 6, col = 17)
              next_choice()
                literal()
                  eat(wanted = 'backquote1')
                  get_next_token(lexed = 'valid_name')
                  literal(∅)
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'fret', pos = 219, line = 6, col = 18)
                next_choice(RESULT = Choice)
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 223, line = 6, col = 22)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'angle_open')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'angle_open')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'angle_open')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 227, line = 6, col = 26)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'syms', pos = 228, line = 6, col = 27)
              eat(wanted = 'assign')
              get_next_token(lexed = 'angle_close')
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 232, line = 6, col = 31)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'triple_dot')
                  taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
                  get_next_token(returned = 'triple_dot')
                  eat(eaten = 'triple_dot', text = '...', pos = 233, line = 6, col = 32)
                  triple_dot(RESULT = Quantifier)
                eat(wanted = 'question')
                get_next_token(lexed = 'choice_sep')
                quantifier(RESULT = Quantifier)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'choice_sep')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'choice_sep')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'choice_sep')
            eat(eaten = 'choice_sep', text = '|', pos = 246, line = 6, col = 45)
            choice_sep(RESULT = ChoiceSep)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'angle_open')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 260, line = 7, col = 13)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'cmd', pos = 261, line = 7, col = 14)
              eat(wanted = 'assign')
              get_next_token(lexed = 'assign')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'assign')
              eat(eaten = 'assign', text = '=', pos = 264, line = 7, col = 17)
              next_choice()
                literal()
                  eat(wanted = 'backquote1')
                  get_next_token(lexed = 'valid_name')
                  literal(∅)
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'invert', pos = 265, line = 7, col = 18)
                next_choice(RESULT = Choice)
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 271, line = 7, col = 24)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'angle_open')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'angle_open')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'angle_open')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 273, line = 7, col = 26)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'syms', pos = 274, line = 7, col = 27)
              eat(wanted = 'assign')
              get_next_token(lexed = 'angle_close')
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 278, line = 7, col = 31)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'triple_dot')
                  taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
                  get_next_token(returned = 'triple_dot')
                  eat(eaten = 'triple_dot', text = '...', pos = 279, line = 7, col = 32)
                  triple_dot(RESULT = Quantifier)
                eat(wanted = 'question')
                get_next_token(lexed = 'paren_close')
                quantifier(RESULT = Quantifier)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'paren_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'paren_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'paren_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'paren_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'paren_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'paren_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'paren_close')
        get_next_token(lexed = 'paren_close')
        taste(ok = True, indent_reason = 'indent', self_indent = 0, tok_indent = 12)
        get_next_token(returned = 'paren_close')
        eat(eaten = 'paren_close', text = ')', pos = 295, line = 8, col = 13)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'variant_def')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'variant_def')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'variant_def')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'variant_def')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'variant_def')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'variant_def')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'main :', pos = 298, line = 10, col = 1)
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'partial_usage')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'partial_usage')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'partial_usage')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'partial_usage')
        eat(eaten = 'partial_usage', text = 'cmd!', pos = 305, line = 10, col = 8)
        partial_usage(RESULT = PartialUsage)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'brack_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 310, line = 10, col = 13)
        variant_elems()
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'backquote1')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'backquote1')
            eat(eaten = 'backquote1', text = '`', pos = 312, line = 10, col = 15)
            quoted_text()
              eat(wanted = 'literal_backslash|literal_backquote1|quoted_char1|backquote1')
              get_next_token(lexed = 'quoted_char1')
              taste(ok = True, indent_reason = 'quoted', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'quoted_char1')
              eat(eaten = 'quoted_char1', text = '/', pos = 313, line = 10, col = 16)
              eat(wanted = 'literal_backslash|literal_backquote1|quoted_char1|backquote1')
              get_next_token(lexed = 'backquote1')
              taste(ok = True, indent_reason = 'quoted', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'backquote1')
              eat(eaten = 'backquote1', text = '`', pos = 314, line = 10, col = 17)
              quoted_text(RESULT = QuotedText)
            literal(RESULT = Literal)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'partial_usage')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'partial_usage')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'partial_usage')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'partial_usage')
            eat(eaten = 'partial_usage', text = 'cmd!', pos = 316, line = 10, col = 19)
            partial_usage(RESULT = PartialUsage)
          literal()
            eat(wanted = 'backquote1')
            get_next_token(lexed = 'brack_close')
            literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 321, line = 10, col = 24)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'triple_dot')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'triple_dot')
              eat(eaten = 'triple_dot', text = '...', pos = 322, line = 10, col = 25)
              triple_dot(RESULT = Quantifier)
            eat(wanted = 'question')
            quantifier(RESULT = Quantifier)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      literal()
        eat(wanted = 'backquote1')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          bare_option(∅)
        option(∅)
      variant_elems(∅)
    variant(∅)
  collect_section_elems()
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        heading(∅)
      block_quote()
        eat(wanted = 'backquote3_no_wrap|backquote3_comment|backquote3')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            with_quantifer()
              with_quantifer(∅)
            opt_spec_group(∅)
          opt_spec_elem()
            positional()
              eat(wanted = 'angle_open')
              with_quantifer()
                with_quantifer(∅)
              positional(∅)
            aliases_and_option()
              bare_option()
                eat(wanted = 'long_option|short_option')
                bare_option(∅)
              aliases_and_option(∅)
            opt_spec_elem(∅)
          opt_spec_def(∅)
        opt_spec(∅)
      section_content_elem(∅)
    collect_section_elems(∅)
  parse(RESULT = ParsedSpec)


# GRAMMAR
SpecAST(
    elems = [
        Variant(
            name = 'cmd',
            is_partial = True,
            elems = [
                Group(
                    name = 'command',
                    ntimes = None,
                    required = True,
                    elems = [
                        Positional(
                            name = 'cmd',
                            nargs = None,
                            elems = [
                                Choice(
                                    text = 'snum',
                            ],
                        ),
                        Positional(
                            name = 'snum',
                            nargs = None,
                            elems = [
                            ],
                        ),
                        ChoiceSep(
                        Positional(
                            name = 'cmd',
                            nargs = None,
                            elems = [
                                Choice(
                                    text = 'fnum',
                            ],
                        ),
                        Positional(
                            name = 'fnum',
                            nargs = None,
                            elems = [
                            ],
                        ),
                        ChoiceSep(
                        Positional(
                            name = 'cmd',
                            nargs = None,
                            elems = [
                                Choice(
                                    text = 'number',
                            ],
                        ),
                        Positional(
                            name = 'numbering',
                            nargs = None,
                            elems = [
                                Choice(
                                    text = 'on',
                                Choice(
                                    text = 'off',
                            ],
                        ),
                        ChoiceSep(
                        Positional(
                            name = 'cmd',
                            nargs = None,
                            elems = [
                                Choice(
                                    text = 'tuning',
                            ],
                        ),
                        Positional(
                            name = 'notes',
                            nargs = Quantifier(m=1, n=None, required=True, greedy=True),
                            elems = [
                            ],
                        ),
                        ChoiceSep(
                        Positional(
                            name = 'cmd',
                            nargs = None,
                            elems = [
                                Choice(
                                    text = 'fret',
                            ],
                        ),
                        Positional(
                            name = 'syms',
                            nargs = Quantifier(m=1, n=None, required=True, greedy=True),
                            elems = [
                            ],
                        ),
                        ChoiceSep(
                        Positional(
                            name = 'cmd',
                            nargs = None,
                            elems = [
                                Choice(
                                    text = 'invert',
                            ],
                        ),
                        Positional(
                            name = 'syms',
                            nargs = Quantifier(m=1, n=None, required=True, greedy=True),
                            elems = [
                            ],
                        ),
                    ],
                ),
            ],
        ),
        Variant(
            name = 'main',
            is_partial = False,
            elems = [
                PartialUsage(
                    name = 'cmd',
                Group(
                    name = None,
                    ntimes = Quantifier(m=1, n=None, required=False, greedy=True),
                    required = False,
                    elems = [
                        Literal(
                            text = QuotedText(text='/'),
                        PartialUsage(
                            name = 'cmd',
                    ],
                ),
            ],
        ),
    ],
),
