
# SPEC

general! : general-options=([--repo-home] [--config]... [--verbose])

clone   : general! <command=clone> <src> [<dst>] [--shallow | --deep] [--rev]
commit  : general! <command=commit> [<file>]... [--message]
copy    : general! <command=copy> [<src>]... <dst> [--force]
delete  : general! <command=delete> [--yes]
setuser : general! <command=setuser> [--username] [--email] [--password]

```
Repo is a command line tool that showcases how to build complex command line
interfaces with Argle.

This tool is supposed to look like a distributed version control system to
show how something like this can be structured.
```

Commands :::
    <command=clone>   : Clones a repository
    <command=commit>  : Commits outstanding changes
    <command=copy>    : Copies files
    <command=delete>  : Deletes a repository
    <command=setuser> : Sets the user credentials

General options :::
    [--repo-home <path>]        : Changes the repository folder location
    [--config <key> <value>]... : Overrides a config key/value pair [repeatable]
    [-v --verbose]              : Enables verbose mode
    [--version]
    [--help]

Command: clone ::

```
This will clone the repository at <src> into the folder <dst>. If <dst> is not
provided this will automatically use the last path component of <src> and create
that folder.
```

    <src>               : Repository source
    [<dst>]             : Directory path in which to put the cloned repo
    [--deep]            : Deep checkout [the default]
    [--shallow]         : Shallow checkout
    [-r --rev <commit>] : Clone a specific revision instead of HEAD

Command: commit ::

```
Commits outstanding changes.

Commit changes to the given files into the repository. You will need to
"repo push" to push up your changes to other repositories.

If a list of files is omitted, all changes reported by "repo status" will be
committed.
```

    [<file>]...              : File path
    [-m --message <text>]... : Commit message [if multiple, joined by newline]

Command: copy ::

```
Copies one or multiple files to a new location. This copies all files from
<src> to <dst>.
```

    [<src>]... : File path
    <dst>      : Directory path of destination
    [--force]  : Forcibly copy over an existing file

Command: delete ::

```
Deletes a repository.

This will throw away the current repository.
```

    [--yes] : Confirm the action without prompting

Command: setuser ::

```
Sets the user credentials.

This will override the current user config.
```

    [--username <user>] : Username
    [--email <address>] : Email address
    [--password <pw>]   : Login password



# PARSER_DEBUG

parse()
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'general! :', pos = 1, line = 2, col = 1)
    variant_elems()
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'paren_open_named')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'paren_open_named')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'paren_open_named')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'paren_open_named')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'paren_open_named')
        eat(eaten = 'paren_open_named', text = 'general-options=(', pos = 12, line = 2, col = 12)
        variant_elems()
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_open')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 29, line = 2, col = 29)
            variant_elems()
              quoted_literal()
                eat(wanted = 'quoted_literal')
                get_next_token(lexed = 'long_option')
                quoted_literal(∅)
              choice_sep()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'long_option')
                choice_sep(∅)
              partial_usage()
                eat(wanted = 'partial_usage')
                get_next_token(lexed = 'long_option')
                partial_usage(∅)
              any_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                any_group(∅)
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--repo-home', pos = 30, line = 2, col = 30)
                  bare_option(RESULT = BareOption)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Option)
                option(RESULT = Option)
              quoted_literal()
                eat(wanted = 'quoted_literal')
                get_next_token(lexed = 'brack_close')
                quoted_literal(∅)
              choice_sep()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'brack_close')
                choice_sep(∅)
              partial_usage()
                eat(wanted = 'partial_usage')
                get_next_token(lexed = 'brack_close')
                partial_usage(∅)
              any_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                any_group(∅)
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'brack_close')
                  bare_option(∅)
                option(∅)
              variant_elems(RESULT = VariantElems)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 41, line = 2, col = 41)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_open')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_open')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_open')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            any_group(RESULT = Group)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_open')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 43, line = 2, col = 43)
            variant_elems()
              quoted_literal()
                eat(wanted = 'quoted_literal')
                get_next_token(lexed = 'long_option')
                quoted_literal(∅)
              choice_sep()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'long_option')
                choice_sep(∅)
              partial_usage()
                eat(wanted = 'partial_usage')
                get_next_token(lexed = 'long_option')
                partial_usage(∅)
              any_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                any_group(∅)
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--config', pos = 44, line = 2, col = 44)
                  bare_option(RESULT = BareOption)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Option)
                option(RESULT = Option)
              quoted_literal()
                eat(wanted = 'quoted_literal')
                get_next_token(lexed = 'brack_close')
                quoted_literal(∅)
              choice_sep()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'brack_close')
                choice_sep(∅)
              partial_usage()
                eat(wanted = 'partial_usage')
                get_next_token(lexed = 'brack_close')
                partial_usage(∅)
              any_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                any_group(∅)
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'brack_close')
                  bare_option(∅)
                option(∅)
              variant_elems(RESULT = VariantElems)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 52, line = 2, col = 52)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'triple_dot')
                  taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                  get_next_token(returned = 'triple_dot')
                  eat(eaten = 'triple_dot', text = '...', pos = 53, line = 2, col = 53)
                  triple_dot(RESULT = Quantifier)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_open')
                quantifier(RESULT = Quantifier)
              with_quantifer(RESULT = Group)
            any_group(RESULT = Group)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_open')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 57, line = 2, col = 57)
            variant_elems()
              quoted_literal()
                eat(wanted = 'quoted_literal')
                get_next_token(lexed = 'long_option')
                quoted_literal(∅)
              choice_sep()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'long_option')
                choice_sep(∅)
              partial_usage()
                eat(wanted = 'partial_usage')
                get_next_token(lexed = 'long_option')
                partial_usage(∅)
              any_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                any_group(∅)
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--verbose', pos = 58, line = 2, col = 58)
                  bare_option(RESULT = BareOption)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Option)
                option(RESULT = Option)
              quoted_literal()
                eat(wanted = 'quoted_literal')
                get_next_token(lexed = 'brack_close')
                quoted_literal(∅)
              choice_sep()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'brack_close')
                choice_sep(∅)
              partial_usage()
                eat(wanted = 'partial_usage')
                get_next_token(lexed = 'brack_close')
                partial_usage(∅)
              any_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                any_group(∅)
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'brack_close')
                  bare_option(∅)
                option(∅)
              variant_elems(RESULT = VariantElems)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 67, line = 2, col = 67)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'paren_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'paren_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'paren_close')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            any_group(RESULT = Group)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'paren_close')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'paren_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'paren_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'paren_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'paren_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'paren_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'paren_close')
        get_next_token(lexed = 'paren_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'paren_close')
        eat(eaten = 'paren_close', text = ')', pos = 68, line = 2, col = 68)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'variant_def')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'variant_def')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'variant_def')
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'variant_def')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'variant_def')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'variant_def')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'variant_def')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'clone   :', pos = 71, line = 4, col = 1)
    variant_elems()
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'partial_usage')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'partial_usage')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'partial_usage')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'partial_usage')
        eat(eaten = 'partial_usage', text = 'general!', pos = 81, line = 4, col = 11)
        partial_usage(RESULT = PartialUsage)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'angle_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 90, line = 4, col = 20)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'command', pos = 91, line = 4, col = 21)
          eat(wanted = 'assign')
          get_next_token(lexed = 'assign')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'assign')
          eat(eaten = 'assign', text = '=', pos = 98, line = 4, col = 28)
          next_choice()
            quoted_literal()
              eat(wanted = 'quoted_literal')
              get_next_token(lexed = 'valid_name')
              quoted_literal(∅)
            eat(wanted = 'valid_name')
            get_next_token(lexed = 'valid_name')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'valid_name')
            eat(eaten = 'valid_name', text = 'clone', pos = 99, line = 4, col = 29)
            next_choice(RESULT = Choice)
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 104, line = 4, col = 34)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'angle_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'angle_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'angle_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'angle_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'angle_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'angle_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'angle_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 106, line = 4, col = 36)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'src', pos = 107, line = 4, col = 37)
          eat(wanted = 'assign')
          get_next_token(lexed = 'angle_close')
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 110, line = 4, col = 40)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 112, line = 4, col = 42)
        variant_elems()
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'angle_open')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 113, line = 4, col = 43)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'dst', pos = 114, line = 4, col = 44)
              eat(wanted = 'assign')
              get_next_token(lexed = 'angle_close')
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 117, line = 4, col = 47)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_close')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 118, line = 4, col = 48)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 120, line = 4, col = 50)
        variant_elems()
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'long_option')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'long_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'long_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'long_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'long_option')
              eat(eaten = 'long_option', text = '--shallow', pos = 121, line = 4, col = 51)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'choice_sep')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'choice_sep')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'choice_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'choice_sep')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'choice_sep')
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'choice_sep')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'choice_sep')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'choice_sep')
            eat(eaten = 'choice_sep', text = '|', pos = 131, line = 4, col = 61)
            choice_sep(RESULT = ChoiceSep)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'long_option')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'long_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'long_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'long_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'long_option')
              eat(eaten = 'long_option', text = '--deep', pos = 133, line = 4, col = 63)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_close')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 139, line = 4, col = 69)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 141, line = 4, col = 71)
        variant_elems()
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'long_option')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'long_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'long_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'long_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'long_option')
              eat(eaten = 'long_option', text = '--rev', pos = 142, line = 4, col = 72)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_close')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 147, line = 4, col = 77)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'variant_def')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'variant_def')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'variant_def')
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'variant_def')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'variant_def')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'variant_def')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'variant_def')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'commit  :', pos = 149, line = 5, col = 1)
    variant_elems()
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'partial_usage')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'partial_usage')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'partial_usage')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'partial_usage')
        eat(eaten = 'partial_usage', text = 'general!', pos = 159, line = 5, col = 11)
        partial_usage(RESULT = PartialUsage)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'angle_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 168, line = 5, col = 20)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'command', pos = 169, line = 5, col = 21)
          eat(wanted = 'assign')
          get_next_token(lexed = 'assign')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'assign')
          eat(eaten = 'assign', text = '=', pos = 176, line = 5, col = 28)
          next_choice()
            quoted_literal()
              eat(wanted = 'quoted_literal')
              get_next_token(lexed = 'valid_name')
              quoted_literal(∅)
            eat(wanted = 'valid_name')
            get_next_token(lexed = 'valid_name')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'valid_name')
            eat(eaten = 'valid_name', text = 'commit', pos = 177, line = 5, col = 29)
            next_choice(RESULT = Choice)
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 183, line = 5, col = 35)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 185, line = 5, col = 37)
        variant_elems()
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'angle_open')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 186, line = 5, col = 38)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'file', pos = 187, line = 5, col = 39)
              eat(wanted = 'assign')
              get_next_token(lexed = 'angle_close')
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 191, line = 5, col = 43)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_close')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 192, line = 5, col = 44)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'triple_dot')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'triple_dot')
              eat(eaten = 'triple_dot', text = '...', pos = 193, line = 5, col = 45)
              triple_dot(RESULT = Quantifier)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(RESULT = Quantifier)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 197, line = 5, col = 49)
        variant_elems()
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'long_option')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'long_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'long_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'long_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'long_option')
              eat(eaten = 'long_option', text = '--message', pos = 198, line = 5, col = 50)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_close')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 207, line = 5, col = 59)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'variant_def')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'variant_def')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'variant_def')
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'variant_def')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'variant_def')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'variant_def')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'variant_def')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'copy    :', pos = 209, line = 6, col = 1)
    variant_elems()
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'partial_usage')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'partial_usage')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'partial_usage')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'partial_usage')
        eat(eaten = 'partial_usage', text = 'general!', pos = 219, line = 6, col = 11)
        partial_usage(RESULT = PartialUsage)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'angle_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 228, line = 6, col = 20)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'command', pos = 229, line = 6, col = 21)
          eat(wanted = 'assign')
          get_next_token(lexed = 'assign')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'assign')
          eat(eaten = 'assign', text = '=', pos = 236, line = 6, col = 28)
          next_choice()
            quoted_literal()
              eat(wanted = 'quoted_literal')
              get_next_token(lexed = 'valid_name')
              quoted_literal(∅)
            eat(wanted = 'valid_name')
            get_next_token(lexed = 'valid_name')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'valid_name')
            eat(eaten = 'valid_name', text = 'copy', pos = 237, line = 6, col = 29)
            next_choice(RESULT = Choice)
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 241, line = 6, col = 33)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 243, line = 6, col = 35)
        variant_elems()
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'angle_open')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_open')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'angle_open')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'angle_open')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'angle_open')
            eat(eaten = 'angle_open', text = '<', pos = 244, line = 6, col = 36)
            var_input_elems()
              eat(wanted = 'valid_name')
              get_next_token(lexed = 'valid_name')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'valid_name')
              eat(eaten = 'valid_name', text = 'src', pos = 245, line = 6, col = 37)
              eat(wanted = 'assign')
              get_next_token(lexed = 'angle_close')
              next_choice()
                eat(wanted = 'choice_sep')
                get_next_token(lexed = 'angle_close')
                next_choice(∅)
              var_input_elems(RESULT = VarInput)
            eat(wanted = 'angle_close')
            get_next_token(lexed = 'angle_close')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'angle_close')
            eat(eaten = 'angle_close', text = '>', pos = 248, line = 6, col = 40)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Positional)
            positional(RESULT = Positional)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_close')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 249, line = 6, col = 41)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'triple_dot')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'triple_dot')
              eat(eaten = 'triple_dot', text = '...', pos = 250, line = 6, col = 42)
              triple_dot(RESULT = Quantifier)
            eat(wanted = 'question')
            get_next_token(lexed = 'angle_open')
            quantifier(RESULT = Quantifier)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'angle_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 254, line = 6, col = 46)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'dst', pos = 255, line = 6, col = 47)
          eat(wanted = 'assign')
          get_next_token(lexed = 'angle_close')
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 258, line = 6, col = 50)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 260, line = 6, col = 52)
        variant_elems()
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'long_option')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'long_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'long_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'long_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'long_option')
              eat(eaten = 'long_option', text = '--force', pos = 261, line = 6, col = 53)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_close')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 268, line = 6, col = 60)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'variant_def')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'variant_def')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'variant_def')
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'variant_def')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'variant_def')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'variant_def')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'variant_def')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'delete  :', pos = 270, line = 7, col = 1)
    variant_elems()
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'partial_usage')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'partial_usage')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'partial_usage')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'partial_usage')
        eat(eaten = 'partial_usage', text = 'general!', pos = 280, line = 7, col = 11)
        partial_usage(RESULT = PartialUsage)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'angle_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 289, line = 7, col = 20)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'command', pos = 290, line = 7, col = 21)
          eat(wanted = 'assign')
          get_next_token(lexed = 'assign')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'assign')
          eat(eaten = 'assign', text = '=', pos = 297, line = 7, col = 28)
          next_choice()
            quoted_literal()
              eat(wanted = 'quoted_literal')
              get_next_token(lexed = 'valid_name')
              quoted_literal(∅)
            eat(wanted = 'valid_name')
            get_next_token(lexed = 'valid_name')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'valid_name')
            eat(eaten = 'valid_name', text = 'delete', pos = 298, line = 7, col = 29)
            next_choice(RESULT = Choice)
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 304, line = 7, col = 35)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 306, line = 7, col = 37)
        variant_elems()
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'long_option')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'long_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'long_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'long_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'long_option')
              eat(eaten = 'long_option', text = '--yes', pos = 307, line = 7, col = 38)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_close')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 312, line = 7, col = 43)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'variant_def')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'variant_def')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'variant_def')
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'variant_def')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'variant_def')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'variant_def')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'variant_def')
        with_quantifer()
          with_quantifer(∅)
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'variant_def')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'variant_def')
    taste(ok = True, is_first = True)
    get_next_token(returned = 'variant_def')
    eat(eaten = 'variant_def', text = 'setuser :', pos = 314, line = 8, col = 1)
    variant_elems()
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'partial_usage')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'partial_usage')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'partial_usage')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'partial_usage')
        eat(eaten = 'partial_usage', text = 'general!', pos = 324, line = 8, col = 11)
        partial_usage(RESULT = PartialUsage)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'angle_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 333, line = 8, col = 20)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'command', pos = 334, line = 8, col = 21)
          eat(wanted = 'assign')
          get_next_token(lexed = 'assign')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'assign')
          eat(eaten = 'assign', text = '=', pos = 341, line = 8, col = 28)
          next_choice()
            quoted_literal()
              eat(wanted = 'quoted_literal')
              get_next_token(lexed = 'valid_name')
              quoted_literal(∅)
            eat(wanted = 'valid_name')
            get_next_token(lexed = 'valid_name')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'valid_name')
            eat(eaten = 'valid_name', text = 'setuser', pos = 342, line = 8, col = 29)
            next_choice(RESULT = Choice)
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 349, line = 8, col = 36)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 351, line = 8, col = 38)
        variant_elems()
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'long_option')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'long_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'long_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'long_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'long_option')
              eat(eaten = 'long_option', text = '--username', pos = 352, line = 8, col = 39)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_close')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 362, line = 8, col = 49)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 364, line = 8, col = 51)
        variant_elems()
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'long_option')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'long_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'long_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'long_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'long_option')
              eat(eaten = 'long_option', text = '--email', pos = 365, line = 8, col = 52)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_close')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 372, line = 8, col = 59)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'brack_open')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'brack_open')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'brack_open')
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'brack_open')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'brack_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'brack_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'brack_open')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_open')
        eat(eaten = 'brack_open', text = '[', pos = 374, line = 8, col = 61)
        variant_elems()
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'long_option')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'long_option')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'long_option')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'long_option')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'long_option')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'long_option')
              eat(eaten = 'long_option', text = '--password', pos = 375, line = 8, col = 62)
              bare_option(RESULT = BareOption)
            any_parameter()
              parameter()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter(∅)
              parameter_group()
                eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                get_next_token(lexed = 'brack_close')
                with_quantifer()
                  with_quantifer(∅)
                parameter_group(∅)
              any_parameter(∅)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_close')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_close')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_close')
                quantifier(∅)
              with_quantifer(RESULT = Option)
            option(RESULT = Option)
          quoted_literal()
            eat(wanted = 'quoted_literal')
            get_next_token(lexed = 'brack_close')
            quoted_literal(∅)
          choice_sep()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'brack_close')
            choice_sep(∅)
          partial_usage()
            eat(wanted = 'partial_usage')
            get_next_token(lexed = 'brack_close')
            partial_usage(∅)
          any_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            any_group(∅)
          positional()
            eat(wanted = 'angle_open')
            get_next_token(lexed = 'brack_close')
            with_quantifer()
              with_quantifer(∅)
            with_quantifer()
              with_quantifer(∅)
            positional(∅)
          option()
            bare_option()
              eat(wanted = 'long_option|short_option')
              get_next_token(lexed = 'brack_close')
              bare_option(∅)
            option(∅)
          variant_elems(RESULT = VariantElems)
        eat(wanted = 'brack_close')
        get_next_token(lexed = 'brack_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'brack_close')
        eat(eaten = 'brack_close', text = ']', pos = 385, line = 8, col = 72)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'quoted_block')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'quoted_block')
              quant_range(∅)
            eat(wanted = 'question')
            get_next_token(lexed = 'quoted_block')
            quantifier(∅)
          with_quantifer(RESULT = Group)
        any_group(RESULT = Group)
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'quoted_block')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'quoted_block')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'quoted_block')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'quoted_block')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'quoted_block')
        with_quantifer()
          with_quantifer(∅)
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'quoted_block')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(RESULT = Variant)
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'quoted_block')
    variant_elems()
      quoted_literal()
        eat(wanted = 'quoted_literal')
        get_next_token(lexed = 'quoted_block')
        quoted_literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'quoted_block')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'quoted_block')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'quoted_block')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'quoted_block')
        with_quantifer()
          with_quantifer(∅)
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'quoted_block')
          bare_option(∅)
        option(∅)
      variant_elems(∅)
    variant(∅)
  collect_section_elems()
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'quoted_block')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'quoted_block')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'quoted_block')
        taste(ok = True, is_first = True)
        get_next_token(returned = 'quoted_block')
        eat(eaten = 'quoted_block', text = '```\nRepo is a command line tool that showcases how to build complex command line\ninterfaces with Argle.\n\nThis tool is supposed to look like a distributed version control system to\nshow how something like this can be structured.\n```', pos = 388, line = 10, col = 1)
        block_quote(RESULT = BlockQuote)
      section_content_elem(RESULT = BlockQuote)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'section_title')
      taste(ok = True, is_first = True)
      get_next_token(returned = 'section_title')
      eat(eaten = 'section_title', text = 'Commands :::', pos = 621, line = 18, col = 1)
      any_section_title(RESULT = SectionTitle)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'angle_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'angle_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'angle_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'angle_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            opt_spec_group(∅)
          opt_spec_elem()
            positional()
              eat(wanted = 'angle_open')
              get_next_token(lexed = 'angle_open')
              taste(ok = True, is_first = True)
              get_next_token(returned = 'angle_open')
              eat(eaten = 'angle_open', text = '<', pos = 638, line = 19, col = 5)
              var_input_elems()
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'command', pos = 639, line = 19, col = 6)
                eat(wanted = 'assign')
                get_next_token(lexed = 'assign')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'assign')
                eat(eaten = 'assign', text = '=', pos = 646, line = 19, col = 13)
                next_choice()
                  quoted_literal()
                    eat(wanted = 'quoted_literal')
                    get_next_token(lexed = 'valid_name')
                    quoted_literal(∅)
                  eat(wanted = 'valid_name')
                  get_next_token(lexed = 'valid_name')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'valid_name')
                  eat(eaten = 'valid_name', text = 'clone', pos = 647, line = 19, col = 14)
                  next_choice(RESULT = Choice)
                next_choice()
                  eat(wanted = 'choice_sep')
                  get_next_token(lexed = 'angle_close')
                  next_choice(∅)
                var_input_elems(RESULT = VarInput)
              eat(wanted = 'angle_close')
              get_next_token(lexed = 'angle_close')
              taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
              get_next_token(returned = 'angle_close')
              eat(eaten = 'angle_close', text = '>', pos = 652, line = 19, col = 19)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              positional(RESULT = Positional)
            opt_spec_elem(RESULT = Positional)
          opt_spec_def(RESULT = Positional)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 656, line = 19, col = 23)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Clones a repository', pos = 658, line = 19, col = 25)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'angle_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'angle_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'angle_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'angle_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            opt_spec_group(∅)
          opt_spec_elem()
            positional()
              eat(wanted = 'angle_open')
              get_next_token(lexed = 'angle_open')
              taste(ok = True, is_first = True)
              get_next_token(returned = 'angle_open')
              eat(eaten = 'angle_open', text = '<', pos = 682, line = 20, col = 5)
              var_input_elems()
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'command', pos = 683, line = 20, col = 6)
                eat(wanted = 'assign')
                get_next_token(lexed = 'assign')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'assign')
                eat(eaten = 'assign', text = '=', pos = 690, line = 20, col = 13)
                next_choice()
                  quoted_literal()
                    eat(wanted = 'quoted_literal')
                    get_next_token(lexed = 'valid_name')
                    quoted_literal(∅)
                  eat(wanted = 'valid_name')
                  get_next_token(lexed = 'valid_name')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'valid_name')
                  eat(eaten = 'valid_name', text = 'commit', pos = 691, line = 20, col = 14)
                  next_choice(RESULT = Choice)
                next_choice()
                  eat(wanted = 'choice_sep')
                  get_next_token(lexed = 'angle_close')
                  next_choice(∅)
                var_input_elems(RESULT = VarInput)
              eat(wanted = 'angle_close')
              get_next_token(lexed = 'angle_close')
              taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
              get_next_token(returned = 'angle_close')
              eat(eaten = 'angle_close', text = '>', pos = 697, line = 20, col = 20)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              positional(RESULT = Positional)
            opt_spec_elem(RESULT = Positional)
          opt_spec_def(RESULT = Positional)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 700, line = 20, col = 23)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Commits outstanding changes', pos = 702, line = 20, col = 25)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'angle_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'angle_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'angle_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'angle_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            opt_spec_group(∅)
          opt_spec_elem()
            positional()
              eat(wanted = 'angle_open')
              get_next_token(lexed = 'angle_open')
              taste(ok = True, is_first = True)
              get_next_token(returned = 'angle_open')
              eat(eaten = 'angle_open', text = '<', pos = 734, line = 21, col = 5)
              var_input_elems()
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'command', pos = 735, line = 21, col = 6)
                eat(wanted = 'assign')
                get_next_token(lexed = 'assign')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'assign')
                eat(eaten = 'assign', text = '=', pos = 742, line = 21, col = 13)
                next_choice()
                  quoted_literal()
                    eat(wanted = 'quoted_literal')
                    get_next_token(lexed = 'valid_name')
                    quoted_literal(∅)
                  eat(wanted = 'valid_name')
                  get_next_token(lexed = 'valid_name')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'valid_name')
                  eat(eaten = 'valid_name', text = 'copy', pos = 743, line = 21, col = 14)
                  next_choice(RESULT = Choice)
                next_choice()
                  eat(wanted = 'choice_sep')
                  get_next_token(lexed = 'angle_close')
                  next_choice(∅)
                var_input_elems(RESULT = VarInput)
              eat(wanted = 'angle_close')
              get_next_token(lexed = 'angle_close')
              taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
              get_next_token(returned = 'angle_close')
              eat(eaten = 'angle_close', text = '>', pos = 747, line = 21, col = 18)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              positional(RESULT = Positional)
            opt_spec_elem(RESULT = Positional)
          opt_spec_def(RESULT = Positional)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 752, line = 21, col = 23)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Copies files', pos = 754, line = 21, col = 25)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'angle_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'angle_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'angle_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'angle_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            opt_spec_group(∅)
          opt_spec_elem()
            positional()
              eat(wanted = 'angle_open')
              get_next_token(lexed = 'angle_open')
              taste(ok = True, is_first = True)
              get_next_token(returned = 'angle_open')
              eat(eaten = 'angle_open', text = '<', pos = 771, line = 22, col = 5)
              var_input_elems()
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'command', pos = 772, line = 22, col = 6)
                eat(wanted = 'assign')
                get_next_token(lexed = 'assign')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'assign')
                eat(eaten = 'assign', text = '=', pos = 779, line = 22, col = 13)
                next_choice()
                  quoted_literal()
                    eat(wanted = 'quoted_literal')
                    get_next_token(lexed = 'valid_name')
                    quoted_literal(∅)
                  eat(wanted = 'valid_name')
                  get_next_token(lexed = 'valid_name')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'valid_name')
                  eat(eaten = 'valid_name', text = 'delete', pos = 780, line = 22, col = 14)
                  next_choice(RESULT = Choice)
                next_choice()
                  eat(wanted = 'choice_sep')
                  get_next_token(lexed = 'angle_close')
                  next_choice(∅)
                var_input_elems(RESULT = VarInput)
              eat(wanted = 'angle_close')
              get_next_token(lexed = 'angle_close')
              taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
              get_next_token(returned = 'angle_close')
              eat(eaten = 'angle_close', text = '>', pos = 786, line = 22, col = 20)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              positional(RESULT = Positional)
            opt_spec_elem(RESULT = Positional)
          opt_spec_def(RESULT = Positional)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 789, line = 22, col = 23)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Deletes a repository', pos = 791, line = 22, col = 25)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'angle_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'angle_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'angle_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'angle_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            opt_spec_group(∅)
          opt_spec_elem()
            positional()
              eat(wanted = 'angle_open')
              get_next_token(lexed = 'angle_open')
              taste(ok = True, is_first = True)
              get_next_token(returned = 'angle_open')
              eat(eaten = 'angle_open', text = '<', pos = 816, line = 23, col = 5)
              var_input_elems()
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'command', pos = 817, line = 23, col = 6)
                eat(wanted = 'assign')
                get_next_token(lexed = 'assign')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'assign')
                eat(eaten = 'assign', text = '=', pos = 824, line = 23, col = 13)
                next_choice()
                  quoted_literal()
                    eat(wanted = 'quoted_literal')
                    get_next_token(lexed = 'valid_name')
                    quoted_literal(∅)
                  eat(wanted = 'valid_name')
                  get_next_token(lexed = 'valid_name')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'valid_name')
                  eat(eaten = 'valid_name', text = 'setuser', pos = 825, line = 23, col = 14)
                  next_choice(RESULT = Choice)
                next_choice()
                  eat(wanted = 'choice_sep')
                  get_next_token(lexed = 'angle_close')
                  next_choice(∅)
                var_input_elems(RESULT = VarInput)
              eat(wanted = 'angle_close')
              get_next_token(lexed = 'angle_close')
              taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
              get_next_token(returned = 'angle_close')
              eat(eaten = 'angle_close', text = '>', pos = 832, line = 23, col = 21)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              positional(RESULT = Positional)
            opt_spec_elem(RESULT = Positional)
          opt_spec_def(RESULT = Positional)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 834, line = 23, col = 23)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Sets the user credentials', pos = 836, line = 23, col = 25)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 0)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'section_title')
      taste(ok = True, is_first = True)
      get_next_token(returned = 'section_title')
      eat(eaten = 'section_title', text = 'General options :::', pos = 863, line = 25, col = 1)
      any_section_title(RESULT = SectionTitle)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 887, line = 26, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--repo-home', pos = 888, line = 26, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'angle_open')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'angle_open')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_open')
                    eat(eaten = 'angle_open', text = '<', pos = 900, line = 26, col = 18)
                    var_input_elems()
                      eat(wanted = 'valid_name')
                      get_next_token(lexed = 'valid_name')
                      taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                      get_next_token(returned = 'valid_name')
                      eat(eaten = 'valid_name', text = 'path', pos = 901, line = 26, col = 19)
                      eat(wanted = 'assign')
                      get_next_token(lexed = 'angle_close')
                      next_choice()
                        eat(wanted = 'choice_sep')
                        get_next_token(lexed = 'angle_close')
                        next_choice(∅)
                      var_input_elems(RESULT = VarInput)
                    eat(wanted = 'angle_close')
                    get_next_token(lexed = 'angle_close')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_close')
                    eat(eaten = 'angle_close', text = '>', pos = 905, line = 26, col = 23)
                    with_quantifer()
                      quantifier()
                        triple_dot()
                          eat(wanted = 'triple_dot')
                          get_next_token(lexed = 'brack_close')
                          triple_dot(∅)
                        quant_range()
                          eat(wanted = 'quant_range')
                          get_next_token(lexed = 'brack_close')
                          quant_range(∅)
                        eat(wanted = 'question')
                        get_next_token(lexed = 'brack_close')
                        quantifier(∅)
                      with_quantifer(RESULT = Parameter)
                    parameter(RESULT = Parameter)
                  any_parameter(RESULT = Parameter)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 906, line = 26, col = 24)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 915, line = 26, col = 33)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Changes the repository folder location', pos = 917, line = 26, col = 35)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 960, line = 27, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--config', pos = 961, line = 27, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'angle_open')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'angle_open')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_open')
                    eat(eaten = 'angle_open', text = '<', pos = 970, line = 27, col = 15)
                    var_input_elems()
                      eat(wanted = 'valid_name')
                      get_next_token(lexed = 'valid_name')
                      taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                      get_next_token(returned = 'valid_name')
                      eat(eaten = 'valid_name', text = 'key', pos = 971, line = 27, col = 16)
                      eat(wanted = 'assign')
                      get_next_token(lexed = 'angle_close')
                      next_choice()
                        eat(wanted = 'choice_sep')
                        get_next_token(lexed = 'angle_close')
                        next_choice(∅)
                      var_input_elems(RESULT = VarInput)
                    eat(wanted = 'angle_close')
                    get_next_token(lexed = 'angle_close')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_close')
                    eat(eaten = 'angle_close', text = '>', pos = 974, line = 27, col = 19)
                    with_quantifer()
                      quantifier()
                        triple_dot()
                          eat(wanted = 'triple_dot')
                          get_next_token(lexed = 'angle_open')
                          triple_dot(∅)
                        quant_range()
                          eat(wanted = 'quant_range')
                          get_next_token(lexed = 'angle_open')
                          quant_range(∅)
                        eat(wanted = 'question')
                        get_next_token(lexed = 'angle_open')
                        quantifier(∅)
                      with_quantifer(RESULT = Parameter)
                    parameter(RESULT = Parameter)
                  any_parameter(RESULT = Parameter)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'angle_open')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_open')
                    eat(eaten = 'angle_open', text = '<', pos = 976, line = 27, col = 21)
                    var_input_elems()
                      eat(wanted = 'valid_name')
                      get_next_token(lexed = 'valid_name')
                      taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                      get_next_token(returned = 'valid_name')
                      eat(eaten = 'valid_name', text = 'value', pos = 977, line = 27, col = 22)
                      eat(wanted = 'assign')
                      get_next_token(lexed = 'angle_close')
                      next_choice()
                        eat(wanted = 'choice_sep')
                        get_next_token(lexed = 'angle_close')
                        next_choice(∅)
                      var_input_elems(RESULT = VarInput)
                    eat(wanted = 'angle_close')
                    get_next_token(lexed = 'angle_close')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_close')
                    eat(eaten = 'angle_close', text = '>', pos = 982, line = 27, col = 27)
                    with_quantifer()
                      quantifier()
                        triple_dot()
                          eat(wanted = 'triple_dot')
                          get_next_token(lexed = 'brack_close')
                          triple_dot(∅)
                        quant_range()
                          eat(wanted = 'quant_range')
                          get_next_token(lexed = 'brack_close')
                          quant_range(∅)
                        eat(wanted = 'question')
                        get_next_token(lexed = 'brack_close')
                        quantifier(∅)
                      with_quantifer(RESULT = Parameter)
                    parameter(RESULT = Parameter)
                  any_parameter(RESULT = Parameter)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 983, line = 27, col = 28)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'triple_dot')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'triple_dot')
                  eat(eaten = 'triple_dot', text = '...', pos = 984, line = 27, col = 29)
                  triple_dot(RESULT = Quantifier)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(RESULT = Quantifier)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 988, line = 27, col = 33)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Overrides a config key/value pair [repeatable]', pos = 990, line = 27, col = 35)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 1041, line = 28, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'short_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'short_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'short_option')
                  eat(eaten = 'short_option', text = '-v', pos = 1042, line = 28, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--verbose', pos = 1045, line = 28, col = 9)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'brack_close')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Option)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 1054, line = 28, col = 18)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 1069, line = 28, col = 33)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Enables verbose mode', pos = 1071, line = 28, col = 35)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 1096, line = 29, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--version', pos = 1097, line = 29, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'brack_close')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Option)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 1106, line = 29, col = 15)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'brack_open')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'brack_open')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'brack_open')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'brack_open')
          opt_help_text(∅)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 1112, line = 30, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--help', pos = 1113, line = 30, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'brack_close')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Option)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 1119, line = 30, col = 12)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'section_title')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'section_title')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'section_title')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'section_title')
          opt_help_text(∅)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'section_title')
      taste(ok = True, is_first = True)
      get_next_token(returned = 'section_title')
      eat(eaten = 'section_title', text = 'Command: clone ::', pos = 1122, line = 32, col = 1)
      any_section_title(RESULT = SectionTitle)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'quoted_block')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'quoted_block')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'quoted_block')
        taste(ok = True, is_first = True)
        get_next_token(returned = 'quoted_block')
        eat(eaten = 'quoted_block', text = '```\nThis will clone the repository at <src> into the folder <dst>. If <dst> is not\nprovided this will automatically use the last path component of <src> and create\nthat folder.\n```', pos = 1141, line = 34, col = 1)
        block_quote(RESULT = BlockQuote)
      section_content_elem(RESULT = BlockQuote)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'angle_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'angle_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'angle_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'angle_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            opt_spec_group(∅)
          opt_spec_elem()
            positional()
              eat(wanted = 'angle_open')
              get_next_token(lexed = 'angle_open')
              taste(ok = True, is_first = True)
              get_next_token(returned = 'angle_open')
              eat(eaten = 'angle_open', text = '<', pos = 1327, line = 40, col = 5)
              var_input_elems()
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'src', pos = 1328, line = 40, col = 6)
                eat(wanted = 'assign')
                get_next_token(lexed = 'angle_close')
                next_choice()
                  eat(wanted = 'choice_sep')
                  get_next_token(lexed = 'angle_close')
                  next_choice(∅)
                var_input_elems(RESULT = VarInput)
              eat(wanted = 'angle_close')
              get_next_token(lexed = 'angle_close')
              taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
              get_next_token(returned = 'angle_close')
              eat(eaten = 'angle_close', text = '>', pos = 1331, line = 40, col = 9)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              positional(RESULT = Positional)
            opt_spec_elem(RESULT = Positional)
          opt_spec_def(RESULT = Positional)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 1347, line = 40, col = 25)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Repository source', pos = 1349, line = 40, col = 27)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 1371, line = 41, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'angle_open')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'angle_open')
                eat(eaten = 'angle_open', text = '<', pos = 1372, line = 41, col = 6)
                var_input_elems()
                  eat(wanted = 'valid_name')
                  get_next_token(lexed = 'valid_name')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'valid_name')
                  eat(eaten = 'valid_name', text = 'dst', pos = 1373, line = 41, col = 7)
                  eat(wanted = 'assign')
                  get_next_token(lexed = 'angle_close')
                  next_choice()
                    eat(wanted = 'choice_sep')
                    get_next_token(lexed = 'angle_close')
                    next_choice(∅)
                  var_input_elems(RESULT = VarInput)
                eat(wanted = 'angle_close')
                get_next_token(lexed = 'angle_close')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'angle_close')
                eat(eaten = 'angle_close', text = '>', pos = 1376, line = 41, col = 10)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Positional)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Positional)
                positional(RESULT = Positional)
              opt_spec_elem(RESULT = Positional)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 1377, line = 41, col = 11)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 1391, line = 41, col = 25)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Directory path in which to put the cloned repo', pos = 1393, line = 41, col = 27)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 1444, line = 42, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--deep', pos = 1445, line = 42, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'brack_close')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Option)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 1451, line = 42, col = 12)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 1464, line = 42, col = 25)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Deep checkout [the default]', pos = 1466, line = 42, col = 27)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 1498, line = 43, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--shallow', pos = 1499, line = 43, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'brack_close')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Option)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 1508, line = 43, col = 15)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 1518, line = 43, col = 25)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Shallow checkout', pos = 1520, line = 43, col = 27)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 1541, line = 44, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'short_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'short_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'short_option')
                  eat(eaten = 'short_option', text = '-r', pos = 1542, line = 44, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--rev', pos = 1545, line = 44, col = 9)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'angle_open')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'angle_open')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_open')
                    eat(eaten = 'angle_open', text = '<', pos = 1551, line = 44, col = 15)
                    var_input_elems()
                      eat(wanted = 'valid_name')
                      get_next_token(lexed = 'valid_name')
                      taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                      get_next_token(returned = 'valid_name')
                      eat(eaten = 'valid_name', text = 'commit', pos = 1552, line = 44, col = 16)
                      eat(wanted = 'assign')
                      get_next_token(lexed = 'angle_close')
                      next_choice()
                        eat(wanted = 'choice_sep')
                        get_next_token(lexed = 'angle_close')
                        next_choice(∅)
                      var_input_elems(RESULT = VarInput)
                    eat(wanted = 'angle_close')
                    get_next_token(lexed = 'angle_close')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_close')
                    eat(eaten = 'angle_close', text = '>', pos = 1558, line = 44, col = 22)
                    with_quantifer()
                      quantifier()
                        triple_dot()
                          eat(wanted = 'triple_dot')
                          get_next_token(lexed = 'brack_close')
                          triple_dot(∅)
                        quant_range()
                          eat(wanted = 'quant_range')
                          get_next_token(lexed = 'brack_close')
                          quant_range(∅)
                        eat(wanted = 'question')
                        get_next_token(lexed = 'brack_close')
                        quantifier(∅)
                      with_quantifer(RESULT = Parameter)
                    parameter(RESULT = Parameter)
                  any_parameter(RESULT = Parameter)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 1559, line = 44, col = 23)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 1561, line = 44, col = 25)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Clone a specific revision instead of HEAD', pos = 1563, line = 44, col = 27)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 0)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'section_title')
      taste(ok = True, is_first = True)
      get_next_token(returned = 'section_title')
      eat(eaten = 'section_title', text = 'Command: commit ::', pos = 1606, line = 46, col = 1)
      any_section_title(RESULT = SectionTitle)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'quoted_block')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'quoted_block')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'quoted_block')
        taste(ok = True, is_first = True)
        get_next_token(returned = 'quoted_block')
        eat(eaten = 'quoted_block', text = '```\nCommits outstanding changes.\n\nCommit changes to the given files into the repository. You will need to\n"repo push" to push up your changes to other repositories.\n\nIf a list of files is omitted, all changes reported by "repo status" will be\ncommitted.\n```', pos = 1626, line = 48, col = 1)
        block_quote(RESULT = BlockQuote)
      section_content_elem(RESULT = BlockQuote)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 1889, line = 58, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'angle_open')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'angle_open')
                eat(eaten = 'angle_open', text = '<', pos = 1890, line = 58, col = 6)
                var_input_elems()
                  eat(wanted = 'valid_name')
                  get_next_token(lexed = 'valid_name')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'valid_name')
                  eat(eaten = 'valid_name', text = 'file', pos = 1891, line = 58, col = 7)
                  eat(wanted = 'assign')
                  get_next_token(lexed = 'angle_close')
                  next_choice()
                    eat(wanted = 'choice_sep')
                    get_next_token(lexed = 'angle_close')
                    next_choice(∅)
                  var_input_elems(RESULT = VarInput)
                eat(wanted = 'angle_close')
                get_next_token(lexed = 'angle_close')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'angle_close')
                eat(eaten = 'angle_close', text = '>', pos = 1895, line = 58, col = 11)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Positional)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Positional)
                positional(RESULT = Positional)
              opt_spec_elem(RESULT = Positional)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 1896, line = 58, col = 12)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'triple_dot')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'triple_dot')
                  eat(eaten = 'triple_dot', text = '...', pos = 1897, line = 58, col = 13)
                  triple_dot(RESULT = Quantifier)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(RESULT = Quantifier)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 1914, line = 58, col = 30)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'File path', pos = 1916, line = 58, col = 32)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 1930, line = 59, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'short_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'short_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'short_option')
                  eat(eaten = 'short_option', text = '-m', pos = 1931, line = 59, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--message', pos = 1934, line = 59, col = 9)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'angle_open')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'angle_open')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_open')
                    eat(eaten = 'angle_open', text = '<', pos = 1944, line = 59, col = 19)
                    var_input_elems()
                      eat(wanted = 'valid_name')
                      get_next_token(lexed = 'valid_name')
                      taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                      get_next_token(returned = 'valid_name')
                      eat(eaten = 'valid_name', text = 'text', pos = 1945, line = 59, col = 20)
                      eat(wanted = 'assign')
                      get_next_token(lexed = 'angle_close')
                      next_choice()
                        eat(wanted = 'choice_sep')
                        get_next_token(lexed = 'angle_close')
                        next_choice(∅)
                      var_input_elems(RESULT = VarInput)
                    eat(wanted = 'angle_close')
                    get_next_token(lexed = 'angle_close')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_close')
                    eat(eaten = 'angle_close', text = '>', pos = 1949, line = 59, col = 24)
                    with_quantifer()
                      quantifier()
                        triple_dot()
                          eat(wanted = 'triple_dot')
                          get_next_token(lexed = 'brack_close')
                          triple_dot(∅)
                        quant_range()
                          eat(wanted = 'quant_range')
                          get_next_token(lexed = 'brack_close')
                          quant_range(∅)
                        eat(wanted = 'question')
                        get_next_token(lexed = 'brack_close')
                        quantifier(∅)
                      with_quantifer(RESULT = Parameter)
                    parameter(RESULT = Parameter)
                  any_parameter(RESULT = Parameter)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 1950, line = 59, col = 25)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'triple_dot')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'triple_dot')
                  eat(eaten = 'triple_dot', text = '...', pos = 1951, line = 59, col = 26)
                  triple_dot(RESULT = Quantifier)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(RESULT = Quantifier)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 1955, line = 59, col = 30)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Commit message [if multiple, joined by newline]', pos = 1957, line = 59, col = 32)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 0)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'section_title')
      taste(ok = True, is_first = True)
      get_next_token(returned = 'section_title')
      eat(eaten = 'section_title', text = 'Command: copy ::', pos = 2006, line = 61, col = 1)
      any_section_title(RESULT = SectionTitle)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'quoted_block')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'quoted_block')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'quoted_block')
        taste(ok = True, is_first = True)
        get_next_token(returned = 'quoted_block')
        eat(eaten = 'quoted_block', text = '```\nCopies one or multiple files to a new location. This copies all files from\n<src> to <dst>.\n```', pos = 2024, line = 63, col = 1)
        block_quote(RESULT = BlockQuote)
      section_content_elem(RESULT = BlockQuote)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 2128, line = 68, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'angle_open')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'angle_open')
                eat(eaten = 'angle_open', text = '<', pos = 2129, line = 68, col = 6)
                var_input_elems()
                  eat(wanted = 'valid_name')
                  get_next_token(lexed = 'valid_name')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'valid_name')
                  eat(eaten = 'valid_name', text = 'src', pos = 2130, line = 68, col = 7)
                  eat(wanted = 'assign')
                  get_next_token(lexed = 'angle_close')
                  next_choice()
                    eat(wanted = 'choice_sep')
                    get_next_token(lexed = 'angle_close')
                    next_choice(∅)
                  var_input_elems(RESULT = VarInput)
                eat(wanted = 'angle_close')
                get_next_token(lexed = 'angle_close')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'angle_close')
                eat(eaten = 'angle_close', text = '>', pos = 2133, line = 68, col = 10)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Positional)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Positional)
                positional(RESULT = Positional)
              opt_spec_elem(RESULT = Positional)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 2134, line = 68, col = 11)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'triple_dot')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'triple_dot')
                  eat(eaten = 'triple_dot', text = '...', pos = 2135, line = 68, col = 12)
                  triple_dot(RESULT = Quantifier)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(RESULT = Quantifier)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 2139, line = 68, col = 16)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'File path', pos = 2141, line = 68, col = 18)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'angle_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'angle_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'angle_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'angle_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            opt_spec_group(∅)
          opt_spec_elem()
            positional()
              eat(wanted = 'angle_open')
              get_next_token(lexed = 'angle_open')
              taste(ok = True, is_first = True)
              get_next_token(returned = 'angle_open')
              eat(eaten = 'angle_open', text = '<', pos = 2155, line = 69, col = 5)
              var_input_elems()
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'dst', pos = 2156, line = 69, col = 6)
                eat(wanted = 'assign')
                get_next_token(lexed = 'angle_close')
                next_choice()
                  eat(wanted = 'choice_sep')
                  get_next_token(lexed = 'angle_close')
                  next_choice(∅)
                var_input_elems(RESULT = VarInput)
              eat(wanted = 'angle_close')
              get_next_token(lexed = 'angle_close')
              taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
              get_next_token(returned = 'angle_close')
              eat(eaten = 'angle_close', text = '>', pos = 2159, line = 69, col = 9)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  eat(wanted = 'question')
                  get_next_token(lexed = 'opt_spec_sep')
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              positional(RESULT = Positional)
            opt_spec_elem(RESULT = Positional)
          opt_spec_def(RESULT = Positional)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 2166, line = 69, col = 16)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Directory path of destination', pos = 2168, line = 69, col = 18)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 2202, line = 70, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--force', pos = 2203, line = 70, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'brack_close')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Option)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 2210, line = 70, col = 13)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 2213, line = 70, col = 16)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Forcibly copy over an existing file', pos = 2215, line = 70, col = 18)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 0)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'section_title')
      taste(ok = True, is_first = True)
      get_next_token(returned = 'section_title')
      eat(eaten = 'section_title', text = 'Command: delete ::', pos = 2252, line = 72, col = 1)
      any_section_title(RESULT = SectionTitle)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'quoted_block')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'quoted_block')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'quoted_block')
        taste(ok = True, is_first = True)
        get_next_token(returned = 'quoted_block')
        eat(eaten = 'quoted_block', text = '```\nDeletes a repository.\n\nThis will throw away the current repository.\n```', pos = 2272, line = 74, col = 1)
        block_quote(RESULT = BlockQuote)
      section_content_elem(RESULT = BlockQuote)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 2353, line = 80, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--yes', pos = 2354, line = 80, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'brack_close')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(∅)
                  with_quantifer(RESULT = Option)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 2359, line = 80, col = 11)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 2361, line = 80, col = 13)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Confirm the action without prompting', pos = 2363, line = 80, col = 15)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 0)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'section_title')
      taste(ok = True, is_first = True)
      get_next_token(returned = 'section_title')
      eat(eaten = 'section_title', text = 'Command: setuser ::', pos = 2401, line = 82, col = 1)
      any_section_title(RESULT = SectionTitle)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'quoted_block')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'quoted_block')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'quoted_block')
        taste(ok = True, is_first = True)
        get_next_token(returned = 'quoted_block')
        eat(eaten = 'quoted_block', text = '```\nSets the user credentials.\n\nThis will override the current user config.\n```', pos = 2422, line = 84, col = 1)
        block_quote(RESULT = BlockQuote)
      section_content_elem(RESULT = BlockQuote)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 2507, line = 90, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--username', pos = 2508, line = 90, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'angle_open')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'angle_open')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_open')
                    eat(eaten = 'angle_open', text = '<', pos = 2519, line = 90, col = 17)
                    var_input_elems()
                      eat(wanted = 'valid_name')
                      get_next_token(lexed = 'valid_name')
                      taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                      get_next_token(returned = 'valid_name')
                      eat(eaten = 'valid_name', text = 'user', pos = 2520, line = 90, col = 18)
                      eat(wanted = 'assign')
                      get_next_token(lexed = 'angle_close')
                      next_choice()
                        eat(wanted = 'choice_sep')
                        get_next_token(lexed = 'angle_close')
                        next_choice(∅)
                      var_input_elems(RESULT = VarInput)
                    eat(wanted = 'angle_close')
                    get_next_token(lexed = 'angle_close')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_close')
                    eat(eaten = 'angle_close', text = '>', pos = 2524, line = 90, col = 22)
                    with_quantifer()
                      quantifier()
                        triple_dot()
                          eat(wanted = 'triple_dot')
                          get_next_token(lexed = 'brack_close')
                          triple_dot(∅)
                        quant_range()
                          eat(wanted = 'quant_range')
                          get_next_token(lexed = 'brack_close')
                          quant_range(∅)
                        eat(wanted = 'question')
                        get_next_token(lexed = 'brack_close')
                        quantifier(∅)
                      with_quantifer(RESULT = Parameter)
                    parameter(RESULT = Parameter)
                  any_parameter(RESULT = Parameter)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 2525, line = 90, col = 23)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 2527, line = 90, col = 25)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Username', pos = 2529, line = 90, col = 27)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 2542, line = 91, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--email', pos = 2543, line = 91, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'angle_open')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'angle_open')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_open')
                    eat(eaten = 'angle_open', text = '<', pos = 2551, line = 91, col = 14)
                    var_input_elems()
                      eat(wanted = 'valid_name')
                      get_next_token(lexed = 'valid_name')
                      taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                      get_next_token(returned = 'valid_name')
                      eat(eaten = 'valid_name', text = 'address', pos = 2552, line = 91, col = 15)
                      eat(wanted = 'assign')
                      get_next_token(lexed = 'angle_close')
                      next_choice()
                        eat(wanted = 'choice_sep')
                        get_next_token(lexed = 'angle_close')
                        next_choice(∅)
                      var_input_elems(RESULT = VarInput)
                    eat(wanted = 'angle_close')
                    get_next_token(lexed = 'angle_close')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_close')
                    eat(eaten = 'angle_close', text = '>', pos = 2559, line = 91, col = 22)
                    with_quantifer()
                      quantifier()
                        triple_dot()
                          eat(wanted = 'triple_dot')
                          get_next_token(lexed = 'brack_close')
                          triple_dot(∅)
                        quant_range()
                          eat(wanted = 'quant_range')
                          get_next_token(lexed = 'brack_close')
                          quant_range(∅)
                        eat(wanted = 'question')
                        get_next_token(lexed = 'brack_close')
                        quantifier(∅)
                      with_quantifer(RESULT = Parameter)
                    parameter(RESULT = Parameter)
                  any_parameter(RESULT = Parameter)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 2560, line = 91, col = 23)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 2562, line = 91, col = 25)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Email address', pos = 2564, line = 91, col = 27)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 4, tok_indent = 4)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 2582, line = 92, col = 5)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'long_option')
                with_quantifer()
                  with_quantifer(∅)
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--password', pos = 2583, line = 92, col = 6)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'angle_open')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'angle_open')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_open')
                    eat(eaten = 'angle_open', text = '<', pos = 2594, line = 92, col = 17)
                    var_input_elems()
                      eat(wanted = 'valid_name')
                      get_next_token(lexed = 'valid_name')
                      taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                      get_next_token(returned = 'valid_name')
                      eat(eaten = 'valid_name', text = 'pw', pos = 2595, line = 92, col = 18)
                      eat(wanted = 'assign')
                      get_next_token(lexed = 'angle_close')
                      next_choice()
                        eat(wanted = 'choice_sep')
                        get_next_token(lexed = 'angle_close')
                        next_choice(∅)
                      var_input_elems(RESULT = VarInput)
                    eat(wanted = 'angle_close')
                    get_next_token(lexed = 'angle_close')
                    taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
                    get_next_token(returned = 'angle_close')
                    eat(eaten = 'angle_close', text = '>', pos = 2597, line = 92, col = 20)
                    with_quantifer()
                      quantifier()
                        triple_dot()
                          eat(wanted = 'triple_dot')
                          get_next_token(lexed = 'brack_close')
                          triple_dot(∅)
                        quant_range()
                          eat(wanted = 'quant_range')
                          get_next_token(lexed = 'brack_close')
                          quant_range(∅)
                        eat(wanted = 'question')
                        get_next_token(lexed = 'brack_close')
                        quantifier(∅)
                      with_quantifer(RESULT = Parameter)
                    parameter(RESULT = Parameter)
                  any_parameter(RESULT = Parameter)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 2598, line = 92, col = 21)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                eat(wanted = 'question')
                get_next_token(lexed = 'opt_spec_sep')
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 2602, line = 92, col = 25)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 4, tok_indent = 4)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Login password', pos = 2604, line = 92, col = 27)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        heading(∅)
      block_quote()
        eat(wanted = 'quoted_block')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            with_quantifer()
              with_quantifer(∅)
            opt_spec_group(∅)
          opt_spec_elem()
            positional()
              eat(wanted = 'angle_open')
              with_quantifer()
                with_quantifer(∅)
              with_quantifer()
                with_quantifer(∅)
              positional(∅)
            aliases_and_option()
              bare_option()
                eat(wanted = 'long_option|short_option')
                bare_option(∅)
              aliases_and_option(∅)
            opt_spec_elem(∅)
          opt_spec_def(∅)
        opt_spec(∅)
      section_content_elem(∅)
    collect_section_elems(RESULT = SectionElems)
  parse(RESULT = SpecAST)


# GRAMMAR
SpecAST(
    Variant(
        name = 'general'
        is_partial = True
        Group(
            name = 'general-options'
            quantifier = None
            required = True
            Group(
                name = None
                quantifier = None
                required = False
                Option(
                    name = 'repo-home'
                    quantifier = None
                    aliases = []
            Group(
                name = None
                quantifier = Quantifier(m=1, n=None, greedy=True)
                required = False
                Option(
                    name = 'config'
                    quantifier = None
                    aliases = []
            Group(
                name = None
                quantifier = None
                required = False
                Option(
                    name = 'verbose'
                    quantifier = None
                    aliases = []
    Variant(
        name = 'clone'
        is_partial = False
        PartialUsage(
            name = 'general'
        Positional(
            name = 'command'
            quantifier = None
            Choice(
                text = 'clone'
        Positional(
            name = 'src'
            quantifier = None
        Group(
            name = None
            quantifier = None
            required = False
            Positional(
                name = 'dst'
                quantifier = None
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'shallow'
                quantifier = None
                aliases = []
            ChoiceSep(
            Option(
                name = 'deep'
                quantifier = None
                aliases = []
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'rev'
                quantifier = None
                aliases = []
    Variant(
        name = 'commit'
        is_partial = False
        PartialUsage(
            name = 'general'
        Positional(
            name = 'command'
            quantifier = None
            Choice(
                text = 'commit'
        Group(
            name = None
            quantifier = Quantifier(m=1, n=None, greedy=True)
            required = False
            Positional(
                name = 'file'
                quantifier = None
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'message'
                quantifier = None
                aliases = []
    Variant(
        name = 'copy'
        is_partial = False
        PartialUsage(
            name = 'general'
        Positional(
            name = 'command'
            quantifier = None
            Choice(
                text = 'copy'
        Group(
            name = None
            quantifier = Quantifier(m=1, n=None, greedy=True)
            required = False
            Positional(
                name = 'src'
                quantifier = None
        Positional(
            name = 'dst'
            quantifier = None
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'force'
                quantifier = None
                aliases = []
    Variant(
        name = 'delete'
        is_partial = False
        PartialUsage(
            name = 'general'
        Positional(
            name = 'command'
            quantifier = None
            Choice(
                text = 'delete'
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'yes'
                quantifier = None
                aliases = []
    Variant(
        name = 'setuser'
        is_partial = False
        PartialUsage(
            name = 'general'
        Positional(
            name = 'command'
            quantifier = None
            Choice(
                text = 'setuser'
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'username'
                quantifier = None
                aliases = []
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'email'
                quantifier = None
                aliases = []
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'password'
                quantifier = None
                aliases = []
    BlockQuote(
        text = '\nRepo is a command line tool that showcases how to build complex command line\ninterfaces with Argle.\n\nThis tool is supposed to look like a distributed version control system to\nshow how something like this can be structured.\n'
        token = Token(kind='quoted_block', text='```\nRepo is a command line tool that showcases how to build complex command line\ninterfaces with Argle.\n\nThis tool is supposed to look like a distributed version control system to\nshow how something like this can be structured.\n```', pos=388, line=10, col=1, indent=0, is_first=True)
    SectionTitle(
        scope = None
        title = 'Commands :'
        token = Token(kind='section_title', text='Commands :::', pos=621, line=18, col=1, indent=0, is_first=True)
    OptSpec(
        scope = None
        text = 'Clones a repository'
        token = Token(kind='angle_open', text='<', pos=638, line=19, col=5, indent=4, is_first=True)
        Positional(
            name = 'command'
            quantifier = None
            Choice(
                text = 'clone'
    OptSpec(
        scope = None
        text = 'Commits outstanding changes'
        token = Token(kind='angle_open', text='<', pos=682, line=20, col=5, indent=4, is_first=True)
        Positional(
            name = 'command'
            quantifier = None
            Choice(
                text = 'commit'
    OptSpec(
        scope = None
        text = 'Copies files'
        token = Token(kind='angle_open', text='<', pos=734, line=21, col=5, indent=4, is_first=True)
        Positional(
            name = 'command'
            quantifier = None
            Choice(
                text = 'copy'
    OptSpec(
        scope = None
        text = 'Deletes a repository'
        token = Token(kind='angle_open', text='<', pos=771, line=22, col=5, indent=4, is_first=True)
        Positional(
            name = 'command'
            quantifier = None
            Choice(
                text = 'delete'
    OptSpec(
        scope = None
        text = 'Sets the user credentials'
        token = Token(kind='angle_open', text='<', pos=816, line=23, col=5, indent=4, is_first=True)
        Positional(
            name = 'command'
            quantifier = None
            Choice(
                text = 'setuser'
    SectionTitle(
        scope = None
        title = 'General options :'
        token = Token(kind='section_title', text='General options :::', pos=863, line=25, col=1, indent=0, is_first=True)
    OptSpec(
        scope = None
        text = 'Changes the repository folder location'
        token = Token(kind='brack_open', text='[', pos=887, line=26, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'repo-home'
                quantifier = None
                aliases = []
                Parameter(
                    name = 'path'
                    quantifier = None
    OptSpec(
        scope = None
        text = 'Overrides a config key/value pair [repeatable]'
        token = Token(kind='brack_open', text='[', pos=960, line=27, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = Quantifier(m=1, n=None, greedy=True)
            required = False
            Option(
                name = 'config'
                quantifier = None
                aliases = []
                Parameter(
                    name = 'key'
                    quantifier = None
                Parameter(
                    name = 'value'
                    quantifier = None
    OptSpec(
        scope = None
        text = 'Enables verbose mode'
        token = Token(kind='brack_open', text='[', pos=1041, line=28, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'verbose'
                quantifier = None
                aliases = [BareOption(name='v')]
    OptSpec(
        scope = None
        text = None
        token = Token(kind='brack_open', text='[', pos=1096, line=29, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'version'
                quantifier = None
                aliases = []
    OptSpec(
        scope = None
        text = None
        token = Token(kind='brack_open', text='[', pos=1112, line=30, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'help'
                quantifier = None
                aliases = []
    SectionTitle(
        scope = None
        title = 'Command: clone '
        token = Token(kind='section_title', text='Command: clone ::', pos=1122, line=32, col=1, indent=0, is_first=True)
    BlockQuote(
        text = '\nThis will clone the repository at <src> into the folder <dst>. If <dst> is not\nprovided this will automatically use the last path component of <src> and create\nthat folder.\n'
        token = Token(kind='quoted_block', text='```\nThis will clone the repository at <src> into the folder <dst>. If <dst> is not\nprovided this will automatically use the last path component of <src> and create\nthat folder.\n```', pos=1141, line=34, col=1, indent=0, is_first=True)
    OptSpec(
        scope = None
        text = 'Repository source'
        token = Token(kind='angle_open', text='<', pos=1327, line=40, col=5, indent=4, is_first=True)
        Positional(
            name = 'src'
            quantifier = None
    OptSpec(
        scope = None
        text = 'Directory path in which to put the cloned repo'
        token = Token(kind='brack_open', text='[', pos=1371, line=41, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = None
            required = False
            Positional(
                name = 'dst'
                quantifier = None
    OptSpec(
        scope = None
        text = 'Deep checkout [the default]'
        token = Token(kind='brack_open', text='[', pos=1444, line=42, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'deep'
                quantifier = None
                aliases = []
    OptSpec(
        scope = None
        text = 'Shallow checkout'
        token = Token(kind='brack_open', text='[', pos=1498, line=43, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'shallow'
                quantifier = None
                aliases = []
    OptSpec(
        scope = None
        text = 'Clone a specific revision instead of HEAD'
        token = Token(kind='brack_open', text='[', pos=1541, line=44, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'rev'
                quantifier = None
                aliases = [BareOption(name='r')]
                Parameter(
                    name = 'commit'
                    quantifier = None
    SectionTitle(
        scope = None
        title = 'Command: commit '
        token = Token(kind='section_title', text='Command: commit ::', pos=1606, line=46, col=1, indent=0, is_first=True)
    BlockQuote(
        text = '\nCommits outstanding changes.\n\nCommit changes to the given files into the repository. You will need to\n"repo push" to push up your changes to other repositories.\n\nIf a list of files is omitted, all changes reported by "repo status" will be\ncommitted.\n'
        token = Token(kind='quoted_block', text='```\nCommits outstanding changes.\n\nCommit changes to the given files into the repository. You will need to\n"repo push" to push up your changes to other repositories.\n\nIf a list of files is omitted, all changes reported by "repo status" will be\ncommitted.\n```', pos=1626, line=48, col=1, indent=0, is_first=True)
    OptSpec(
        scope = None
        text = 'File path'
        token = Token(kind='brack_open', text='[', pos=1889, line=58, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = Quantifier(m=1, n=None, greedy=True)
            required = False
            Positional(
                name = 'file'
                quantifier = None
    OptSpec(
        scope = None
        text = 'Commit message [if multiple, joined by newline]'
        token = Token(kind='brack_open', text='[', pos=1930, line=59, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = Quantifier(m=1, n=None, greedy=True)
            required = False
            Option(
                name = 'message'
                quantifier = None
                aliases = [BareOption(name='m')]
                Parameter(
                    name = 'text'
                    quantifier = None
    SectionTitle(
        scope = None
        title = 'Command: copy '
        token = Token(kind='section_title', text='Command: copy ::', pos=2006, line=61, col=1, indent=0, is_first=True)
    BlockQuote(
        text = '\nCopies one or multiple files to a new location. This copies all files from\n<src> to <dst>.\n'
        token = Token(kind='quoted_block', text='```\nCopies one or multiple files to a new location. This copies all files from\n<src> to <dst>.\n```', pos=2024, line=63, col=1, indent=0, is_first=True)
    OptSpec(
        scope = None
        text = 'File path'
        token = Token(kind='brack_open', text='[', pos=2128, line=68, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = Quantifier(m=1, n=None, greedy=True)
            required = False
            Positional(
                name = 'src'
                quantifier = None
    OptSpec(
        scope = None
        text = 'Directory path of destination'
        token = Token(kind='angle_open', text='<', pos=2155, line=69, col=5, indent=4, is_first=True)
        Positional(
            name = 'dst'
            quantifier = None
    OptSpec(
        scope = None
        text = 'Forcibly copy over an existing file'
        token = Token(kind='brack_open', text='[', pos=2202, line=70, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'force'
                quantifier = None
                aliases = []
    SectionTitle(
        scope = None
        title = 'Command: delete '
        token = Token(kind='section_title', text='Command: delete ::', pos=2252, line=72, col=1, indent=0, is_first=True)
    BlockQuote(
        text = '\nDeletes a repository.\n\nThis will throw away the current repository.\n'
        token = Token(kind='quoted_block', text='```\nDeletes a repository.\n\nThis will throw away the current repository.\n```', pos=2272, line=74, col=1, indent=0, is_first=True)
    OptSpec(
        scope = None
        text = 'Confirm the action without prompting'
        token = Token(kind='brack_open', text='[', pos=2353, line=80, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'yes'
                quantifier = None
                aliases = []
    SectionTitle(
        scope = None
        title = 'Command: setuser '
        token = Token(kind='section_title', text='Command: setuser ::', pos=2401, line=82, col=1, indent=0, is_first=True)
    BlockQuote(
        text = '\nSets the user credentials.\n\nThis will override the current user config.\n'
        token = Token(kind='quoted_block', text='```\nSets the user credentials.\n\nThis will override the current user config.\n```', pos=2422, line=84, col=1, indent=0, is_first=True)
    OptSpec(
        scope = None
        text = 'Username'
        token = Token(kind='brack_open', text='[', pos=2507, line=90, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'username'
                quantifier = None
                aliases = []
                Parameter(
                    name = 'user'
                    quantifier = None
    OptSpec(
        scope = None
        text = 'Email address'
        token = Token(kind='brack_open', text='[', pos=2542, line=91, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'email'
                quantifier = None
                aliases = []
                Parameter(
                    name = 'address'
                    quantifier = None
    OptSpec(
        scope = None
        text = 'Login password'
        token = Token(kind='brack_open', text='[', pos=2582, line=92, col=5, indent=4, is_first=True)
        Group(
            name = None
            quantifier = None
            required = False
            Option(
                name = 'password'
                quantifier = None
                aliases = []
                Parameter(
                    name = 'pw'
                    quantifier = None
