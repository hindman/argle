
# SPEC
<rgx> : Python regular expression
[<path>...] : Path(s) to input
[-i --ignore-case] : Ignore case
[-v --invert-match] : Select non-matching lines



# PARSER_DEBUG

parse()
  variant()
    eat(wanted = 'variant_def')
    get_next_token(lexed = 'angle_open')
    variant_elems()
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'angle_open')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'angle_open')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'angle_open')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'angle_open')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'angle_open')
        taste(ok = True, is_first = True)
        get_next_token(returned = 'angle_open')
        eat(eaten = 'angle_open', text = '<', pos = 0, line = 1, col = 1)
        var_input_elems()
          eat(wanted = 'valid_name')
          get_next_token(lexed = 'valid_name')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'valid_name')
          eat(eaten = 'valid_name', text = 'rgx', pos = 1, line = 1, col = 2)
          eat(wanted = 'assign')
          get_next_token(lexed = 'angle_close')
          next_choice()
            eat(wanted = 'choice_sep')
            get_next_token(lexed = 'angle_close')
            next_choice(∅)
          var_input_elems(RESULT = VarInput)
        eat(wanted = 'angle_close')
        get_next_token(lexed = 'angle_close')
        taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
        get_next_token(returned = 'angle_close')
        eat(eaten = 'angle_close', text = '>', pos = 4, line = 1, col = 5)
        with_quantifer()
          quantifier()
            triple_dot()
              eat(wanted = 'triple_dot')
              get_next_token(lexed = 'opt_spec_sep')
              triple_dot(∅)
            quant_range()
              eat(wanted = 'quant_range')
              get_next_token(lexed = 'opt_spec_sep')
              quant_range(∅)
            quantifier(∅)
          with_quantifer(RESULT = Positional)
        positional(RESULT = Positional)
      literal()
        eat(wanted = 'backquote1')
        get_next_token(lexed = 'opt_spec_sep')
        literal(∅)
      choice_sep()
        eat(wanted = 'choice_sep')
        get_next_token(lexed = 'opt_spec_sep')
        choice_sep(∅)
      partial_usage()
        eat(wanted = 'partial_usage')
        get_next_token(lexed = 'opt_spec_sep')
        partial_usage(∅)
      any_group()
        eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
        get_next_token(lexed = 'opt_spec_sep')
        with_quantifer()
          with_quantifer(∅)
        any_group(∅)
      positional()
        eat(wanted = 'angle_open')
        get_next_token(lexed = 'opt_spec_sep')
        with_quantifer()
          with_quantifer(∅)
        positional(∅)
      option()
        bare_option()
          eat(wanted = 'long_option|short_option')
          get_next_token(lexed = 'opt_spec_sep')
          bare_option(∅)
        option(∅)
      variant_elems(RESULT = VariantElems)
    variant(∅)
  collect_section_elems()
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'angle_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'angle_open')
        heading(∅)
      block_quote()
        eat(wanted = 'backquote3_no_wrap|backquote3_comment|backquote3')
        get_next_token(lexed = 'angle_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'angle_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'angle_open')
            with_quantifer()
              with_quantifer(∅)
            opt_spec_group(∅)
          opt_spec_elem()
            positional()
              eat(wanted = 'angle_open')
              get_next_token(lexed = 'angle_open')
              taste(ok = True, is_first = True)
              get_next_token(returned = 'angle_open')
              eat(eaten = 'angle_open', text = '<', pos = 0, line = 1, col = 1)
              var_input_elems()
                eat(wanted = 'valid_name')
                get_next_token(lexed = 'valid_name')
                taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                get_next_token(returned = 'valid_name')
                eat(eaten = 'valid_name', text = 'rgx', pos = 1, line = 1, col = 2)
                eat(wanted = 'assign')
                get_next_token(lexed = 'angle_close')
                next_choice()
                  eat(wanted = 'choice_sep')
                  get_next_token(lexed = 'angle_close')
                  next_choice(∅)
                var_input_elems(RESULT = VarInput)
              eat(wanted = 'angle_close')
              get_next_token(lexed = 'angle_close')
              taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
              get_next_token(returned = 'angle_close')
              eat(eaten = 'angle_close', text = '>', pos = 4, line = 1, col = 5)
              with_quantifer()
                quantifier()
                  triple_dot()
                    eat(wanted = 'triple_dot')
                    get_next_token(lexed = 'opt_spec_sep')
                    triple_dot(∅)
                  quant_range()
                    eat(wanted = 'quant_range')
                    get_next_token(lexed = 'opt_spec_sep')
                    quant_range(∅)
                  quantifier(∅)
                with_quantifer(RESULT = Positional)
              positional(RESULT = Positional)
            opt_spec_elem(RESULT = Positional)
          opt_spec_def(RESULT = Positional)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 6, line = 1, col = 7)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Python regular expression', pos = 8, line = 1, col = 9)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 0, tok_indent = 0)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'backquote3_no_wrap|backquote3_comment|backquote3')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 34, line = 2, col = 1)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'angle_open')
                taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                get_next_token(returned = 'angle_open')
                eat(eaten = 'angle_open', text = '<', pos = 35, line = 2, col = 2)
                var_input_elems()
                  eat(wanted = 'valid_name')
                  get_next_token(lexed = 'valid_name')
                  taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                  get_next_token(returned = 'valid_name')
                  eat(eaten = 'valid_name', text = 'path', pos = 36, line = 2, col = 3)
                  eat(wanted = 'assign')
                  get_next_token(lexed = 'angle_close')
                  next_choice()
                    eat(wanted = 'choice_sep')
                    get_next_token(lexed = 'angle_close')
                    next_choice(∅)
                  var_input_elems(RESULT = VarInput)
                eat(wanted = 'angle_close')
                get_next_token(lexed = 'angle_close')
                taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                get_next_token(returned = 'angle_close')
                eat(eaten = 'angle_close', text = '>', pos = 40, line = 2, col = 7)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'triple_dot')
                      taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                      get_next_token(returned = 'triple_dot')
                      eat(eaten = 'triple_dot', text = '...', pos = 41, line = 2, col = 8)
                      triple_dot(RESULT = Quantifier)
                    eat(wanted = 'question')
                    get_next_token(lexed = 'brack_close')
                    quantifier(RESULT = Quantifier)
                  with_quantifer(RESULT = Positional)
                positional(RESULT = Positional)
              opt_spec_elem(RESULT = Positional)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 44, line = 2, col = 11)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 46, line = 2, col = 13)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Path(s) to input', pos = 48, line = 2, col = 15)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 0, tok_indent = 0)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'backquote3_no_wrap|backquote3_comment|backquote3')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 65, line = 3, col = 1)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'short_option')
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'short_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                  get_next_token(returned = 'short_option')
                  eat(eaten = 'short_option', text = '-i', pos = 66, line = 3, col = 2)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--ignore-case', pos = 69, line = 3, col = 5)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'brack_close')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    quantifier(∅)
                  with_quantifer(RESULT = Option)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 82, line = 3, col = 18)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 84, line = 3, col = 20)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Ignore case', pos = 86, line = 3, col = 22)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = False, indent_reason = False, self_indent = 0, tok_indent = 0)
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      get_next_token(lexed = 'brack_open')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        get_next_token(lexed = 'brack_open')
        heading(∅)
      block_quote()
        eat(wanted = 'backquote3_no_wrap|backquote3_comment|backquote3')
        get_next_token(lexed = 'brack_open')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          get_next_token(lexed = 'brack_open')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            get_next_token(lexed = 'brack_open')
            taste(ok = True, is_first = True)
            get_next_token(returned = 'brack_open')
            eat(eaten = 'brack_open', text = '[', pos = 98, line = 4, col = 1)
            opt_spec_elem()
              positional()
                eat(wanted = 'angle_open')
                get_next_token(lexed = 'short_option')
                with_quantifer()
                  with_quantifer(∅)
                positional(∅)
              aliases_and_option()
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'short_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                  get_next_token(returned = 'short_option')
                  eat(eaten = 'short_option', text = '-v', pos = 99, line = 4, col = 2)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'long_option')
                  taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
                  get_next_token(returned = 'long_option')
                  eat(eaten = 'long_option', text = '--invert-match', pos = 102, line = 4, col = 5)
                  bare_option(RESULT = BareOption)
                bare_option()
                  eat(wanted = 'long_option|short_option')
                  get_next_token(lexed = 'brack_close')
                  bare_option(∅)
                any_parameter()
                  parameter()
                    eat(wanted = 'angle_open')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter(∅)
                  parameter_group()
                    eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
                    get_next_token(lexed = 'brack_close')
                    with_quantifer()
                      with_quantifer(∅)
                    parameter_group(∅)
                  any_parameter(∅)
                with_quantifer()
                  quantifier()
                    triple_dot()
                      eat(wanted = 'triple_dot')
                      get_next_token(lexed = 'brack_close')
                      triple_dot(∅)
                    quant_range()
                      eat(wanted = 'quant_range')
                      get_next_token(lexed = 'brack_close')
                      quant_range(∅)
                    quantifier(∅)
                  with_quantifer(RESULT = Option)
                aliases_and_option(RESULT = Option)
              opt_spec_elem(RESULT = Option)
            eat(wanted = 'brack_close')
            get_next_token(lexed = 'brack_close')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'brack_close')
            eat(eaten = 'brack_close', text = ']', pos = 116, line = 4, col = 19)
            with_quantifer()
              quantifier()
                triple_dot()
                  eat(wanted = 'triple_dot')
                  get_next_token(lexed = 'opt_spec_sep')
                  triple_dot(∅)
                quant_range()
                  eat(wanted = 'quant_range')
                  get_next_token(lexed = 'opt_spec_sep')
                  quant_range(∅)
                quantifier(∅)
              with_quantifer(RESULT = Group)
            opt_spec_group(RESULT = Group)
          opt_spec_def(RESULT = Group)
        opt_help_text()
          eat(wanted = 'opt_spec_sep')
          get_next_token(lexed = 'opt_spec_sep')
          taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
          get_next_token(returned = 'opt_spec_sep')
          eat(eaten = 'opt_spec_sep', text = ':', pos = 118, line = 4, col = 21)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            get_next_token(lexed = 'rest_of_line')
            taste(ok = True, indent_reason = 'line', self_indent = 0, tok_indent = 0)
            get_next_token(returned = 'rest_of_line')
            eat(eaten = 'rest_of_line', text = 'Select non-matching lines', pos = 120, line = 4, col = 23)
            rest_of_line(RESULT = RestOfLine)
          rest_of_line()
            eat(wanted = 'rest_of_line')
            rest_of_line(∅)
          opt_help_text(RESULT = OptHelpText)
        opt_spec(RESULT = OptSpec)
      section_content_elem(RESULT = OptSpec)
    any_section_title()
      eat(wanted = 'scoped_section_title|section_title')
      any_section_title(∅)
    section_content_elem()
      heading()
        eat(wanted = 'heading')
        heading(∅)
      block_quote()
        eat(wanted = 'backquote3_no_wrap|backquote3_comment|backquote3')
        block_quote(∅)
      opt_spec()
        opt_spec_scope()
          eat(wanted = 'opt_spec_scope|opt_spec_scope_empty')
          opt_spec_scope(∅)
        opt_spec_def()
          opt_spec_group()
            eat(wanted = 'paren_open|paren_open_named|brack_open|brack_open_named')
            with_quantifer()
              with_quantifer(∅)
            opt_spec_group(∅)
          opt_spec_elem()
            positional()
              eat(wanted = 'angle_open')
              with_quantifer()
                with_quantifer(∅)
              positional(∅)
            aliases_and_option()
              bare_option()
                eat(wanted = 'long_option|short_option')
                bare_option(∅)
              aliases_and_option(∅)
            opt_spec_elem(∅)
          opt_spec_def(∅)
        opt_spec(∅)
      section_content_elem(∅)
    collect_section_elems(RESULT = SectionElems)
  parse(RESULT = SpecAST)


# GRAMMAR
SpecAST(
    elems = [
        OptSpec(
            scope = None,
            text = 'Python regular expression',
            token = Token(kind='angle_open', text='<', pos=0, line=1, col=1, indent=0, is_first=True),
            opt = Positional(
                name = 'rgx',
                quantifier = None,
                elems = [
                ],
            ),
        ),
        OptSpec(
            scope = None,
            text = 'Path(s) to input',
            token = Token(kind='brack_open', text='[', pos=34, line=2, col=1, indent=0, is_first=True),
            opt = Group(
                name = None,
                quantifier = None,
                required = False,
                elems = [
                    Positional(
                        name = 'path',
                        quantifier = Quantifier(m=1, n=None, required=True, greedy=True),
                        elems = [
                        ],
                    ),
                ],
            ),
        ),
        OptSpec(
            scope = None,
            text = 'Ignore case',
            token = Token(kind='brack_open', text='[', pos=65, line=3, col=1, indent=0, is_first=True),
            opt = Group(
                name = None,
                quantifier = None,
                required = False,
                elems = [
                    Option(
                        name = 'ignore-case',
                        quantifier = None,
                        aliases = [BareOption(name='i')],
                        elems = [
                        ],
                    ),
                ],
            ),
        ),
        OptSpec(
            scope = None,
            text = 'Select non-matching lines',
            token = Token(kind='brack_open', text='[', pos=98, line=4, col=1, indent=0, is_first=True),
            opt = Group(
                name = None,
                quantifier = None,
                required = False,
                elems = [
                    Option(
                        name = 'invert-match',
                        quantifier = None,
                        aliases = [BareOption(name='v')],
                        elems = [
                        ],
                    ),
                ],
            ),
        ),
    ],
),
