--------------------------------------------------------------------------------
optopus-notes: Content, tasks, and development notes
--------------------------------------------------------------------------------

--------
toc: Table of contents
--------

    optopus-notes | Content, tasks, and development notes

        toc       | Table of contents
        todos     | TODOs
        new-notes | New notes
        road-map  | Road map
        dev-notes | Dev notes

    specification | Specification

        spec-syntax            | Spec syntax
        syntax-examples        | Syntax examples
        terminology            | Terminology
        classes-and-attributes | Classes and attributes

    discussion | Discussion

        api-vs-text                   | API-driven vs text-driven
        other-lib-weaknesses          | Addressing weaknesses common in other libraries
        other-goals                   | Other goals
        standard-cli-grammar          | Standard command-line grammar
        cli-grammar-vs-regex          | Command-line grammar vs. regex
        subparsers-not-needed         | Optopus does not need the subparser concept
        opt-action-not-needed         | Optopus does not need the action concept
        explicit-var-input-syntax     | Why explicit syntax is needed for variable inputs
        variable-input-spec           | Spec for variable input
        groups-can-be-parameters      | Options can have Groups as parameters
        opt-and-optarg-configuration  | Configuration of Opt and OptArg
        help-related-options          | High-related options, and high precedence
        help-text-formatting          | Help text formatting
        spec-parsing-general-approach | Spec parsing: general approach
        arg-parsing-algo              | Parsing algorithm
        alternative-parsing-algo      | Alternative parsing algorithm won't work after all
        ambiguous-grammars            | Ambiguous grammars are not an issue
        opt-choices-vs-choice         | Opt.choices vs Opt.choice
        opt-independence              | Opt independence, duplicate names/dest, and opt-spec scope
        parsed-data-structure         | Parsed data structuring: nargs, ntimes
        eager-attachment-at-bounary   | Eager option attachment at repetition boundaries
        spec-syntax-named-unnamed     | Spec-syntax: named and unnamed arguments
        variants-needed               | Variants: why they are needed
        general-name-assignment       | General name assignment: needed after all
        spec-syntax-complexity        | Spec-syntax: is it too complex?
        optional-positional-placement | Optional positionals before required are not a problem
        parsing-modes                 | Parsing modes
        zones-not-needed              | Zones not needed
        help-distpatching             | Help distpatching
        dispatch                      | Dispatch
        argparse-and-greed            | argparse and greediness
        end-user-errors               | End-user errors
        converters-validators         | Converters and validators
        grammar-querying-api          | Grammar querying API
        validation-notes              | Validation notes
        strategy-reassessment         | Reassess the strategy
        spec-syntax-revisited         | Spec-syntax revisited
        spec-as-format-string         | Spec as a format string not needed
        var-input-representation      | Representing var-inputs in spec-syntax
        enhanced-quantifiers          | Enhanced quantifiers
        opt-spec-lines                | Opt-spec lines
        group-level-validation-needed | Why Group-level validation should be retained
        optarg-choices-in-usage-text  | OptArg.choices in usage-text
        groups-need-names             | Why Group needs both dest and name
        degenerate-groups             | Degenerate groups with only one element
        opts-should-know-provenance   | Opts should know their data provenance
        parser-serialization          | Parser serialization
        readme-next-version           | README for next version

    reference | Reference

        parsing-resources                  | Parsing resources
        parsing-process-generally          | Parsing process generally
        pegs-cfgs-and-packrat-parsing      | PEGs, CFGs, and packrat parsing
        grammar-types                      | Grammar types
        api-driven-vs-text-driven-examples | API-driven vs text-driven examples
        other-tools                        | Other tools
        problems-scenarios-from-argparse   | Problems scenarios from argparse
        example-grammars                   | Example grammars
        vim-modelines                      | Vim modelines

--------
todos: TODOs
--------

new-notes : implement decisions:

    - Implementation TODOs:

        - Drop Opt.choice.
        - Clarify arg-variant defintion.

    - Move notes to proper homes in notes.txt.
    - Edit as needed.
    - Edit the rest of the document to align with new policies.

Mock-ups: create several more:
    * This has been very useful to expose questions/issues.
    * Add references to the examples section, where relevant.

    - naval-fate
    - EX_BLORT: revisit.
    - Click repo.
        - Click's approach is quite awkward.
        - Also mock up how dispatching would work.
    - Click other examples.

    - Check my current examples and mock them up where interesting.
    - Other project examples:
        - Argparse docs for anything prominent.

Editing pass over the rest of notes.txt:

    __HERE1__

    - Edit to conform to new specification.
    - Add 'Summary' at the top of section, where applicable.
    - Collect:
        - Questions/doubts
        - Examples
        - Terminology
        - Road map items

    - Optopus vs the competitors:
        - Maybe augment the current README
        - Include Click in a future write-up.

Scan: other materials in misc

Read-through: specification
    - One more time.

Editing pass.
    - todos
    - road-map

Reread:
    - dev-notes
    - setup.py etc
    - code
    - arg-parsing-algo

Spec-syntax parsing.

Convert spec-syntax AST into a Grammar.

Argument parsing.

--------
new-notes: New notes
--------

Rethinking OptArg:

    - Tentative decisions:
        - Retain OptArgs.
        - Positional OptArgs are anonymous.

    - The rest of this discussion goes back and forth:
        - Edit to reflect decisions.

    - Why do positionals have OptArgs?

    - For options, OptArgs make sense:

        - Parameters might need independent configuration.
        - And some of the OptArgs might be Groups.
        - Example: --point <x> (<y> <z>)...

    - Is there ever a situation where a positional needs an independent OptArg?

        - For a while I thought no.
        - But that is incorrect.

        - What is the difference between these?

            - Positional with plural nargs/OptArgs.
            - Option with the same.

                <path>{2}
                --point <x> <y>
                --point <p>{2}
                --point <p> <p>

            - If you can configure the parameters independently, why not the
              positional arguments?

            - How Opts can attach names to their OptArgs:
                - Options:
                    - Distinct names: <x> <y>
                    - Common name: <p>{2}
                    - No name: <> <>
                - Positionals:
                    - Common name (copied directly from parent Opt).
                    - No name.

                    - But for querying reasons, I think the policy should force
                      them to be anonymous.
                    - And that would solve the ambiguity the started this whole
                      line of concern.
                    - Queries for positionals would not inadvertently snag
                      their children.

        - Positionals cannot have groups as children.
        - For example, this is just three different positionals:

            <x> (<y> <z>)...

        - Adjacent positionals with same name are distinct Opts:

            <x> <x>

        - Noneth

        - At first I thought that even with child-OptArgs, a positional
          would not end up with independently configurable elements.

        - And even if positionals retain the concept of having OptArgs as
          childen, none of these examples would produce independently
          configurable entities.

            - A basic positional with nargs:

                <x>{2}

                - Opt(name = x, nargs = 2, ntimes = 1)

            - Related question: can spec-syntax create a positional with ntimes
              (other than 1) without the aid of an enclosing group?

                - In current planning notes, the answer is NO.
                - See parsed-data-structure for example:

                    # A positional with ntimes via a degenerate-group.
                    (<x>{4}){0,2}

                - The spec could support this syntax:
                    - The logic is that a positional's first quantifier
                      defaults to being nargs.
                    - The second becomes ntimes.
                    - So the example above could be simplified:

                        <x>{4}{0,2}

    - A more fundamental question: can a positional ever have 2+ OptArgs?

        - I think the answer is NO.

Rethinking Opt: positionals, options, and literals:

    - Tentative decision:
        - Separate child classes of Opt.
        - Literals will implement divider-behavior via groups and anchors.

    - The current plan has an Opt to represent both positionals and options.

    - A more structured OO approach might be better:
        - Opt (base class)
        - Positional
        - Option
        - Literal

    - Putting everything in Opt would involve more conditional logic:

        - That consideration is not decisive.
        - A simpler object-graph can outweigh some conditional logic.

        - But the child classes really are different:
            - Positionals are ordered, Options are not.
            - Literals impose dividers on the grammar (see below).
            - Options can have aliases, negaters, and be high-precedence.
            - The subclasses have different policies for name and dest.

        - And this project is complex:
            - A more robust OO approach might pay off over time.
            - Might help keep the code easier to manage.

    - Querying is a bit cleaner:

        - Comparison if user goes by the book:

            from optopus import Positional, OptKinds
            p.query(PATH, kind = Positional)
            p.query(PATH, kind = OptKinds.positional)

        - Optopus will also support kind='positional'.

    - Literal:
        - Maybe a subtype of Positional.
        - No name or dest by default.
        - Functions as a grammatical divider:
            - A strict boundary between stuff to its left and right.
            - A Positional is similar, but less strict:
                - A divider only among other positionals.

        - Implement this behavior using existing concepts:
            - When a literal is found:

                - Can the literal be anchored directly?
                - If yes, do it.
                - If no, split neighboring elements into left and right halves.
                - Wrap those halves in anonymous groups.
                - Anchor the Literal to the end of the left Group.

            - Example:

                # Spec.
                <x> [--foo] `/` <y> [--bar]

                # Grammar.
                Group():
                    Positional(x)
                    Option(foo)
                    Literal()
                Group():
                    Positional(y)
                    Option(bar)

Querying for specific things:

    - Decision:
        - Keep these notes.
        - API details can be deferred for now.

    - Just one element:

        query_one(PATH)
        query(PATH, one = True)
        query(PATH, nexp = 1)

    - For specific types:

        query_section()
        query_variant()
        etc

Queries, opt-independence, and arg-variants:

    - Decision:
        - Do not augment the query() syntax for PATH.
        - Other decisions make this problem less pressing.

    - Questions occurred when working on naval-fate.

    - If the <action> Opts are distinct (as considered above), how
      would a user query uniquely for a specific one:

        query('weapon.action')  # Gets them all.

    - Same question, how would one query for a distinct <x> or <y>?

    - Option 1: support arg-variants in the PATH syntax:

        'weapon.action=move'

        - Which OptArg logic is implied by that PATH?
            - #1 choice=move
            - #2 either choice=move or move in choices

        - Tentative decision: #2.

    - Option 2: user can name the variants.

        'move.weapon.action'

    - Option 3: user can fallback to indexes:

        'weapon.1.action

    - Tentative decision:
        - The user does have workarounds (Options 2 & 3).
        - But supporting Option 1 is not difficult.
        - In the context of spec-syntax, it seems consistent.

Should a literal in the grammar also be an Opt:

    - Decision:
        - Add Literal class.
        - Other details are in a prior section.
        - Write up any useful notes on the subject.

    - Opt(LIT)

    - What would the dest for the literal(s) be?

        - User could name a literal:

            action=`new`

        - But where would Optopus store anonymous literals?

    - My first thought: NO:

        - Many literals just import grammatical requirments.
        - The user does not care about their data value (just a bool).
        - If user wants a dest, they can use an Opt/OptArg with 1 choice.

    - What about literals with quantifiers?

        `go` `fast`... <x> <y>
        `go` [`down`] <x> <y>

        - Such examples seem like a misuse of literals.
        - If a literal has a quantifier, it is a de facto var-input.
        - If the user cares about the data, they should make it a proper Opt.

    - My second thought: still NO:
        - Literals are not first-class Opts.
        - Maybe the Context could report basic info on literals present to
          support oddball use cases.

    - But the current data-modeling plan does not have a home for literals:

        - Parser.grammar.elems : list[Opt or Group]
        - Seems like a problem.

        - Possible decisions: combine this issue with a class-rethink:
            - Opt: base class.
            - Child classes:
                - Positional
                - Option:
                    - Has more attributes than Positional.
                - Literal:
                    - Anonymous and empty-dest by default.
                    - User can set a dest.
                    - Otherwise, the data is discarded.

Bundling Context with Result:

    - Decision:
        - Store the Context instance under a named attribute.
        - Leading candidate for now: 'ctx' (see below).
        - The user can change attribute name to avoid name collision.
        - Raise if the user neglects a needed change.

    - Possible attribute names:
        - ctx
        - context
        - opto
        - optopus
        - info

    - How a user works around a name collision:

        p = Parser(SPEC, context_attr = NEW_NAME)

    - Alternative rejected: making Result callable:
        - When I typed mock-up code in blort.py, it was jarring.
        - The theory is sound.
        - But the resulting code does not read in an intuitive way.

Documenting symbolically named collections in usage-text:

    - Decision:
        - Do not generate documentation for symbolically named collections.
        - Let the user organize and label this stuff.

    - Examples:

        - Named Group of Opts.

            other-options=([--foo] [--bar] [--fubb] <path>)

        - Choice values: arg-variants.

            <action=walk|run|freeze>

    - Early mockups tried to document such things automatically:

    - Problems:
        - Raises too many detailed questions.
        - Layout, ordering, labelling via headings, etc.

        - To document such things, opt-specs are required.
        - Let the user organize those opt-specs as desired.
        - And surround the opt-spec listings with the desired text, headings,
          or sections.

Automatically generated headings for opt-spec listings:

    - Decision:
        - Generated default headings for opt-spec listings.
        - User can override behavior in two ways:
            - Put their own heading in front of the listing.
            - API call to suppress auto-heading (details TBD).

    - Common scenarios in a usage-section:
        - Just variants and opt-specs (no blocks-quotes).
        - Optopus should generate default headings for such scenarios.

    - Similar logic in other sections:
        - Will be common for a section to have nothing more than a section
          title, maybe some block-quoted text, and then an opt-spec listing.
        - Optopus should attach standard headings to those listings.

Optopus and man-pages:

    - Decision:
        - Optopus will not generate source-syntax for man-pages.

    - Rationale:
        - Spec-syntax could never achieve what troff can do.
        - Some users might want help-text mimicking man-page design.
        - The key: make sure they can achieve that (generally).

Repeated names and querying for distinct elements:

    - Decision:
        - Do not augment the query syntax.
        - User can fallback to indexes where needed.
        - In simple/realistic situations, that will not be a burden.

    - Example: simpler and realistic:
        - Variant and opt with same name: foo > foo.
        - How does the user get only the top element?

    - Example: pathalogical edge-case:
        - Several nests elements with same name: x > x > x > x.

    - Rejected alternatives:

        - Trailing period to mean "don't go deeper".
            - Insufficient by itself.
            - query('foo.') would still get both elements.
            - Why: because the path is not anchored to the start.
            
        - Also add syntax to anchord to the start.
            - query('.foo.') would get only the 1st element.
            - But consider: query('.x.x.').
                - Would it get only 2nd element?
                - No: would get 2nd, 3rd, 4th.
            - Problem: middle dot does not require direct parent-child.

        - Make paths like CSS:
            - Support both kinds of parentage:
                - Single-dot: parent-child.
                - Double-dot: any-descendant.
            - Problem: insufficient.
                - query('x.x.x'): gets 3rd and 4th
                - You also need ability to achor to the start.

        - Double-dot plus start-anchor:
            - Would work.
            - query('^x.x.x'): gets only 3rd.
            - Syntax reasonably intuitive.
            - But the solution addresses only strange use cases.
            - Defer this until known need arises.

Headings in the spec-syntax:

    - Decision:
        - Add headings to the syntax, via triple-colon.

    - Rationale:
        - Planning notes (above) use the heading concept a lot.
        - Optopus will generate headings for opt-spec listings in
          the usage-section.
        - The syntax is simple enough and reasonably intuitive.
        - Opens up ability to support consistent styling for headings.
        - Opens up an automatic-heading policy:
            - If a group of opt-specs has no heading immediately before it,
              Optopus will generate one.
        - Eliminates need to block-quote heading text.

    - Triple vs double colons:
        - Why not triple-colon for sections, since they have higher status?
        - Better to having N colons convey depth in hierarchy.
        - Leaves open possiblity of supporting subheadings.

Support smart-types for convert/validate:

    - Decision:
        - Add to roadmap and preserve these notes.
        - Defer API details.

    - Supporting common use cases makes some sense.
        - Yes the user can write their own convert/validate.
        - But doing the common things well is handy.
        - Opens up support for more informative errors.
        - Similar in spirit to other Optopus utilities:
            - Exiting with proper codes.
            - Printing errors in a consistent style.

    - Click:

        - The library provides various data-objects.
        - They hold configuration to perform convert/validate.

        - Examples:
              click.Path(...)       | Requirements to impose on a path
              click.File(...)       | Ditto, plus how to open the file
              click.IntRange(...)   | Min, max, etc
              click.FloatRange(...) | Min, max, etc
              click.DateTime(...)   | Allowed formats

    - Note on convert vs validate:
        - Optopus supports but does not require both.
        - User can do both in convert.

Prompting for OptArgs:

    - Decision:
        - Add to roadmap.
        - API details deferred.

    - Click supports this.
    - Example use case: credentials.

Raising errors in convert/validate:

    - Decision:
        - If exception, get its MSG.
        - Then build the full Optopus error message, with MSG at end.

    - Other libraries require users to raise specific exceptions:
        - argparse.ArgumentError
        - click.BadParameter

    - Seems like a needless hassle:
        - Just get the msg from any Exception instance.

High-precedence: naming and rethinking:

    - Decisions:
        - Naming:
            - Drop 'high-precedence'.
            - Use 'priority' in API.
            - Also use 'priority-flags' in some docs/notes.
        - Restrict priority-opts to flags.

    - Why priority-opts should be restricted to flags:

        - Context:
            - If an opt has priority.
            - Its dispatching should occur no matter what.
            - Even in the face of otherwise invalid ARGS.
            - Example: --help.

        - But consider how parsing would under those conditions:

            - Parsing of all ARGS fails.
            - Select variant that did the best (eg, max N ARGS consumed).
            - Optopus populates a Result up to the ARG that failed.
            - What happens next?

            - If a priority-opt is a flag:
                - Parser is able to see that the flag is present.
                - The test is easy: '--help' in ARGS

            - But if a priority-opt were allowed to be more complex:
                - With OptArgs having grammatical/validation requirements.
                - How would Optopus successfully parse the entity?
                - Parsing has already failed.
                - Seems fraught.

    - Other naming ideas:
        - Click uses 'eager'.
        - But their concept deals mainly with dispatch ordering.
        - Click does not appear to support the concept of a priority-flag.

Support for obtaining applied-defaults from environment variables:

    - Add my plans to opts-should-know-provenance

    - Parser.apply_defaults(pref_defaults, env_defaults = None)

        - pref_defaults are alredy covered in notes.

        - env_defaults: a possible approach:

            - None:
                - Do nothing.

            - True:
                - Env vars naming agrees with Opt naming.
                - With env vars in uppercase.

            - 'PREFIX'
                - Same, after attaching the PREFIX to env var names.

            - dict:
                - Mapping: Opt PATH => env var name

            - callable:
                - Take an Opt.
                - Return env var name.

        - Precise details/decisions TBD.
        - Based on the sketch, the plan (or some variant of it) seems plausible.

    - Click supports getting OptArg defaults from environment variables.

        - Automatically in one of two ways:
            - Opt-names and env-vars agree.
            - They agree, with a common env-var prefix.

        - Opt-specific configuration:

            @click.option('--fubb', envvar = 'FUBB_VAL')

--------
road-map: Road map
--------

Core enhancements:

    Error selection during failed argument parsing.

    Conversion/validation/choices.

Help text: basic:

    Automatic --help.

    Help text: usage.

    Help text: options.

    Docs: proper README; shift why-build elsewhere [see readme-next-version].

    Upgrade classifers to beta.

Parsing enhancements:

    Other parsing modes: no-conf, unknown-ok, unconverted-ok, invalid-ok.

    No-args behaviors, such as show-help or default-args.

    Data flattening/non-flattening in Result.

Help text: enhancements:

    Help text: show defaults and choices.

    Help text: sections.

Alternative inputs: basics:

    Aliases.

    Tight binding of option and parameter: --opt=<param>

    Short-flag bundling.

    Option-prefix customization.

    Quoting customization.

    Non-option args having option prefix: negative numbers.

    Non-option args having option prefix: configurable escape prefix.

Project health:

    Add validation to user-facing callables.

    Documentation.

    Docstrings.

    Github Actions for CI.

Opt enhancements:

    Opt.factory.

    Negatable options: --foo and --no-foo.

    File-type arguments. Let user decide behaviors: (1) validate path exists, (2)
    opening (with encoding, mode, etc). Also support `-` for stdin/stdout.

Alternative/fuzzy inputs: handy:

    Abbrevations for long-options.

    Abbrevations for choices.

    Case-insensitivity for options and choices.

Dispatching:

    General dispatch.

    Help dispatch.

    Different dispatch for --help vs -h.

Grammar enhancements:

    High-precedence options.

    Anchored Opts.

Parser enhancements:

    Parser.query() and bulk configuration.

    Parser utilities: warn(), help(), error(), exit().

    Parser configuration to add single-letter option aliases automatically.

    Group validation.

Alternative inputs: other:

    @FILE (command line arguments from a file). See argparse fromfile_prefix_chars.

    Case-insensitive options.

Text customization:

    Help text: short options in separate section.

    Help text: usage: symbolically named groupings.

    Help text: customizations via config and/or hooks.

    Help text: supplied via alternative devices (text file or blob, with
    f-string support).

    Error text: customizations via config and/or hooks.

    Man-page-style help text.

Development aids:

    Hidden options: either totally or in specific types of help text.

    Automatic --version.

    Ability to emit Parser configuration as data (and re-create from data).

    Bash completion.

    Integration with configuration data and environment variables.

Other possibilities:

    Enhanced quantifiers: range-step and disjoint values.

--------
dev-notes: Dev notes
--------

Creating a new virtualenv:

    v='3.9.4'
    deactivate
    pyenv shell $v && pyenv versions
    mkvirtualenv optopus-$v
    pip install -U pip
    pip install -e .[dev,test] && pip list

Activate and run tests:

    - Basic:

        workon optopus-3.9.4
        pytest -s -v tests/

    - With invoke:

        inv test
        inv tox

    - With tox directly:

        pyenv shell 3.9.4  3.8.9  ...
        tox

Version bump:

    - Edit/commit all changes, including CHANGES and README.

    inv bump --kind major|minor|patch

Publish:

    inv dist [--publish] [--test] [--verbose]

Installing from test pypi:

    pip install --index-url https://test.pypi.org/simple/ optopus
    pip uninstall attrs short-con
    pip install attrs short-con

Tag file creation:

    inv tags

--------------------------------------------------------------------------------
specification: Specification
--------------------------------------------------------------------------------

--------
spec-syntax: Spec syntax
--------

Spec:

    - A spec is 0+ sections.

        [section...]

Section:

    - The first section:

        [title ::]                        # Default title: 'Usage'
        [variant...]                      # Allowed only in first section
        [opt-spec | block-quote]...

    - Other sections:

        [spec-scope >>] title ::      # Title required
        [opt-spec | block-quote]...

Variant:

    [name :] variant-spec                 # Regular
    name! : variant-spec                  # Partial

Variant-spec:

    - Options:

        -f             # Short.
        --foo          # Long.
        -abc           # Bundled flags: -a -b -c.

    - Positionals and parameters:

        <bar>          # Positional.
        -f <fubb>      # Parameter.

    - Quoted literals:

        `hello`        # Can be positional, positional-choice, parameter-choice.

    - Groups and alternatives:

        ()             # Group.
        []             # Group, optional.
        foo=()         # Named group.
        foo=[]         # Named group, optional.
        |              # Alternatives separator.

    - Quantifiers:

        ...            # 1 or more
        {m,n}          # Repetition: m through n, inclusive.
        ?              # Non-greedy for preceding quantifier.

    - Partial:

        foo!           # Insert foo partial into the variant.

Opt-spec:

    - Syntax:

        [spec-scope >>] <pos>            [: [help-text]]
        [spec-scope >>] [alias...] --opt [: [help-text]]

    - Explanation:

        - An spec-scope is a Parser.query() path declaring the Opt (from
          the grammar) to which the opt-spec should be connected.

        - A <pos> defines one positional argument (ie, positional-spec),
          optionally with a quantifer.

        - An --opt consists of an opt-mention (eg --foo), optionally
          with a quantifer and 1+ parameter-specs.

        - An alias is an opt-mention (eg -f) that functions as a synonym in the
          usage for the --opt.

    - An opt-spec uses a subset of variant-spec grammar. The following
      are not supported:

        - Variants.
        - Partials.
        - Named groups.

    - If Opts are declared in variants (a grammar) and in opt-specs,
      the two configurations are merged:

        - Opt-spec configuration is connected to the relevant Opt from the
          grammar (see opt-independence for details).

        - Opt declared in the grammar can use an abbrievated form (an
          opt-mention), leaving the full configuration to the opt-spec.

Opt-mention:

    - An opt-mention is just the Opt.name, with appropriate punctuation:

        <foo> | Positional.
        --bar | Long option.
        -b    | Short option.

Var-input:

    - Variable input provided by the user.
    - See positional-spec and parameter-spec for details.
    - Primarily an internal term, not user-facing.

Positional-spec:

    - Syntax:

        <foo>         | Positional
        <foo=choices> | With choices
        <foo=choice>  | Specific choice (in context of a variant-spec).

Parameter-spec:

    - Syntax:

        --foo <bar>         | Usage displays <bar>.
        --foo <bar=choices> | Usage displays <bar>, not <choices>.
        --foo <bar=choice>  | Specific choice (in context of variant-spec).

        --foo <choices>     | Usage displays choices.
        --foo <=choice>     | Specific choice (in context of variant-spec).

Choices:

    - Consists of 1+ choice, which can be:

        - Simple name consisting of \w or hyphen.
        - Quoted-literal.

Block-quotes and literals:

    - A section can contain literal text intersperced among the variant-specs
      and opt-specs.

    - Quoting:

        Quote | Situation
        ----------------------------
        ```   | Block quote
        ```!  | Block quote, no wrap
        ```#  | Block quote, spec-comment
        `     | Inline quote
        \`    | Literal backquote

    - Notes:

        - Tripple-quotes can sit on their own line, or not.

        - For no-wrap and spec-comment, the additional markers (exclamation or
          pound-sign) are applied only to the opening quote.

Names:

    - Must be simple "words":
        - Start with a letter.
        - Allowed: letters, digits, underscores, or hyphens.

    - By default, most names in the spec are also the dest:
        - Dests cannot have hyphens.
        - So a hyphen-to-underscore conversion is applied.

Whitespace rules:

    - Line and indentation requirements:

        - Opt-spec must start on its own line.

        - Variant must start on its own line.

        - Opt-spec and variant continuation line must be indented more than the
          first line and be contiguous with it.

        - Section title must be on its own line, ending in marker.

    - Line breaks not allowed:

        - Within an {m,n} quantifier.

        - Between a name and equal sign.

        - Within a var-input.

    - Whitespace not allowed:

        - Between option prefix and its dest.

        - Between partial name and its exclamation mark.

        - Within a triple-dot quantifier.

--------
syntax-examples: Syntax examples
--------

pgrep: README example-1: EX_README_1

    [-i] [-v] <rgx> <path>

pgrep: README example-2: EX_README_2

    <rgx> : Python regular expression
    [<path>...] : Path(s) to input
    [-i --ignore-case] : Ignore case
    [-v --invert-match] : Select non-matching lines

pgrep: README example-3: EX_README_3

    <rgx> : Python regular expression
    [<path>...] : Path(s) to input
    [-i --ignore-case] : Ignore case
    [-v --invert-match] : Select non-matching lines
    [-m --max-count <n>] : Stop searching after N matches
    [-C --context <n>] : Print N lines of before/after context
    [--color red|green|blue] : Highlight matching text

pgrep: README example-4: EX_README_4

    <task=grep>   [-i] [-v] [-m] [-C]
                  [--color <red|green|blue>]
                  <rgx> [<path>...]
    <task=sub>    [-i] [-n] <rgx> <rep> [<path>...]
    <task=search> [-i] [-g] [-d | -p] <rgx> [<path>...]

    <task>             : Task to perform
    <task=grep>        : Emit lines matching pattern
    <task=sub>         : Search for pattern and replace
    <task=search>      : Emit text matching pattern
    <rgx>              : Python regular expression
    <path>             : Path(s) to input
    <rep>              : Replacement text
    -i --ignore-case   : Ignore case
    -v --invert-match  : Select non-matching lines
    -m --max-count <n> : Stop searching after N matches
    -C --context <n>   : Print N lines of before/after context
    --color <>         : Highlight matching text
    -n --nsubs <n>     : N of substitutions
    -g --group <n>     : Emit just capture group N [0 for all]
    -d --delim <s>     : Delimeter for capture groups [tab]
    -p --para          : Emit capture groups one-per-line, paragraph-style

Parser configuration: spec-vs-API: EX_JOB_CLIENT

    See misc/examples/job-client-*

blort: EX_BLORT

    - See misc/examples/optopus-mock-ups/blort.py

    - A subcommand-style script.
    - Includes a full spec and the resulting usage-text.
    - Plus bells and whistles to exercise most of the spec-syntax.
    - Includes Opts with same-name and different-config.
    - Several notes to document the spec syntax and behaviors.

neck-diagram: EX_NECK_DIAG

    - This is a non-standard command line program: its grammar consists of one
      or more subcommands with a literal separator between them.

    cmd! :  commands=(
                <cmd=snum>   <snum>             |
                <cmd=fnum>   <fnum>             |
                <cmd=number> <numbering=on|off> |
                <cmd=tuning> <notes>...         |
                <cmd=fret>   <syms>...          |
                <cmd=invert> <syms>...
            )

    main : cmd! [ `/` cmd! ]...

Syntax example: nab: EX_NAB

    - Another separator-based grammar.

    chomp!   : / <cmd=chomp>
    findall! : / <cmd=findall> <rgx> [-a]
    grep!    : / <cmd=grep> <rgx> [-i] [-v] [-s]
    range!   : / <cmd=range> <start> <stop> [<step>] [-g]
    run!     : / <cmd=run> <code> [-g <>] [-a] [-v] [-i]

    main : [--trace] commands=(chomp! | findall! | grep! | range! | run!)...
    help : --help

--------
terminology: Terminology
--------

Library:
    - The optopus code base.

Users:

    user or library-user | Software developer using optopus
    end-user             | Someone running a program that uses optopus

Command line arguments:

    - Arguments:
        - The raw strings directly from the command line.

    - Positionals:
        - The typical non-option argument.

    - Options:
        - Arguments with an option prefix.

        --path    | Long prefix
        -p        | Short prefix
        ----------------------------------------
        -c <code> | Parameter option, or just option
        -y        | Flag

    - Parameters:
        - Arguments for an option.

Help text:

    Text         | Description
    ------------------------------------------------------------------
    Help text    | Full output from --help.
    Usage text   | Just the command-line grammar.
    Options text | List of options and positionals, perhaps in sections.
    Other text   | Written by user (default: wrapped by optopus).
    ------------------------------------------------------------------
    Opt text     | Help text for a single positional or option.

Spec:
    - More formally: parser-spec.
    - A Parser specification.
    - Text blob defining Parser's grammer, Opts, help sections, and text.

Spec-syntax:
    - Syntax used to define a spec.

Section:
    - Section of the spec and thus of the help text.
    - Has a title.
    - Can have text generated by optopus (usage text and opt text) as well as
      text written by the user.

Usage-section:
    - The first section.
    - Will contain the generated usage text.
    - Default title: 'Usage'.

Variant:
    - A usage variant, as defined in a spec.

        [name :] variant-spec

    - Examples:

        grep  : <cmd=grep>  <rgx> [-i] [-v]
        split : <cmd=split> [<rgx>] [-n <max>]

Variant-spec:
    - The grammatical portion of a variant definition.
    - The stuff after the colon.

Argument-variant: positional-variant and parameter-variant:
    - Also: arg-variant.
    - Variant defined/triggered by a specific positional/parameter value.
    - See variant examples (above).

Opt-spec:
    - A portion of a spec defining one Opt.

Opt-spec-spope:
    - A scoping declaration to connect an opt-spec or an entire section of
      opt-specs to a specific Opt implied by the usage grammar.

Var-input:
    - Var-input:
        - Stands for variable input.
        - Mainly for internal use in the Optopus project.
    - User-facing terms:
        - positional
        - parameter

Literal-input:
    - Element of grammar requiring end-user to provide a literal value.
    - Examples:
        - The separator in a separator-based grammar: EX_NECK_DIAG.
        - In a subcommand-style program:
            - Each subcommand is an OptArg.choice.
            - In usage-text, each variant uses a choice as a literal-input.

Anonymous-input:
    - A nameless var-input.
    - Example: --age <>

Name:
    - Symbolic name in help-text (for positional, option, or parameter).
    - Symbolic name in spec/API (for variant, section).

Dest:
    - Attribute name in Result for data from one positional/option.

Block-quote:
    - Triple-quoted literal help text.
    - With or without wrapping by Optopus.

--------
classes-and-attributes: Classes and attributes
--------

Overview:

    - User-facing entities:

        Parser
        Section
        Grammar
        Variant
        Group
        Opt
        OptArg
        Result
        Query

    - Relationships among user-facing entities:

        Parser
            sections      = List[Section]      # 1+   # Usage exists even with spec=''
            grammar       = Grammar            # 1    # Ditto.
                variants  = List[Variant]      # 0+
                    elems = List[Group or Opt] # 0+

            parse(ARGS) -> Result

        Group:
            elems = List[Group or Opt]         # 0+

    - Objects used during spec-parsing:

        SpecParser | Parses a spec, returns Grammar.
        RegexLexer | Lexer used by SpecParser.
        TokType    | Token types given to lexer.
        Token      | Emitted by lexer.
        ParseElem  | Emitted by parser functions. Later assembled into Grammar.

    - Objects used during argument parsing:

        State
        ArgResult
        Target

    - Entities used only for notation:

        PartialUsage      | Group
        Positional        | Opt
        PositionalVariant | Opt
        ParameterVariant  | Opt

Parser:

    - Class will likely have various getters or query functionality to make it
      easy to configure specific grammar elements. Users should not have to
      manually navigate the Grammar hierarchy.

    - Attributes:

        # The grammar.
        spec: str
        grammar: Grammar
        sections: list[Section]

        # Typically inferred by Optopus.
        prog: str

        # Parsing mode: regular or no-config [maybe others later].
        mode: str

        # Namespace to hold help-text formatting defaults/behavior.
        # Deferred for now.
        format: HelpTextFormat

    - API:

        - Notation:

            p = Parser(SPEC)

        - Parsing:

            p.parse(args = None, mode = ...)

            - Returns a Result or raises.
            - The method can temporarily use a different mode than the Parser.mode.

        - Querying grammar elements:

            p.query(*paths, kind = types, want = callable) => Query

            - Delegates the call to p.grammar.query().

            - Each path is a period-delimited query string of:

                Opt      | name, dest
                OptArg   | name
                Variant  | name
                Group    | name, dest, index
                Wildcard | *

            - The path elements operate in a loose data-dive way:

                - Example: bar.fubb.foo
                - Example: x.2

                - Get the grammar elements with name/dest of 'foo'
                  that are hierachically nested as follows:

                    bar
                        ...
                            fubb
                                ...
                                    foo

                - The nesting can be direct (parent to child) or extended (any
                  grandparent to child).

                - Typically, the path elements are name-like (dest or name).
                  But they can also be integers (indexes).

                    - But integers behave differently: not as an any-nesting
                      query, but as a direct get-via-index operation. Why:

                        - Under the usual query logic, a path like 'foo.2'
                          would get any elems[2] nested anywhere under a 'foo'.
                        - Seems fraught type for a user to reason through.
                        - More intuitive is to interpret the integers as direct
                          indexes into elements the user can see directly in a
                          visual inspection of the spec.
                        - The integer need not be last path-element: 'foo.2.bar'

                    - Example: the grammar has three -x flags that need
                      different help-texts. The user can see how those Opts are
                      ordered in the spec. Their spec-scopes can simply
                      index into that ordering.

                        --foo [-x] | --bar [-f] [-x] | --blort [-x]

                        x.2 >> [-x] : blah x-for-blort
                        x.0 >> [-x] : blah x-for-foo
                        x.1 >> [-x] : blah x-for-bar

            - Keyword arguments:
                - kind: declares wanted types (single class or sequence of them).
                - wanted: callable that takes an entity and returns bool.

            - The returned Query is a sequence-like collection of matching
              grammar elements.

                - Under most circumstances users will query for Opts that
                  have unique names.

                    p.query('foo', 'bar')

                    - Gets Opt(foo) and Opt(bar)

                - In more complex situations query-paths can include more names
                  to disambiguate.

                    p.query('go.foo')

                    - Would get Opt(foo) inside Variant(go).

                - Query paths can use a glob-style wildcard:

                    p = Parser('<x> [-z <a> <b>] | -z')
                    p.query('z.*')

                    - Gets OptArg(a) and OptArg(b), not Opt(z).

                - Although many grammar elements will have a name/dest, some
                  will not. But they will have a unique index within their
                  parent's elements.

                    query('go.2')

                    - Would get third element in Variant(go).

        - Configuring grammar elements:

            p.config(*paths, **kws)

            - A shortcut for p.query(*paths).config(**kws).

            - For the grammar elements returned by the query(), sets their
              attributes based on the data in kws.

        - Configuring one attribute across multiple elements:

            p.query(*paths).config_each(attr_name, **kws)

            - Convenience method to set an attribute across multiple elements.

            - Example: set all help texts in one place:

                p.query(kind = Opt).config_each('text',
                    foo = 'Blah',
                    bar = 'Blah blah',
                    ...
                )

        - Obtaining help text or text for the error from most recent parse():

            p.help_text(section...)
            p.error_text()
            p.exception()

        - Actions like printing or exiting.

            p.warn(msg)
            p.help(section...)
            p.error(msg = None, code = 1)
            p.exit(msg = None, code = 0)

Section:

    - Used to create labeled groups of Opt for help text purposes.

    - Attributes:

        # Symbolic name used in API.
        name: str

        # Section title in help text.
        title: str

        # Section content.
        # - Opts belonging to the section.
        # - Hand-crafted help text (probably needs more modelling).
        opts: list[Opt]
        text: str

Grammar:

    - Attributes:

        variants: list[Variant]

    - API:

        query(*paths, kind = KIND, negate = False) -> Query

Query:

    - Sequence object returned by Grammar.query().
    - Holds the Grammar elements satisfying the search parameters.
    - Supports bulk configuration.

    - Attributes:

        elems: list[Group or Opt or OptArg]

    - API:

        - Notation:

            p = Parser(...)
            q = p.query(...)

        - Apply configuration to grammar elements.

            q.config(...)

        - Subquery to filter down further:

            q.query(...) => Query

Quantifier:

    - Might be a concept rather than an object.
    - Represents any valid input value for nargs or ntimes.

        N
        (N, M)
        (N, None)

Variant:

    - Attributes:

        name: str .
        elems: list[Group or Opt]
        ntimes: Quantifier

Group:

    - Represents spec-syntax enclosed by brackets.
    - Primary purposes:
        - Ability to quantify groups of grammar elements.
        - Mutual exclusion for such groups.
        - Using the dest to organize nested Result data.
        - Using the name to represent groups of Opts symbolically
          in usage-text.
        - Ability to apply validation to groups of Opts.

    - Attributes:

        # Name and dest:
        # - name comes from the spec.
        # - dest defaults to name.
        # - If name is set, it is used to represent the
        #   group in usage-text.
        name: str
        dest: str

        # Quantifier and group-level validation.
        ntimes: Quantifier
        validate: callable

        # Mutual exclusion: true for groups defining alternatives.
        mutex: bool

        # Child elements.
        elems: list[Group or Opt]

Opt:
    - Represents one command-line argument as a configurable unit.
    - Broadly defined to include its arguments and quantifiers.
    - Also see: opt-and-optarg-configuration

    - Attributes:

        # Definition, identity, and kind.
        spec: str
        name: str
        dest: str
        kind: str   # pos or opt

        # Aliases and help text.
        aliases: list[str]
        text: str

        # Quantifiers.
        nargs: Quantifier
        ntimes: Quantifier

        # Children.
        elems: list[OptArg or Group]

        # Deferred stuff (might need more design work).
        # - High precedence Opt.
        # - Anchored Opt.
        # - Hidden Opt.
        # - Opts to negate other flag Opts.
        # - Dispatch based on state of Opt.
        high_precedence: bool
        anchor: bool
        hide: bool
        negaters: list[Opt]
        dispatch: callable(s)

OptArg:
    - Child object of Opt, representing one argument as a configurable unit.
    - Also see: opt-and-optarg-configuration

    - Attributes:

        # Definition and help text.
        spec: str
        name: str
        text: str

        # Conversion and validation.
        convert: callable
        validate: callable

        # Choices:
        # - For validation purposes.
        # - For grammatical purposes (context: arg-variant).
        choices: list[str]
        choice: str

        # Default value and quantifier.
        default: object
        factory: callable
        ntimes: Quantifier

Result:

    - Data object returned to end-user by Parser.parse().

    - An iterable mapping-like object with destinations as the attributes.

    - In more complex grammers the top-level Result returned by parse() might
      contain nested Result instances (eg, a Group with a quantifier of 2+).

SpecParser:

    - Attributes:

        lexer     | Lexer.
        handlers  | Sequence of token-stream handlers.
        curr      | Managed by the mixin.
        prevpeek  | .

    API:

        parse()
        eat()
        error()

RegexLexer:

    - General-purpose regex-based lexer.

    - Attributes:

        text      | The text to be lexed.
        toktypes  | Sequence of TokType.
        pos       | Current index of the lexer.
        mxpos     | Last index of the text.
        iseof     | Becomes True when text exhausted.

    - API:

        See old.py implementation and modifications in draft.py.

TokType:

    - Internal data object given to a lexer.

    - Attributes:

        name  | Name of token.
        regex | Regex to match the token.
        emit  | Whether to emit back to parser [default: True].

Token:

    - Simple internal data object emitted by a lexer.

    - Attributes:

        toktype | TokType of the token.
        value   | Corresponding token text.
        pos     | Position (where matched)
        line    | Line number.
        col     | Column number.

    Kinds:

        Same as TokType.

ParseElem:

    - Simple internal data object emitted by the parsing phase of
      SpecParser.parse(). Subsequent work in that method will convert the
      ParseElem into a user-facing Grammar.

    - Attributes for each kind of ParseElem will vary.

    Kinds:

        variant
        group
        opt
        quantifier
        choices
        parameter
        literal

State:

    - An internal data object used during argument parsing. See
      arg-parsing-algo notes.

ArgResult:

    - An internal data object used during argument parsing. See
      arg-parsing-algo notes.

Target:

    - A data object used during argument parsing to store the information
      ultimately returned as a Result to end user.

    - For the applicable parsing interpretation, a Target contains information
      about all relevant Opt/Pos and values parsed so far.

    - Attributes:

        poss | List[Pos]
        opts | Dict[Opt]
        vals | Dict[DEST -> VAL]

--------------------------------------------------------------------------------
discussion: Discussion
--------------------------------------------------------------------------------

--------
api-vs-text: API-driven vs text-driven
--------

Two fundamental configuration strategies for argument parsers:

    - API-driven:

        - User configures a parser via the programmatic API.
        - The parser generates the help text.
        - Typically allows user to override with literal help text, if desired.
        - Examples: argparse and many others.

    - Text-driven:

        - User writes usage and options text.
        - Library derives the parser from that text.
        - This approach is much less common.
        - Examples: docopt.

The optopus library combines the best of both approaches:

    - API-driven.

        - Tends to require less typing for a variety of configuration tasks
          (but not all; see below).

        - Generated usage text is mostly fine, especially for simpler projects.

        - Most developers probably prefer an API-driven approach over
          hand-formatting help text themselves.

        - API-generated help text will follow the conventions for documenting
          command-line programs -- conventions that few developers have studied
          in depth and would rather not worry about.

        - API-generated help text can be wrapped to the current terminal width.

    - Text-driven for grammar and naming:

        - Even though my experiments configuring argument parsers of varying
          complexity via usage text convinced me of the benefits of an
          API-driven approach, text-driven argument parsers have notable
          advantages. Those advantages are focused on these core areas:

            - The command-line grammar.
            - The associated naming for entities in that grammer and, thus, for
              the parsed data returned to the caller.
            - The configuration elements that are inherently textual:
                - Help text for each positional or option.
                - Other help text.

        - The text-driven approach (and the related focus on command-line
          grammar) leads one to emphasize the idea of usage variants, a
          technique that can greatly enhance usage-text readability --
          especially for complex programs but also for small ones.

            git diff [<commit>] [--] [<path>...]
            git diff --cached [<commit>] [--] [<path>...]
            git diff <commit> <commit> [--] [<path>...]

            frob [--debug] [--foo <f>] <path>...
            frob --help
            frob --version

        - Usage variants open up a range of possibilities in the kinds of
          command-line grammars that can be supported.

            - API-driven parsers struggle with command-lines that need any
              grammar falling beyond the most typical cases.
            - On stackoverflow and bugs.python.org, for example, one can find
              many command-line use cases (some of them quite simple) that are
              not supported easily by argparse but that are straightforward in
              docopt.

        - Finally, usage syntax is both efficient and intuitive.

            - When internet users discuss command-line grammar scenarios, they
              invariably use a usage syntax to specify the desired grammar.
            - In my own research, I experimented with defining the needed
              grammars via an API, but I consistently found the text-based
              approach simpler to express and read.
            - For a good example, see this argparse discussion where a user
              describes a problem in general terms and suggests how the
              argparse API could be augmented to handle such cases.
                - The discussion is somewhat difficult to understand without
                  very careful reading and thinking.
                - Then the user provides a short one-line usage syntax, and the
                  issue is immediately clear.
                - See https://bugs.python.org/issue11588

Configuration via usage syntax is focused on grammar:

    - Optopus keeps that syntax fairly clean, readable, and intutive by
      focusing it solely on the grammar and naming -- the area where it excels.
      Almost all other details, if any are neeeded, are handled via the API.

    - The syntax is also intuitive because it relies heavily on common
      conventions for documenting command-line programs.

    - The syntax will look roughly like familiar usage text, plus a small
      number of additional syntax elements focused on supporting flexible
      command-line grammar.

        - Usage variants. Discussed above.

        - Partial variants, which use the variant concept to define a named
          group of options and/or arguments that can then be inserted into one
          or more usage variants -- avoiding repetition in the definition of
          complex grammars (argparse does something analogous via parents).

        - The ability to attach names to any elements in the grammar.
            - Those names become symbolic handles to represent the entity in
              the generate usage-text.
            - Indirectly, the also indicate the ultimate stored destination for
              the parsed data from the named entity.

    - The syntax opens up a wide range of possibilities for complex programs or
      unusual grammars.

    - But it also simplifies configuration of argument parsing for the simplest
      cases.

    - And it also helps at the micro scale: simplifying the configuration of
      individual options.

--------
other-lib-weaknesses: Addressing weaknesses common in other libraries
--------

Providing users with simple ways to handle command-line grammars and usage
variants (noted in a previous section).

Supporting everything from quick-and-dirty scripts to complex, highly
customized command-line programs:

    - At once extreme, optopus allows you to parse any default-behavior
      command line, with zero configuration. Just import and go. This parser
      won't enforce any rules, but it will tell you what the end-user entered
      -- which is good enough for many types of quick-and-dirty scripts,
      debugging sessions, experiments, and even early prototypes.

    - At the other extreme, you could build the next Git or a variety of
      programs with idiosyncratic grammars, heavily customized help text, and
      many other features.

    - Sitting between the two extremes are numerous conveniences and sensible
      defaults to make option parsing easy, no matter what level of control
      your application needs.

Allowing users to control the generated help text in a fine-grained manner.

    - Program complexity increases the need to organize and fine-tune help
      text, but not necessarily to write and layout the whole thing
      (text-driven libraries require that).

    - Optopus provides many mechanisms for that fine tuning:

        - Simple top-level configurations to control basic layout,
          capitalization, punctuation, etc.

        - Ability to group options into sections.

        - Ability to supply hand-crafted sections whenever needed and to locate
          those sections with precision in the output.

        - Ability to control nearly all parameters driving the help text
          contruction process via configuration and, where necessary, through
          the programmatic hooks. There should be no need to subclass optopus
          or delve into the parser's innards.

        - Support for common styles: command-line vs man-page.

Allowing users to enhance usage-text readability by being able to refer to
groups of options and to omit either short or long options.

    - API-generated usage text tends to be poor not only because it lacks usage
      variants but also because the generated text exhaustively lists all
      options in all of their permutations (short and long).

    - Especially as the number of options grows, readability can be improved
      greatly by referring to sets of options by symbolic names rather than by
      enumerating every possibility (see `git help diff` for an illustration of
      this technique).

    - Similarly, readability can be enhanced by focusing the usage text on just
      the long-options (or just the short-options) and then providing a mapping
      between short and long options latter in the help text.

Allowing users to define arguments/options in ways that encourage modularity.

    - In optopus a user defines/configures options and arguments as atomic
      units, separate from the issues of command-line grammar, usage variants,
      and options help text.

    - Each of those atomic units can be attached to one or more groups of
      related options.

    - Then those options or option-groups can be leveraged when defining the
      command-line grammar, when expressing the generated usage text, and when
      organizing the options text into sections.

Providing users with full access to the parser configuration, both via the API
and in the form of standard data structures.

Providing users more conventient mechanisms to reduce repetition in the
configuration of the parser.

--------
other-goals: Other goals
--------

Prioritize the simple use cases. Yes, add features and customization
capability. But do that without sacrificing simplicity for the easy cases.

Usage should be intuitive and declarative, especially for the simplest and most
common use cases. It should not depend on bizarre syntax or on complex
user-created data structures.

The parser's configuration should be expressible as a data structure. This is
important for testing, debugging, easy integration with other libraries.

For complex programs or special needs, users should have full control over
documentation. This includes both usage-text and help-text, as well as the
styling of error messages.

Easy system for validators to be combined flexibly.

Should easily support different help types: (a) brief usage/synopsis, (b) full
help or man-page, and (c) extras or examples. Regarding the latter, provide
utility functions to format/wrap any text blob in the same manner that Optopus
would format official sections in the help text: p.format(BLOB) should return
text consistent with the look and behavior of other help text, based on Parser
defaults and configuration.

Include ability to merge options with user preferences. Note that the purpose
of config files is typically to set the default values used by the command-line
option parser. When defaults are supplied, it should also cause a required
option to become non-required.

Make it easy to test the option parser.

Error handling should be under the user's control, if they want it. This is a
serious flaw in some parsers (eg argparse). The library should support both
"automatic" mode (where the parser will eagerly print help or error message and
then exit) or non-automatic mode (where the parser will simply return an object
containing all information and allow the user to decide what to do. [Note that
argparse has addressed this, in whole or in part, in Python 3.9].

Should have a design that is friendly to customization. Allow users to
customize by writing simple functions or hooks rather than having to subclass.
Consider using the pluggy library so that users can implement simple function
hooks.

Start simple: begin with core behaviors; don't support more flexibility until a
basic working system is in place.

Where possible, rely on convention over configuration: sensible defaults to
allow the most common path to be followed with minimal setup.

Provide good support for --version. Show the application's name and version
number.

Provide helper functions for warn(), exit().

Support various configuration styles: per option configuration (argparse and
many other libraries do this); and thematic or bulk (make one type of setting
on multiple options at once).

Allow the user to have hidden options (eg for developers only).

Support file and dir types as arguments, with checks for existence or non-existence.

For file path arguments, support the ability to treat `-` as stdin or stdout.

Support an easy way to get bash tab-completion.

Support @somefile.txt: user supplies command-line args via a file.

Support parse_known_args().

Support abbreviated option names when there is no ambiguity.

Support some no-configuration argument parsing strategies: default (options are
flags), key-val (options take single args by default), greedy (options consume
as many params as possible).

Support conversion/validation.

Support dispatch mechanisms.

The parser's configuration is likely to be organized as a fairly deep tree
behind the scenes. But make it easy for the user to query that tree to obtain
nodes of interest for configuration and other purposes. Primarily this means
quickly getting Opt instances, but there could be other types of interest as
well.

Let users control the important aspects of the help text: section ordering;
section titles; layout style (eg, compact 2-column or man-page); capitalization
rules; widths; conventions for showing default values; etc.

--------
standard-cli-grammar: Standard command-line grammar
--------

Typical rules of command-line grammar, as commonly understood in Unix tradition:

    - Options start with a prefix:

        --long
        -s

    - Options can take zero or more ordered parameters.

    - Positional arguments are ordered among each other:

        P1 P2 P3 ...

    - Options can be ordered in any way:

        --x4 --x1 --x3 --x2 ...

    - Options can be freely interspersed among the ordered positional arguments.

        --x3 P1 --x1 --x4 P2 --x2 P3 ...

    - Short options can be bundled:

        -x -y -z
        -xyz

    - Options can take their own arguments (or parameters). As this behavior
      becomes more flexible it deviates more from the traditional Unix-based
      approach.

        -x X1
        -y Y1 Y2
        -z Z1 Z2 ...

--------
cli-grammar-vs-regex: Command-line grammar vs. regex
--------

Although Optopus usage syntax borrows many concepts from regular expressions,
command-line grammar parsing is not readily amenable to handling via regex
parsing approaches.

Positionals are ordered among themselves, but options can appear in any order
(ignoring boundaries and anchors). That flexibility makes it not very intuitive
to convert a command-line grammar into a manageable regular expression. At
every stage, any of the options are possible. But then once an option appears,
it cannot appear again (ignoring repeatables). That means command-line parsing
is context-sensitive.

--------
subparsers-not-needed: Optopus does not need the subparser concept
--------

The subparser concept is much less powerful and less intuitive than the key
concept of a command-line grammar, along with the related ideas of (1) usage
variants, (2) groups of options, and (3) flexible destination assignment.

The universe of command-line programs could be broken down into a sizable
majority and two small minorities:

    - A sizable majority:
        - Does not need subparsers
        - Has a simple grammar (in the classic Unix tradition).

    - A small minority:
        - Aligns conceptually with the subparser concept.
        - But a command-line grammar supports this use case even better.

    - A small minority:
        - Does not align well with the subparser concept.
        - But forced by the limitations of current argument parsing libraries
          to use subparsers as a last resort.

--------
opt-action-not-needed: Optopus does not need the action concept
--------

Arguments can be configured in argparse with an 'action' parameter. The
parameter is a bit overloaded and misleading. It does control some actions (eg,
showing help text), but mostly it is used as a sometimes misnamed device for option type
and destination assignment.

    Action       | Option type       | Example         | Stored      | Notes
    ----------------------------------------------------------------------------------
    store_true   | One flag          | --frob          | True (N=1)  | .
    store_false  | One flag          | --frob          | False       | To override a True default
    count        | Repeatable flag   | -v -v           | N           | .
    store        | Single            | --foo F         | F           | .
    append       | Repeatable single | -x A -x B       | [A, B]      | Overwrite on repeat
    extend       | Repeatable multi  | -x A B -x C D E | [A B C D E] | .
    help         | High precedence   | .               |             | .
    version      | "    "            | .               | .           | .
    ----------------------------------------------------------------------------------
    store_const  | 1 flag            | --frob          | X           | Not necessary
    append_const | 1+ flag           | --frob --frob   | [X x]       | Not necessary

Notes:

    - To achieve argparse store_false:
        - The generalized case is a flag that stores some constant.
        - Default constant is True.
        - But user can define a convert function to store anything else.

    - Data storage to achieve argparse extend:
        - See parsed-data-structure

--------
explicit-var-input-syntax: Why explicit syntax is needed for variable inputs
--------

Imagine that the grammar did not require explicit surrouding markers for
parameters, positionals, and literal values: {}, <>, and ''. Every type of
confusion would be possible.

    frob --type x y z   # Meaning of x, y, z unclear.

Some ways to address that problem:

    - Minimize syntax burden. Require that literals be quoted (because rarely
      needed) and positionals use angle brackets (because it is conventional).

    - Enforce consistency: require all 3 types of markers (and because braces
      for params are also conventional).

    - Be creative: require that literals be quoted and give users a mechanism
      to disambiguate when needed. Probably a bad idea: these issues can be
      tricky to think through. Also, for non-standard grammars, a small bit of
      extra typing seems easy compared to having to reason about subleties.

--------
variable-input-spec: Spec for variable input
--------

The initial spec-syntax handled variable input like this:

    - Approach #1: incorrect.

        <dest>       | Positional
        --dest <sym> | Option with parameter

Then I switched to the following:

    - A sym represents the ultimate help-text.
    - Thus, names in the spec are better understood as syms, not dests.
    - A positional defaults to having the same name for its sym and dest.

    - Approach #2: also incorrect.

        <sym>        | Positional
        --dest <sym> | Option with parameter

But now I think the spec is symbolic names all the way down:

    - An option (formerly modeled as --dest) is just a thing with a symbolic
      name (--sym). And since everything is a syn/name, just use natural
      language (--name).

    - Approach #3:

        - Abstract (unlikely to ever be documented this way).

            <name>        | Positional
            --name <name> | Option with parameter

        - More intuitive description of the policy.

            <foo>        | Positional, with Opt.name=foo
            --bar <fubb> | Option, with Opt.name=bar and having Parameter.name=fubb

    - How this approach works with all entities having names:

        - Symbolic names in help-text:
            - Opt
            - Parameter
            - Group

        - Symbolic name in the spec/API:
            - Section
            - Variant

For a while, I considered a more elaborate var-input-spec that allowed the user
to configure name and dest independently.

    - But it seems not worth it.

        # Too complex.
        <dest.name>           | Positional
        --name <subdest.name> | Option with parameter

    - The most common use is with plural nargs:
        - Plural dest (eg paths).
        - Singular name (path).

    - But this is more naturally configured via the API.

    - In addition, the subdest concept is unneeded:
        - The purpose is to package up the positional/parameter values
          up into a different, object-like data structure.
        - The appropriate solution here is a user-provided convert function.

--------
groups-can-be-parameters: Options can have Groups as parameters
--------

The idea that options can have groups as parameters is a bit surpising:

    - Example:

        --point <x> (<y> <z>)...

        (1) A flag, a positional, and then a Group.
        (2) Or an option with two parameters: OptArg then Group.

        - The first intpretation is tempting, but incorrect.

    - That ambiguity is just a fancy version of a fundamental ambiguity that I
      have already worked out:

        - This is an option with two parameters:

            --point <x> <y>

        - A flag and two positionals looks like this:

            (--point) <x> <y>

        - Or like this:

            <x> <y> --point

    - Why? The usual greedy parsing logic.

        - Without a greedy policy, many ambiguities/complications arise.
        - Groups as parameters is just a logical extension of the core idea.

--------
opt-and-optarg-configuration: Configuration of Opt and OptArg
--------

The child elements of Opt:

    - Opt(POS):
        - All elems must be OptArg.

        - Example:

            <x> (<y> <z>)...

            - This is just three separate Opts, two inside a Group.

            <x> (<x> <x>)...

            - Same here, since we decided not to condense adjacent repetitions
              of the same Opt.

    - Opt(OPT):
        - In vast majority of cases, all children will be OptArgs.
        - But elems can also be Groups (due to greedy parsing policy):

            --foo (<x>{2} <y>){3}
            --point <x> (<y> <z>)...

Quantifiers for Opt and OptArg:

    - An Opt has both nargs and ntimes.

    - But an OptArg has only ntimes, since it represent a single argument,
      at least conceptually.

    - An example:

        (--point <x> <y> <z>...){1,4}

        Opt(point):
            ntimes = (1, 4)
            nargs = (3, 3)    # '<z>....' counts as 1 arg, not 1+.

        OptArg.ntimes:
            x: (1, 1)
            y: (1, 1)
            z: (1, None)      # <z> 1+ quantifier resides here.

Configuration independence among OptArgs:

    - An example:

        (--point <x> <y> <z>...){1,4}

    - The OptArg instances (x, y, z) can have different configurations.

    - But the following are clones:
        - The <x> <y> and <z> across the --point ntimes.
        - The <z> across its ntimes.

    - Key point:
        - Repetition across ntimes does not create configuration-independence.

Assignment of OptArg attributes via the parent-Opt:

    - In the vast majority of cases, users want to configure the OptArgs of an
      Opt in a consistent way.

        # Example: both X and Y should be positive integers.
        --point <x> <y>

    - But sometimes you want argument independence.

    - An example for the discussion:

        p = Parser('<x> [<y>] [-z <a> <b>]')

    - Configuration of regular OptArgs works like this:

        p.config('x', default = 888, convert = int)
        p.config('y', default = 0.0, convert = float)

    - Consider Opt(z) and its two OptArgs:

        - Mass-assignment: give all OptArg the same default.

            p.config('z', default = 9)

        - Specific-assignment: each OptArg gets its own default.

            p.config('z', default = [77, 88])

        - But what if the user wants to mass-assign a list?

            - For many OptArg attributes, Optopus can use data types to
              eliminate ambiguity.

                - Some attributes have a simple, strict type (str, callable).
                - Others have a compound, but strict type (list[str]).

            - Policy in the face of ambiguity:

                - Optopus will assume a list means specific-assignment.

                - Two ways to resolve:

                    - User can package the data differently so that
                      specific-assignment will work as desired:

                        # The desired default.
                        xs = [x1, x2]

                        # Achieves the effect of mass-assignment.
                        p.config('z', default = [xs, xs])

                    - Or the API a keyword to request mass-assignment.

                        - I currently lean in this direction.

                        p.config('z', default = xs, mass = True)

    - Ambiguity when Opt and OptArg have common attribute names:

        - Relevant OptArg attributes:
            - name: Opt.name (z) vs OptArg.name (a and b).
            - text: help text for Opt vs for a positional/parameter variant.

        - The user can make the query paths more specific:

            p.config('z', name = 'bar')   # Applies to parent Opt.

            p.config('z.a', name = 'z1')  # Applies to the child OptArgs.
            p.config('z.b', name = 'z2')

--------
help-related-options: High-related options, and high precedence
--------

Most options control the primary behaviors of a program. But some are special,
most notably those related to user help:

    --help
    --version
    --examples
    --demo

Argument parsing libraries often provide a convenient mechanism for --help and
sometimes --version, but rarely anything else. In addition, they tend to
provide such features in a way that is slightly misleading (at least in a
strict sense) and definitely not as convenient for users as it could be.

Consider a simple subcommand-style program. Assume that both <id> and the
parameter for -n should be integers and that the program has both general help
text and subcommand help text.

    demo [--help] [-n {}] (print|delete) <id>

At least by default, if the end-user supplies the --help option, an argument
parser should (1) print help text and exit, (2) select the help text that is
relevant given the other command-line arguments, and (3) ignore errors in the
other command-line arguments. Some examples of desired behavior:

    demo --help                # General help.
    demo --help delete         # Delete help.
    demo --help -n HI delete   # Same, in spite of invalid -n parameter.

Most argument parsers fail on #3 (they gripe instead of helping) and they do
not easily support #2.

Optopus addresses those problems with two mechanisms: high-precedence options
and flexible dispatching. If an option is configured to be high-precedence,
its presence among the command-line arguments will trigger whatever action it
has been configured to perform, and that dispatching configuration will take
precendence over error reporting. When high-precedence options are used, the
parser performs a best-effort parsing to collect as much contextual information
as it can before calling the code responsible taking action.

There are limits, of course. Some types of bad input can reduce the accuracy of
that best-effort parse. In this example, -Q in an unknown option and is treated
by default as a flag taking no parameters, which then means that HI is is
interpretted an invalid subcommand.

    demo --help -Q HI delete   # General help rather than delete help.

--------
help-text-formatting: Help text formatting
--------

Text wrapping and indentation:

    - Respect terminal widths, if known and within boundaries:

        min_width = 40
        max_width = 100

    - Allow users to adjust those parameters.

    - User-supplied text:

        - Break into paragraphs (but preserve info about N of blank lines
          between paragraphs).

        - Rewrap to the desired width (probably using textwrap module).

        - During wrapping, preserve the paragraphs original level of
          indentation (based on the first line).

        - Provide an easy syntax for users to suppress line wrapping
          within the text (eg something borrowed from markdown)

--------
spec-parsing-general-approach: Spec parsing: general approach
--------

Phase 1: input normalization:

    - Accept text and/or lines of text.
    - Join into a block of text.

Phase 2: lexing:

    - Remember that the lexer analyzes character by character to emit
      a flat streem of the meaningful atomic units of the language.

    - It does not engage in validation logic to assess whether the arrangement
      of those units is syntactically valid.

    - Nor does it try to assemble those character-based atoms into fully
      meaningful entitities, other than in cases where they must be assembled
      to avoid ambiguity with similar tokens.

Phase 3: parsing:

    - A parser's job is to eat a stream of tokens, organizing them into
      meaningful and valid units, and emitting those units to the caller.

    - Handlers should be substantive from the perspective of the language, not
      low level.

    - Because the tokens and handlers differs somewhat between the grammar
      section and other sections, the parsing needs to be stateful -- advancing
      to the section state at the first section-tile line after the grammar
      section.

Phase 4: assembly:

    - The parser phase is the most complex, so don't overburden it with the
      duty of creating the ultimate grammar elements.

    - Instead, keep the parser simpler by having it emit simple AST-style
      objects.

    - The last phase converts the AST to true grammar elements.

--------
arg-parsing-algo: Parsing algorithm
--------

Notation and terminology:

    - Purely notational concepts:

        Pos:         A positional Opt.
        MGroup:      A Group having mutex=True.
        Alternative: A Variant or MGroup.
        OPT:         When current arg looks like an Opt.
        POS:         When current arg looks like a Pos.

    - Parsing terms:

        - Alternatives: the Variants and MGroups determine how many
          alternatives we will try.

        - Interpretations: within an alternative, there can be multiple valid
          interpretations of the arguments -- specifically how they are
          allocated to Opts either as positionals or params.

        - Backtracking terms:

            - Current interpretation or parsing route: the interpretation you
              are currently on, based on a successful parse of the current arg.

            - Foregone interpretation: the interpretation that you could have
              selected, but did not -- so you push it to the stack before proceeding
              with the current interpretation.

Some key insights related to backtracking:

    - Parsing decisions that might require backtracking come from positional
      arguments or parameters, not options. Options, if present, are
      non-ambiguous: either they are known and allowed, or not.

    - Backtracking is needed when your current parsing route ends up attaching
      a param to an Opt or an argument to a Pos but then that route ultimately
      fails (on a later argument). You need to backtrack to check any foregone
      alternative interpretations of the input arguments.

    - Alternative interpretations are possible only for Opt with non-static
      nargs and/or non-static ntimes.

    - So pushing to the stack needs to happen when your parsing decision for
      the current argument creates a foregone alternative.

    - This occurs only for successful parsing of the current argument; never
      for errors.

    - Variants and MGroups also don't require a backtracking mechanism.

        - Rather, you want to process all of the alternatives in order, based
          on the Grammar. Each alternative either succeeds or fails. And you
          stop on the first success.

        - The best time to load the stack with these alternatives is before the
          while-stack loop begins. This will ensure that each alternative will
          be tried in order. Because we are using a stack, backtracking within
          any specific alternative (due to non-static nargs) will finish before
          the algorithm advances to a fresh alternative.

        - If you were to try to push foregone interpretations to the stack when
          an alternative fails, you interfere with the correct ordering of the
          alternatives. Perhaps even worse, it's not easy to know within the
          while-stack loop when an alternative has totally failed. Each
          iteration of the loop can be either starting a fresh alternative or
          exploring one of the different interpretations possible within the
          alternative.

A backtracking example:

    Grammar:
        Opt('-f', nargs = (1,3))
        Opt('x', nargs = (3,4))

    Input:
        -f V1 V2 V3 V4 V5

    Parsing logic:

        -f : Valid: attach it to Opt(-f).

        V1 : Attach to Opt(-f)

        V2 : Because Opt(-f) is greedy by default, attach. But
             this attachment is not required due to non-static
             nargs. Before pushing the new State where V2
             is attached to Opt(-f), we should push the foregone
             interpretation -- namely, where we restrict Opt(-f)
             to nargs of (1,1).

        V3 : Same logic: attach and push foregone interpretation.

        V4 : Attach to Opt(x).

        V5 : Same.

        -  : Now we're out of arguments and have not
             satisfied Opt(x). So this interpretation fails.
             The next State in the stack will restrict
             Opt(-f) to nargs of (2,2), which will succeed.

    Logic if Opt(-f) had been non-greedy.

        V2 : Don't attach to Opt(-f). Now the foregone interpretation
             is for Opt(-f) with nargs of (2,3). Push that
             to the stack.

State:

    - Data object to hold parsing state as the various interpretations from the
      grammar are being tried during the while-stack loop.

    - Attributes:

        ai: index of args.

        next_pos: next available Pos [or None].

        nps: nargs remaining for the active Opt [or None].
            ** Rename attribute to nas

        avail: map of available Opt to remaining ntimes [0 for exhausted].

        target: Target instance holding parsed data accumulated so far.

        err: error that terminated the current alterantive [or None].

        variant: name/id/index for the current variant; relevant for
        error selection/reporting, not parsing directly.

ArgResult:

    Data object to represent info need to capture the result-so-far
    for the parsing the current arg. Some likely attributes:

        err: data object holding error info
        opt: matched Opt
        val: converted value

    Notation used here:

        ArgResult(ERR: ...) | Current arg failed.
        ArgResult(OPT)      | Current arg matched OPT.
        ArgResult(PARAM)    | Current arg matched PARAM.
        ArgResult(POS)      | Current arg matched POS.
        ArgResult(UNKNOWN)  | For forge-ahead-mode or parse-known-mode.

How to handle Groups with non-static ntimes:

    - A Group can be optional overall (optional is one type of non-static), but
      have required elements if the Group is triggered by the presence of any
      of its elements. For example, if either -x or -y are present, both are
      needed.

        [ -x -y [-i] ]

    - When to handle such matters:

        - During parse. For example, when we see -x, then we would
          immediately adjust ntimes for -y.

        - After a successfull ArgResult. Before checking Opts for sufficient
          nargs and ntimes, we would first adjust those expectations based on
          any Groups that were activated by the presence of the Opts.

    - The latter, for two reasons:

        - Groups can alter quantifier expections. It makes sense to do all of
          that quantifier checking together.

        - More fundamentally, an optional Group can contain positionals and
          params. Like in the rest of the grammar, greedy is the default. That
          means positionals within optional Groups should be attached eagerly.
          It could get very messy trying to support some special logic just for
          optional Groups. The user has multiple ways to configure the grammar
          if the default greediness isn't desired.

Algorithm: setup:

    Stuff from the end-user or user:

        args = [...]

        P = Parser(...)
        G = P.grammar

    Initialize the stack that drives the algorithm. For every allowed combo of
    Variant and MGroup, add a State instance to represent the initial
    conditions of each alternative.

        # The stack of States.
        stack = [S1, S2, ...]
        stack = list(reversed(stack))

        # Every State examined and whether the entire parse is complete.
        history = []
        success = False

        # Parser-wide inventory of all known OPT.
        known_opts = G.get_all_options()

Algorithm: parsing loop:

    while stack and not success:

        # Prep.

        S = stack.pop()
        arg = args[S.ai]
        T = P.get_arg_type(arg)
        ares = ArgResult()

        # Check arg type.

        if T is OPT:

            # Handle aliases and fuzzy match.
            if arg not in S.avail:
                arg = P.fuzzy_match(arg)

            if arg not in known_opts:
                ares = ArgResult(ERR: globally unknown OPT)
            elif arg not in S.avail:
                ares = ArgResult(ERR: inapplicable OPT)
            elif S.nps is not None:
                ares = ArgResult(ERR: expected param but got OPT)
            elif S.avail[arg] == 0:
                ares = ArgResult(ERR: OPT occurred too many times)
            else:
                ares = ArgResult(OPT)

        else:
            if S.nps[arg]:
                ares = ArgResult(PARAM)
            elif S.next_pos is not None:
                ares = ArgResult(POS)
            else:
                ares = ArgResult(ERR: too many POS arguments)

        # Conversion and validation for PARAM and POS.

        if not ares.ERR and not ares.OPT:
            null = object()
            val = null
            ok = null
            err = None
            try:
                val = ares.opt.convert(arg)
                ok = ares.opt.validate(val)
            except (...) as e:
                ares.err = captured info about the error

            if ok is not True and (forge-ahead-mode or parse-known-mode):
                # Treat as success.
                ares.best_effort = True
                ares.val = arg
            elif val is null:
                ares = ArgResult(ERR: conversion raised an error)
            elif ok is null:
                ares = ArgResult(ERR: validation raised an error)
            elif ok is False:
                ares = ArgResult(ERR: validation returned False)
            else:
                # Success.
                ares.val = val

        # Handle less restrictive parsing modes.

        if ares.ERR and (forge-ahead-mode or parse-known-mode):
            ares = ArgResult(UNKNOWN)

        # Check for overall success if args exhausted.

        if ares.ERR is None and S.ai + 1 == len(args):

            - First check whether any Groups have been activated by the present
              Opts. If so, adjust expected ntimes accordingly.

            - Then check that all Opts have sufficient nargs, ntimes.

            if OK:
                success = True
            else:
                ares = ArgResult(ERR: insufficient ntimes/nargs)

        # Store history, push foregone, check overall success.

        if ares.ERR:
            # On error, just store the history.
            S.target.add(ares)
            history.append(S)

        else:

            # Check for foregone interpretation.
            # Not yet sure if we should perform these steps for ArgResult(UNKNOWN).
            if not success and (ares.PARAM or ares.POS):
                If either of these apply to the matched Opt:
                    - Non-static nargs.
                    - Non-static ntimes.
                Then:
                    S2 = new State to represent the foregone parsing route
                    stack.push(S2)

            # Store history.
            S.target.add(ares)
            history.append(S)

            # Create next parsing State.
            S1 = new State based on current parsing route
            stack.push(S1)

Algorithm: wrap up:

    if success:
        return history[-1].target

    else:
        - Examine history to find most relevant error.
        - Return or raise, depending on Parser configuration.

Post-parsing logic:

    target = self.do_parse(...)

    Load the data from target into a Result. Details will vary based on Parser
    configuration and parsing-mode.

--------
alternative-parsing-algo: Alternative parsing algorithm won't work after all
--------

The algorithm:

    - When parse() is called, there will be N command line arguments.
      Command-line use cases never have large N.

    - Using the parser configuration, assemble data on the aspects of the
      grammar that are not static. The most common non-static configurations:
      varying nargs or ntimes; variants; and alternatives.

    - For grammar elements that have no inherent boundaries (eg, an option
      taking 1+ params), interpret them in as bounded by using N as the upper
      limit.

    - Use all of that information to generate all static grammars that satisfy
      the actual grammar.

    - Check each static grammar against the command line arguments.

    - A successful parse finds exactly one successful static grammar.

What causes a grammar to generate multiple possibilities?

    .              | Where expressed | Note
    -----------------------------------------------------
    Varying nargs  | Opt             | .
    Varying ntimes | Opt or Phrase   | Includes required.
    Alternatives   | Phrase          | Includes variants.
    Aliases        | Opt             | .

Benefits of the algorithm:

    - This code seems easy to write:

        - The generation of static grammars seems like a manageable
          situation involving itertools.

        - Parsing a static grammar very simple: no backtracking required.

    - It provides a run-time guard for users against ambiguous grammars.

Three concerns:

    - The approach seems non-standard. A classic stack algorithm seems to suit
      the situation. And that code might not be any harder to write -- perhaps
      just a bit less familiar. Why reinvent the wheel? Make sure there's a
      good reason.

    - Modern operating systems and shells have very large limits on the max
      size of command lines and N of arguments. Why build a good argument
      parsing tool that would fail at moderate values for N -- especially
      when a linear algorithm is known?

    - There won't necessarily be only one successful parse of the static
      grammars, as noted in the discussion of ambiguous grammars. By using a
      greedy assignment policy the parser can ignore that matter. But regular
      expressions have a greedy concept precisely because without it there can
      be more than one successful parse of an input. [On further reflection,
      this point argues against expecting only one successful static grammar.
      But if you try the static grammars in the correct order, based on greedy
      policies in place, you can stop at the first success -- as regex does.]

--------
ambiguous-grammars: Ambiguous grammars are not an issue
--------

From a very strict perspective, only one positional can have a non-static nargs
or ntimes, because there isn't exactly one valid way to attach the values to
the destination attributes. A similar problem occurs when an option or
positional has non-static nargs. Two examples:

    <xray>...    <y>...
    --xray {}... <y>...

But that's not a problem, because Optopus can do what regular expression
engines do: greedy assignment by default, non-greedy by configuration.

--------
opt-choices-vs-choice: Opt.choices vs Opt.choice
--------

Early planning made a distinction:

    - Regular Opt: with choices:
    - Assumed to be purely a validation concern.

        <step=run|walk|fly>

    - Arg-variant: Opt with 1 choice.
    - A grammatical concern.

        <step=eat>

But that dichotomy is flawed:

    - Grammar via Opts with 1 choice:

        other! : [--foo] [--bar]

        <step=start> other!
        <step=stop> other!

    - Same grammar via Opt with 1+ choices:

        <step=start|stop> other!

    - Choices are both:
        - A mechanism to check for valid input.
        - A compact way to define alternatives.

--------
opt-independence: Opt independence, duplicate names/dest, and opt-spec scope
--------

How should Optopus handle repetitions of a name/dest within a spec?

    - The spec-syntax is very general/flexible.
    - Nothing in the syntax prevents a user from using the same name or dest
      across positionals, options, parameters, or even groups.

    - Notation:
        - Discussion will use "name" to represent name or dest.

    - Begin with several examples:

Examples: some theoretical edge cases:

    - These are not meant to be realistic.
    - Not easy to envision a good use case for many of them.
    - But they do sketch a broad range of possibilities.
    - They do not include name repetitions among group names.

    - Contiguous repetition;

        <x> <x> [<x>]               # Contiguous.
        -x [-x]

        -x -y -x                    # Noncontiguous.
        <x> <yy> <x>

    - Reuse across variants:

        foo : <x> [-y]              # Same configuration.
        bar : -z -y <x>

        foo : <x> [-y]              # Different configuration.
        bar : -z -y <x>...

        foo : <x> [-y]              # Different Opt kinds.
        bar : -z -y [-x]

    - Reuse across alternatives:

        (-x -y | -a -x -z | -q)     # Same configuration.

        (<x=A|B> | <x>{3})          # Different configuration.

        (-x | <x> <x>)              # Different Opt kinds.

    - Reuse within an alternative:

        <x> (<x>{2})...             # Different configuration.
        -x <x> <x>                  # Different kinds.

Example: a small and plausible sub-command program:

    - The --bar option needs different:
        - N of parameters.
        - Help-texts.
        - Maybe other stuff (convert, validate, etc).
    - The -x option needs different:
        - Help-texts.

    - The spec:

        <cmd=grep> [-i] [--bar <b>] [-x]
        <cmd=blort> [--bar <b1> <b2>] [-x]

        Searching ::

        [-i] : Ignore case
        [-b --bar <b>] : Bar parameter
        [-x] : Extended mode

        Blorting ::

        [--bar <b1> [<b2>]] : Bar parameter or range (inclusive)
        [-x] : Extended mode, with regex

    - How would Optopus know to connect the opt-specs to the correct Opts in
      the usage grammar?

        - Natural home for some likely configuration differences is the spec:
            - Help text.
            - Aliases.
            - The grammar within the Opt's arguments (as shown above).

            - So forcing users to rely on the API entirely for ambiguous
              situations seems inferior.

        - Optopus could make the connections via a default policy:
            - It could infer the --bar connections correctly,
              based on parameter differences.
            - Ditto if the Opts sharing a name were of different kinds.
            - But the -x flags differ only in help-text.
            - Optopus could use a fallback: connect Opts in order.

            - But forcing user to check/fix the connections via API seems awkward.

Examples: plausible separator-based grammars:

    - EX_NAB
    - EX_NECK_DIAG

    - These illustrate why Opt independence within the same variant is
      sometimes needed:

        - I considered disallowing name reuse within variants.

        - But a separator-based grammar needs a single main variant:
            - Where the subcommands can be used in sequence.
            - The sequence can even include repetitions of the same subcommand.

        - Subcommands are likely to need Opts having the same name:
            - Often with same configuration across Opts sharing a name.
            - But not always.
            - Especially in help-text and aliases.

Example: arg-variants:

    - This type of example was overlooked in prior planning.
    - Similar example: Optopus naval-fate.

    <action=pitch> <action=balk|stop> [--foo]
    <action=catch> [--bar] [--foo]

    - Two key points:

        - Unifying the <action> Opts is compelling:
            - So Parser knows choices and can provide helpful error messages.

        - An arg-variant can be repeated within one variant.
            - When that occurs the Opt.choices are trickier.
                - pitch|catch
                - balk|stop

Key issues:

    - Validity of name repetition:

        - Should Optopus disallow repetitions? If so, how widely:

        - Across entire spec.
        - Within a variant.
        - Within a the innnermost enclosing-entity:
            - Alternative
            - Group
            - Variant.

    - Opt unification/consolidation:

        - Should each Opt implied by spec be distinct?
        - Strict Opt independence.

        - Should Optopus consolidate Opts having the same name/config?
        - Limited Opt independence.

Policy decisions:

    - Opt independence:
        - This is the governing approach.
        - Create a distinct Opt for each entity implied by the spec.

    - But with an important exception:
        - Opts having choice(s).
        - These will be unified under the shared name.

    - Connection opt-spec configurations to Opts from the variants:

        - An opt-spec will be connected to all Opts in the grammar having
          compatible configurations.

        - Because Opts declared in the grammar can be opt-mentions, the
          compatibility requirements are basic:

            - The intuitive parts:
                - Same name.
                - Same kind: positional or option.
                - Agreement with the spec-scope (if any).

            - The deeper principle:
                - The configuration from the opt-spec must be additive.
                - It cannot replace or contradict any configuration information
                  from the opt declared in the grammar.

            - Any opts from the grammar that "match" the configuration from an
              opt-spec (in the ways just described) will receive the additional
              configuration from the opt-spec.

            - If no opts match, Optopus will raise.

    - Spec-scopes to disambiguate, via this syntax:

        PARENT >> CHILD

        Where PARENT is a path, as used in Parser.query().

        And CHILD can be:
            - opt-spec
            - section-title (governs all opt-specs in the section)

Discussion of the policy across various domains:

    - Why consolidation of contiguous repetitions is a bad idea:

        - Optopus could consolidate contiguous repetitions.
        - Provided that they had the same configuration.

        - But consolidation seems tricky to implement:
            - You do not know if the configurations for a repeated name
              are truly the same until the very end.
            - After full spec is parsed.
            - After all API configuration is done.

        - Consolidation also loses information:
            - How the user wants the usage text to look.

    - Why name uniqueness is not needed in the Grammar:
        - A Grammar is just a list[Group or Opt].
        - The name and dest are not quique IDs.
        - So no problems are caused by repetition.

    - Why Opt independence works fine with API configuration:

        - A policy of Opt independence might create Opt clones:
            - Opts with same name.
            - With same configuration.
            - That the user intends to be the same entity.

        - But that is not a problem:
            - The same API call can configure one Opt or a bunch of clone Opts.
            - The user does not care whether the underlying Opts are
              independent or consolidated.

        - Yes, the user can define a weird spec that might make querying
          for individual Opts inconvenient.
            - But that is readily fixed via a more sensible configuration.
            - Worst case, user can query via indexes.
            - Or winnow down via subqueries.

    - Why name uniqueness is not needed by argument parsing:

        - Parsing involves putting arguments in viable slots.
        - No deep problems are caused by slots having same name.
        - Or by slots accepting the same kinds of things.

    - Arg-variants and error messages:

        - Opts with choices will be unified if they share a name.
        - For some edge-case usages, Opt.choices will be too broad.

        - That is an acceptable cost in those situations:
            - Yes, the error message will list too many choices.
            - But the alternative is worse:
                - Do not unify the Opts.
                - Such error messages would list only one choice!
            - Real solution a more sensible spec from the user.

        - Better to keep arg-parsing simpler.
            - At the moment of invalid input, get the valid choices from the
              unified Opt.
            - Implemented a correct listing of choices would require also
              storing a subset of choices in the OptArg.
            - Which might be too awkward.

    - Consolidation necessarily occurs during Result creation:

        - This is where unification by dest occurs.
        - Consider Opts with different types:

            -x <x>{2}

        - This causes no technical problem:
            - Just wrap the data in an outer list.
            - One element per dest repetition.

            Result.x = [bool, [x1, x2]]

        - That data is narrowly correct (and awkward).
        - User can configure more sensibly if they do not like it.

Background for the spec-scope syntax:

    - It borrows from CSS syntax for parent-child.

        PARENT > CHILD

    - Why double the marker?

        - Optopus parent-child differs from CSS:

            - CSS: marker means direct parent-child.
            - Optopus: marker means any hierarchical nesting:
                - parent to child
                - any grandparent to child

        - The single > marker looks too much like a var-input:

            <foo>  # A var-input.
            foo >  # Opt-spec scope or a var-input typo?
            foo>   # Ditto, but even more likely to confuse.

    - I discussed the syntax with ChatGPT and got an impressive answer.

        https://chatgpt.com/share/67e1c05f-f654-8003-9c07-c556cea6c368

--------
parsed-data-structure: Parsed data structuring: nargs, ntimes
--------

The meaning of nargs and ntimes:

    nargs  : N arguments (for positionals) or parameters (for options).
    ntimes : Governs only optionality and repetition via {m,n} or its shortcuts.

    Options:                    #  nargs   ntimes

        -y                      #  0        (1,1)
        [-y]                    #  0        (0,1)
        [-y {} {}]              #  2        (0,1)
        -y {} [{}]              #  (1,2)    (1,1)
        -y {}{3}                #  3        (1,1)

    Positionals:                #  nargs    ntimes

        <x>                     #  1        (1,1)
        [<x>]                   #  1        (0,1)
        (<x>{4}){0,2}           #  4        (0,2)

Internally, all data assigned to destinations will be stored in a fully
explicit manner. Assume a list of lists, where:

    Opt attribute | Determines length of
    ------------------------------------
    nargs         | inner list
    ntimes        | outer list

    - Singular nargs and ntimes:

        a1     # Either value or bool (latter if nargs is zero).

    - Plural nargs:

        [a1, a2, ...]

    - With plural ntimes:

        (<z>{2}){3}

        [[a1, a2], ..., ...]

    - With a layer of nested plural ntimes (and no Group.dest):

        (
            --foo <> <>
            (<z>{2}){3}
        ){4}

        foo: nargs   2, ntimes     4
        z  : nargs   2, ntimes 3 x 4

        foo = [
            [a1, a2],                # One group of data.
            ...,
            ...,
            ...,
        ]

        z = [
            [[a1, a2], ..., ...],    # Ditto.
            ...,
            ...,
            ...,
        ]

        - Each line for foo and z (above) hold data from one Group repetition.
        - Since the Group is anonymous (no dest), the groups must
          be shoved into the Opt dests.
        - If the Group had a dest, it would store ntimes=4 inner Results.

Flattening policy:

    - If an Opt does not have both plural nargs and plural ntimes, its data
      will be flattened by default, as shown in the table.

    - User can request non-flattened data or flattened data to reverse the
      usual defaults (marked with ** in the two columns for 2+ ntimes).

    nargs | ntimes 0,1 | ntimes 2+ (flat)    | ntimes 2+ (non-flat)
    ---------------------------------------------------------------
    0     | bool       | [bool, ...] **      | [[bool], ...]
    1     | a1         | [a1, ...] **        | [[a1], ...]
    2+    | [a1, ...]  | [a1, ..., ..., ...] | [[a1, ...], ...] **

Duplicate dests within a Result:

    - Users can define specs with non-unique dests. An extreme example:

        <x>... [-x] <x> [-x <x>{2}]

    - In such cases, Optopus will add another outer list to the structures
      documented in the table above.

        opts.x = [
            [X, ...], # <x>...
            bool,     # -x
            X         # <x>
            [X, X]    # -x <x>{2}
        ]

--------
eager-attachment-at-bounary: Eager option attachment at repetition boundaries
--------

In the following example, the -z option will bind eagerly to the repeated
triplets of positionals.

    Grammar       : cmds=(<a> <b> <c> [-z]){2,7}
    Example input : A1 B1 C1 -z A2 B2 C2
    Result        : opts.cmds[0] = Result(a=A1, b=B1, c=C1, z=True)

That policy is consistent with greedy parsing elsewhere.

--------
spec-syntax-named-unnamed: Spec-syntax: named and unnamed arguments
--------

Positionals must be named:

    frob <a> <b> [<c>]

Option arguments can be named or unnamed:

                                        # opts.mode:
    frob --mode {group} {name} {n}      # - Data object with attributes.
    frob --mode {} {} {}                # - List.

--------
variants-needed: Variants: why they are needed
--------

Are variants needed give that the spec-syntax already has support for
alternatives? Yes: they provide several benefits, even if one could do without
them, strictly speaking.

Partial variants are a useful device to express some grammars more
conveniently.

Usage variants are a good mechanism for the user to help Optopus generate more
readable usage text and more relevant portions of it in response to errors.

Variants can provide a low-config mechanism for subcommand-style programs to
provide subcommand help text.

Variants have been a useful concept, and their names convenient handles, when
thinking about and planning this project. That utility might come in handy
later.

So one might think of the following related concepts, from most general
to most specific:

    Group           # Any grouping of grammar elements.
    Alternative     # A grouping where the end-user should choose one.
    Variant         # An alternative that strongly affects usage text.

--------
general-name-assignment: General name assignment: needed after all
--------

Optopus does need general destination assignment. At a minimum, it needs that
feature not just for Opt, but also for partial variants. And once you go that
far, you might as well generalize it.

Consider examples like neck-diagram (EX_NECK_DIAG; also EX_NAB). With
destination assignment for the outer group, the specific Opt destinations (cmd,
snum, syms, etc) will be nested underneath the 'commands' namespace:

    opts.commands = [
        Result(cmd = 'snum', snum = 6),
        Result(cmd = 'tuning', notes = ('E', 'A', ...)),
        Result(cmd = 'fret', syms = ('1', '3', '5')),
        ...
    ]

Without that outer assignment, the returned data would be grouped by the Opt
destination names -- which badly jumbles everything up:

    opts = Namespace(
        cmd   : ['snum, 'tuning', 'fnum', 'fret', 'fret', ...]
        snum  : ['6']
        fnum  : ['5']
        notes : [[...]]
        syms  : [[...], [...], ]
    )

--------
spec-syntax-complexity: Spec-syntax: is it too complex?
--------

To evaluate the question, I focused on the least intuitive aspect of the syntax
and compared it against the API-driven alternative:

Alternatives:

    - This is an easy call: syntax is intuitive and API usage for this
      situation is annoying.

    - This is a strong example of the superiority of spec-syntax for grammar
      configuration relative to API.

Quantifiers:

    - The ... is intuitive and practically a convention.

    - The {m,n} syntax directly mimics regex and is also quite intutive.

General name assignment:

    - This feature is powerful: it allows grammar variation when
      a positional or parameter takes a specific value.

    - Configuring such matters via the API requires the user to understand how
      the library works a bit too closely.

Partial variants:

    - API usage would require the user make multiple configurations to mark a
      variant as partial and then insert it wherever needed.

    - The partial syntax isn't heavy; in fact, it's moderately intuitve and
      without it, the spec-syntax might even be a bit less immediately
      understandable.

Zones and anchoring:

    - Decisions:
        - Infrequent use case.
        - Easy to handle via API.
        - Drop from spec-syntax.
        - Also see zones-not-needed

    - I suspect the desire for zones and anchoring is moderately low but still
      more than nothing.

    - Also, configuring these parameters via the API is simple to understand
      and requires little code.

    - While the zone syntax not too obtrusive, and it is a mixture of intuitive
      (zone markers) and not very intuitive (anchor markers)

    - Another question: is the zone concept needed, or could Group do the same
      thing? I increasingly think the latter.

High precedence:

    - Setting this attribute is easy in the API.

    - Although the syntax is not heavy, it's also not fully intuitive.

    - The majority of use cases will get the built-in help behavior, and the
      library could interpret --help and --version options as high precedence
      by default.

    - Infrequent use case, easy via the API: let's drop it from spec-syntax.

--------
optional-positional-placement: Optional positionals before required are not a problem
--------

One might be concerned about Grammars containing optional positionals before
required ones. For example:

    [<m>] <x> <y>

But this is not a problem if we adhere consistently to greedy policy. If the
user wants positionals attached to <x> and <y> before <m>, they can express the
grammar differently.

--------
parsing-modes: Parsing modes
--------

Argparse background:

    - The argparse library has these modes:

        Allow unknown | Default-style      | Intermixed-style
        ------------------------------------------------------------------
        No            | parse_args()       | parse_intermixed_args()
        Yes           | parse_known_args() | parse_known_intermixed_args()

    - The methods allowing unknown arguments return a 2-tuple rather than
      a single Result, which is a bit inconvenient.

    - The default argparse style is overly restrictive.
    - Greedy parsing already support intermixed-style.

Optopus approach:

    - Regular-parsing vs noconfig-parsing:
        - Determined by whether the user supplies a spec/grammar.
        - Parser():
            - spec: regular parsing
            - grammar: same, via API
            - nargs: noconfig-parsing with global nargs

    - Allow unknown arguments:
        - Done during the parse() call.
        - User tells where to store the unknown arguments.

        opts = p.parse(ARGS, unknown = DEST)

Additional notes on noconfig-parsing:

    - As elsewhere, Optopus will use a greedy policy.

    - Positionals are not very relevant for no-config use cases:
        - They will be stored in one generic bucket.
        - The end-user can put them after the double-hyphen.
        - Other input will be options and parameters.

    - As a result, no ambiguous boundary questions arise and the end-user can
      control how parameters bind to options via their arrangement of
      arguments.

    - Optionally, the user can restrict such parameter binding by declaring a
      specific Quantifier as a global nargs.

Rejected features:

    - I consider supporting other ways to relax parsing
      beyond allowing unknown arguments.

    - For example, the user could allow invalid arguments (those that fail
      validation) or unconverted arguments (those that fail to convert).

    - These use cases do not seem compelling (and they might be a bit fraught).

--------
zones-not-needed: Zones not needed
--------

Problems with zones:
    - Concept was not useful in planning work.
    - A zone has no independent purpose: purely to support anchors.

Simpler approach:
    - Just use Groups.
    - Allow Opts to be anchored within them.
    - Handle that via API.

--------
help-distpatching: Help distpatching
--------

__HERE1__

Optopus aims to support behavior like this:

    frob --help              # Print general help.
    frob configure --help    # Print help for the configure task.

How does the user configure this help dispatching. More generally, what about
supporting other help-printing scenarios that rely not on --help but on some
other options: for example, I've had programs where I want --examples to print
some usage examples for the end-user.

    - Simple use case: standard help feature for a command-line program.

        p = Parser(help = True|False)

    - Help hook: any time the library's help feature is triggered, call the
      user's function with some params and let them return something to tell
      the library which help section(s) to print, if any.

        p = Parser(help = CALLABLE)

    - That approach is flexible for the general case, but it does not speak to
      the most common type of complex use case (a program with subcommands,
      where the subcommands and help sections have a 1:1 correspondence). Some
      additional conveniences to support dispatching based on subcommands --
      or, more correctly, based on the value taken by a specific Opt.

        # For 1:1 correspondence between help sections and Opt values.
        o = Opt('task', help = 'sections')

        # For more flexibility, supply mapping from Opt value to section name.
        o = Opt('task', help = DICT)

--------
dispatch: Dispatch
--------

ISSUES:

    - Under what conditions does a dispatch function get called?

        - Dispatch always.
            - Is this even helpful?
            - The user could easily call the function themselves.

        - Dispatch if Opt is supplied.
            - I think this is the right approach.

        - Dispatch if Opt is supplied and non-required.
            - Seems a bit subtle.

    - Can I come up with a dispatching plan that seems simpler that
      roll-your-own?

        - I have *never* found dispatching to be a difficult or annoying part
          of writing scripts.

        - Several easy approaches are readily at hand, and I usually pick the one
          that fits the script's grammar best.

            - Ordinary script with some special flags:
                - Basic conditional logic for the special flags.
                - Quite often the flags lead to early program exits.
                - Then just get down to business.

            - Situations where dispatch is driven by the value given for a
              primary Opt (eg, subcommand-style script).
                - Use a dispatch dict.
                - Use code to get the right callable via its name:
                    - gettattr() if functions are in a class or module.
                    - globals() if they are at the top-level in a script.

            - Situations where multiple functions are called (eg, steps).
                - Very similar the to previous situation.
                - But you are just calling a function for each of an Opt's
                  plural nargs.

            - I have rarely needed anything fancier than that.

        - Relative to those basic approaches, can I design an API that is
          simpler?

            - Any plan requiring heavy API knowledge is bad.
            - Users do not write scripts frequently enough to master the API.
            - They end up having to look it up every time.

        - Remember that it does not make sense to compare the Optopus
          ease-of-dispatch to that of Click.

            - Click makes dispatch easier/semiautomatic because it forces you
              to configure your parser at the functions themselves.

            - But that approach comes with costs and drawbacks I find
              unacceptable.

            - For Optopus the relevant comparison is between a proposed API for
              dispatch and the roll-your-own alternatives.

    - How does the user control dispatching order?

        - Under a very simple model where you just link callables to Opts,
          how does the user convey calling order?

        - In most scripts I have written the order is critical.

        - That suggests that Opt-level configuration is either a poor fit or
          insufficient on its own.

Dispatching is probably can be pretty simple: tie one or more callables to
Variants, Opts, or even Groups (hard to think of many use cases for the latter,
but it is probably easy to support).

The argument passing details are important. Not everyone wants opts to be
passed everywhere. In other notes, I planned to have dispatch functions called
with three arguments.

    # I suspect that this plan is not good.

    VAL | Value for the Opt
    OPT | Opt triggering the call
    RES | Result from Parser.parse()

Dispatch occurs after argument parsing and validation. At that point, it is not
clear why the dispatch function needs VAL and OPT. Nor does it seem like users
want all of their dispatch functions tied to a rigid signature (eg, always
passing RES everywhere).

What might users want to pass to dispatch calls?

    - The parsed Result (which does not exist at config-time).
    - Other objects (eg lib).
    - One or more Result.DEST values, perhaps as kwargs.

Example API usages:

    - The example is based on my pocket script, which could be reframed with
      usage variants such as experiment, interactive, and rebuild.

    - The imported RES is a simple configuration object to tell Optopus
      to pass the parsed Result to the dispatch function.

    - The RES.foo examples mean to pass the value of Result.foo.

    - And the dispatcher() function returns a configured object telling Optopus
      which args/kwargs to pass to the function. Its signature is 1+ callables
      plus kwargs.

        from optopus import Parser, RES, dispatcher

        # Load the Pocket library and configure the Parser.
        lib = ...
        p = Parser(...)

        # Some dispatchers.
        de = dispatcher(experiment)
        di = dispatcher(do_interactive, lib, RES)
        dr = dispatcher(rebuild_library, limit = RES.limit, progress = RES.progress)

        # Tie those dispatchers to usage variants.
        p.config('experiment', dispatch = de)
        p.config('interactive', dispatch = di)
        p.config('rebuild', dispatch = dr)

That example illustrates one way to achieve a fairly generalized support for
dispatching. A simpler usage form might also be nice -- namely, either a single
callable or a sequence of callables. In this case they are simply passed the
parsed Result.

    p.config('foo', dispatch = f)
    p.config('foo', dispatch = (g, h))

Also worth considering whether it makes any sense to tie dispatching to
positional and parameter variants. For example:

    p.config('task=experiment', dispatch = de)
    p.config('task=interactive', dispatch = di)
    p.config('task=rebuild', dispatch = dr)

--------
argparse-and-greed: argparse and greediness
--------

The argparse library does attach arguments greedily, but it makes no attempt
to backtrack. An example:

    Grammar:

        -z {}... <y> <y>

    Example input:

        -z A B C D E F

    Behavior:

        - Attach everything to -z.
        - Raise error because <y> not given.

--------
end-user-errors: End-user errors
--------

The problem:

    - Each Parser.parse(args) call will generate up to N failures, one per
      interpretation.

    - Ideally, we would report the error most aligned with end-user intent.

    - How do we select the error to report?

Initial ideas for mechanisms to select the most relevant error:

    - Error type, under the theory that some errors are more likely to
      convey intent about which alternative was (or was not) intended.

    - Percentage of input args matched, under regular parsing or
      perhaps forge-ahead parsing.

    - Percentage of available options present in the arguments, under the
      theory that the presence of options is one of the more telling indicators
      of intent. This metric is fairly easy to compute (a frequency distribution
      of options present).

Inferring intent from error types is tempting but not always so powerful:

    - Globally unknown options are an easy case: always select this error,
      because it's true under any interpretation.

    - One might think that an inapplicable option conveys that the current
      interpretation was not intended. But it's easy to create
      counter-examples: for example, a large N of arguments that work perfectly
      for the current interpretation, but the end-user inadvertently included
      an option for a different variant as the first argument (maybe when
      editing a prior command from shell history).

    - Invalid values might seem like an indication the current interpretation
      was intended, under the theory that the args were allocated to a slot but
      just failed in the details. But to know that with any confidence you need
      forge-ahead parsing.

The resolution is to consider how other parsers behave:

    - They always try to consume as much of the input as possible. This
      suggests that the first criterion for error-selection is to maximize S.ai.

    - Multiple interpretations can fail with the same S.ai. To resolve ties,
      consider how errors can occur (consuming an OPT, consuming a POS, or
      during final checks). For each of those cases, the error-reporting
      precedence is fairly clear-cut [listed below].

    - To resolve ties, report the error associated with the earliest
      alternative, based on the grammar.

Types of errors in precedence order, by failure source:

    - Trying to consume an OPT:

        - Globally unknown option.

        - Inapplicable option for current alternative (but known to grammar).

    - Trying to consume a POS:

        - Conversion/validation problems: params.

        - Conversion/validation problems: positionals.

        - Excess arguments.

    - Making final checks:

        - Insufficient ntimes: option.

        - Insufficient ntimes: positional.

        - Insufficient nargs.

--------
converters-validators: Converters and validators
--------

** Does the discussion in the dispatch section [above] cause me
   to rethink the approach here -- specifically for validators.

Function signatures:

    Function  | Signature
    -----------------------------------------------
    Converter | STR            => OBJ/raise
    Validator | VAL, OPT, RES  => True/False/raise
    Dispatch  | VAL, OPT, RES  => None                # No. See dispatch section [above].

--------
grammar-querying-api: Grammar querying API
--------

Grammary querying API

    - Because the Grammar can be a tree structure, the API needs good syntax to
      query for grammar elements, both for configuration needs (including the
      ability to perform bulk configurations) and for complex validations.

    - Possible approach:

        g.get(NAME, NAME, ...)          # Get one, dive-style.
        g.get(NAME, [NAME, ...], ...)   # Get multiple.

--------
validation-notes: Validation notes
--------

What to validate:

    - Only user-facing code: the entry points.

    - Let internal code blow up if given bad input.

Consider using a library:

    - valid8 is interesting but seems a bit over-engineered.

    - Its docs point to other tools that could have interesting ideas.

If not a library, consider implementing a simple validation module for the
project:

    - Some of the libraries I saw treated the process very formally, with a
      large API to learn.

    - A simpler approach seems better.

        validate(
            value,      # Value to check.
            convert,    # Callable: value => converted-value
            validate,   # Callable: converted-value => bool
            error,      # Error to raise.
        )

Where should validation logic reside?

    - Option 1: near the call site, so that you do not have to look elsewhere
      to understand the function.

        - Using decorator. Validation library writers seem attracted to this
          approach, but I don't see the appeal. It does not save any typing,
          and I find decorators with a lot of content to be awkward looking --
          aesthetically unappealing.

            @validate(
                x = (
                    int,
                    lambda x: x in range(1,11),
                    'x parameter must be interger 1 through 10: {val}',
                ),
                y = (...),
                z = (...),
            )
            def bar(x, y, z):
                ...

        - Or just using an ordinary function:

            def bar(x, y, z):
                validate(
                    x,
                    int,
                    lambda x: x in range(1,11),
                    'x parameter must be interger 1 through 10: {val}',
                )
                validate(y, ...)
                validate(z, ...)
                ...

    - Option 2: put validation logic a separate module, consolidating such
      details in one location. Let readers focus on the happy-path substance of
      the function, not the grubby validation logic, exception raising, etc.
      That code is mostly formulaic anyway -- stick it in the footnotes.

            # Main code.

            @validate
            def bar(x, y, z):
                ...

            # Validation module:

            register_validators(
                bar = (
                    x,
                    int,
                    lambda x: x in range(1,11),
                    'x parameter must be interger 1 through 10: {val}',
                ),
                ...
            )

        Under this approach, you want the validators to be composable, with the
        ability to define a bigger validator using smaller validators.
        And such compositions may need some helpers:

            validate_all()

--------
strategy-reassessment: Reassess the strategy
--------

After further reflection and looking again at the various job-client* example
scripts, I realize I underestimated the power of the text-based configuration
syntax.

    - It's true that I did find writing the literal help text tedious. I also
      dislike the idea that it will lack dynamic formatting behavior.

    - However, the API based configuration is very ineffecient and repetitive
      compared to the brevity, clarity, and intutiveness of the text approach.

    - Perhaps the right path, again, is to used text-driven configuration, but
      as syntax, not literal help text.

Consider which parts of the ultimate help text must be typed directly by the
programmer:

    - Option or argument names.
    - Help text for each option/argument.
    - Metavars.
    - Aliases.
    - Section names.
    - Choice values (if simple strings).

The simplest, clearest way to write that material is as a block of options
text. Lines likes these cover all of those bases:

    General::
    --job-id -j ID    : The job id.
    --od-user -u USER : Open Directory user who submitted the job.

The only other configurations are (a) syntax for complex grammars, and (b)
stuff well handled by the API (defaults, types, conversion, validation,
dispatch, sometimes choices, etc).

And this text-centric approach is flexible in allowing a variety of
usage patterns:

    - It can be treated as literal options text, for those who prefer that
      approach. Essentialy, Optopus will support a Docopt mode.

    - But treating it as configuration syntax will be easier for many who (1)
      don't want to have to lay everything out precisely and (2) especially
      don't want to have to define a usage grammar even for programs with
      standard command-line needs. If the API approach is ineffecient
      generally, the literal-text approach is ineffecient in requiring a usage
      grammar every time (as docopt does).

The write-up will need to be reframed to emphasize the debt to the text-based
argument parsers and to criticize the API approach for being so inefficient. In
the writeup place greater emphasis on some practical examples illustrating the
superiority of the text-based approach over argparse.

--------
spec-syntax-revisited: Spec-syntax revisited
--------

Enhance spec syntax increase its power, reducing user hassle:

    - Program name.
    - Options text, optionally with section titles.
    - Opt symbols.
    - Regular text.

Simplify and unify the syntax:

    - Ensure that Optopus supports the full spectrum of usages, ranging from
      quick-and-dirty to complex.

    - Prioritize ease of use for the simplest cases.

        - Program name optional.
        - Variant names optional.
        - Section headings optional.

    - Minimize baroque syntax elements:

        - Reduce special punctuation when possible.
        - Meaningful whitespace is more intuitive that odd punctuation.
        - Make surviving punctuation as unified/congruous as possible.

Use angle brackets for all variable end-user inputs:

    - See variable-end-user-input.

Punctuation markers:

    - Summary of plan:

        Situation       | Marker       | When required
        -------------------------------------------------
        Grammar section | Double colon | If variant(s)
        Other sections  | Double colon | Always
        Opt-spec        | Colon        | If help text
        Variant         | Colon        | If named

    - Sections:

        - The grammar section:

            - Must appear first in the spec. If user wants a different section
              ordering: define the sections in the spec; use API to move
              sections as needed.

            - No regular text.

            - Default title is `Usage`, configurable only via API.

        - The grammar section, regardless of form, can be followed by zero or
          more other sections that:

            - Must use marker.
            - Can omit a title.
            - Can define opt-spec lines.
            - Can include regular text.

            - If a line parses as opt-spec, it will be interpreted that way
              (unless quoting is used).

        - What if the user does not want a trailing colon on section titles?

            - Let them adjust via the API.

    - opt-spec:

        - Supported Opt grammar subset:

            sym
            dest
            nargs
            ntimes
            choices
            aliases
            text

        - Note that opt-spec uses a grammar subset, not an alternative grammar:

            - This means, for example, that options are not assumed
              to be optional: square brackets required if intended.

        - Note that opt-spec lines can be confused with unnamed variants. The
          issue is fundamental, not really addressable via extended peeks or
          other fancy parsing. For example, does this spec define 3 variants or
          3 bare-bones opt-spec lines?

            pgrep
            <rgx>
            --ignore-case -i
            --invert-match -v

            - Ultimately, I decided to rely on a greedy parsing policy to
              address this potential ambiguity.

                - The ambiguous examples are not compelling use cases.
                - In first section, first look for variants.
                - If user is unhappy with the parser, the configuration problem
                  is easily noticed and easily fixed (add a trailing colon to
                  the first lines that should be treated as opt-spec rather
                  than variant).

        - The most common use case is to derive grammar from 1+ opt-spec
          sections. It works well for many standard grammar needs, and opt-spec
          is more featureful than variant (because it supports aliases and
          help text). So the no-variant use case should have the least hassle.

Dest, sym, and values:

    - Examples without choices:

        Example                 | Usage text            | Dest
        ------------------------------------------------------------------
        <paths>...              | <paths>...            | paths
        <path.paths>...         | <path>...             | paths
        <PATH!paths>...         | PATH...               | paths
        ------------------------------------------------------------------
        --strategy <s>          | --strategy <s>        | strategy
        --elems <e> <e> [<e>]   | --elems <e> <e> [<e>] | elems
        --point <row.x> <COL!y> | --point <row> COL     | point.x, point.y
        --point <.x> <.y>       | --point <p> <p>       | point.x, point.y
        --point <> <>           | --point <p> <p>       | point
        ------------------------------------------------------------------

    - Examples involving choices and positional/parameter variants:

        Example               || Usage text        || Dest
        --------------------------------------------------------------------
        <mode=fast|slow>      || <fast|slow>       || mode
        <mode=fast>           || fast              || mode
        <MODE.mode=fast|slow> || mode              || mode
        <MODE!mode=fast|slow> || MODE              || mode

--------
spec-as-format-string: Spec as a format string not needed
--------

Initially I thought it would be useful to allow the spec to function as a
format string.

But if the format() call occurs early (before spec parsing), there is no
purpose served: the user could just call format() to create the spec in the
first place.

There might be a use case for calling format() after parsing has derived
grammar and opt-spec metadata.

    - Presumably the purpose would be to insert material into help text that is
      more under the domain of Optopus than the user.

    - Another possible use case is to call format() after end-user
      arguments are parsed -- eg, in response to error.

    - Defer this until a use case is known.

--------
var-input-representation: Representing var-inputs in spec-syntax
--------

There are four common styles for representing variable end-user input, along
with some differences in details for specific implementations, especially as it
relates to choices:

    Style     | Parameters  | Positionals | Choices | Examples
    ----------------------------------------------------------------------------
    Angle     | <>          | <>          | {}      | git, picocli
    Sensitive | UPPER       | lower       | {}      | argparse, many Python/Ruby
    Lower     | lower       | lower       | () []   | POSIX, many Unix utilities
    Upper     | UPPER       | UPPER       | () [] ? | rsync
    ----------------------------------------------------------------------------
    Docopt    | <> or UPPER | <>          | () [] ? | .
    Optopus   | <>          | <>          | <>      | .

    - Unclear how docopt and rsync handle choices, but I think they use
      parens/brackets.

Upper and lower styles: easily rejected:

    - They work poorly for positional variants and parameter variants.

    - Usage text is ambiguous: we cannot distinguish merge/delete (literal
      values for positional variants) from path (variable input).

        frob [-f] merge [-x] [-y] path
        frob [-f] delete [-z] path

Sensitive style: better but not fully robust:

    - It handles most situations:

        frob [-f] merge [-x] [-y] PATH
        frob [-f] delete [-z] PATH

    - And the Python/Ruby community is accustomed to it.

    - It does fail if the variant values need to be uppercase. Some type of
      quoting or other syntactic workaround would be needed:

        frob [-f] `MERGE` [-x] [-y] PATH
        frob [-f] `DELETE` [-z] PATH

Angle style: robust due to greed:

    - In order to produce robust usage text for variants, literal inputs need
      top precedence.

    - More generally, treating text (whether in spec-syntax or usage text)
      as literal by default, it an good baseline (eg, that is how regex works).

    - The conclusion is that variable inputs must be enclosed, making
      case-based solutions either flawed or insufficiently robust.

    - Optopus was drifting toward {param} and <pos> as the enclosures:

        - That would also be an odd combo. The only precedent is docopt,
          which supports it only as an alternative syntax.

        - In addition, braces have a semi-conventional role for choices in
          tools like argparse, so using them for parameters would be
          anti-conventional.

    - Will there be ambiguities if parameters and positionals have the
      same enclosure?

        --point <x> <y>   # How many parameters?

    - Initially, I thought that parentheses/brackets could resolve such matters
      (see Git usage text, for example). But the brackets do not solve the
      problem by themselves. For example, is this an optional option with 2
      parameters or an optional group with a flag and 2 positionals?

        [--point <x> <y>]

    - Once again, embracing a greedy policy sorts everything out. If parameters
      bind eagerally to angle-bracketed inputs, then the example above is a
      2-parameter option.

Verdict: angle style:

    - The clarity of the approach seems to more than counterbalance the
      small increment of extra typing: all variable inputs are enclosed in
      the same way (positionals, parameters, and thus choices).

    - The approach has strong precedent, especially from Git.

    - Brackets and greedy will sort out any ambiguity:

        [--point <x> <y>] <z>  # 2-param option, required positional.

    - If needed later, support other styles for usage text and grammar
      syntax (especially sensitive). Note that sensitive style in usage
      text is partially supported via the SYM! notation.

--------
enhanced-quantifiers: Enhanced quantifiers
--------

Quantifiers could be more featureful:

    - A third parameter similar to a range step:

        <x>{0,6,2}      # 0, 2, 4, 6

    - Ability to support noncontiguous quantities:

        <x>{!1,2,3,5}   # 1, 2, 3, or 5

--------
opt-spec-lines: Opt-spec lines
--------

In the spec-syntax, an opt-spec line allows any syntax for configuring a
single Opt, plus two other things: aliases and help text.

I considered adding a rule to require that the aliases, if any, reside
separate from the grammar of the Opt configuration. An illustration:

    -f [--foo <>]          # OK.
    -o (--opt <> <>){3}    # OK.

    [-f --foo <>]          # Not OK: the -f alias should be outside brackets.

But the rule seems needlessly touchy. Since configuring a single
Opt already requires nearly the full grammar, it makes more sense to parse
the line as follows:

    expression [: [help-text]]

Then examine expression to extract any aliases and validate that it configures
only a single Opt.

Because it would be difficult to distinguish opt-spec continuation lines from
lines of regular text in a section, I decided to require block-quoting for
regular text. This keeps parsing relative sane at a modest cost in usage.

Opt-specs lines can also define help text for positional/parameter
variants. The default help text for such elements (ie, without
any explicit section configuration) is as follows:

    # Configuration:

        <task>             : Task to perform
        <task=foo>         : Foo blah
        <task=bar>         : Bar blah

        --mode <fast|slow> : Mode to use
        --mode <=fast>     : Fast blah
        --mode <=slow>     : Slow blah

    # Resulting help text:

        Positionals: task:
          foo                Foo blah
          bar                Bar blah

        Options: --mode:
          --mode fast        Fast blah
          --mode slow        Slow blah

--------
group-level-validation-needed: Why Group-level validation should be retained
--------

If focusing just on ntimes, one might be tempted to collapse Group validation
needs (primarily ntimes) down to the Opts. Some of the discussion in
parsed-data-structure, for example, loosely speaks in such terms.

But the Groups do impose their own requirments. In this example, the ntimes of
the Opts are inter-linked: if any one appears, the requirements of the others
changes dynamically.

    [ -x -y [-i] ]

But Groups do have other attributes: dest and maybe validate. And it seems
difficult to imagine all consequences of grammar flattening. Every time I
experimented with it in the past, problems were encountered. It is possible
that a Target might flatten Group-level ntimes down to the Opts purely for
convenience during argument-parsing. But it seems important to retain the
ability to impose requirements at the Group level rather than only at the Opt
level. Finally, because Groups can nest, storing their requirements at the Opt
level is not immediately straightforward.

--------
optarg-choices-in-usage-text: OptArg.choices in usage-text
--------

Policy under most circumstances:
    - An entity is represented by its name in usage-text and spec.
    - Under most circumstances, that is true for OptArgs.

But when an OptArg has either choices or choice, things change:

    - OptArg with choices:
        - Use the name, if defined.
        - Otherwise, use choices as a stand-in for the symbolic name.

    - OptArg with a choice:
        - This occurs in arg-variants.
        - Use the choice in usage-text, even if a name is defined.
        - Explanation:
            - Policy appears to deviate from normal.
            - That appearance is deceptive in the case of arg-variants.
                - The choice is no longer a var-input.
                - It is a literal-input.

    - OptArg with no choices and no name:
        - Represented as an anonymous-input in usage:

            --point <> <>

--------
groups-need-names: Why Group needs both dest and name
--------

Why Group needs a dest:

    - Example: EX_NAB.

    - Without a Group.dest (commands in this case) Optopus would have no way to
      store the information other than via the Opt dests.

       - Data would be organized in a narrowly correct but impractical way.

       - Every dest would be a flat list of values, some of them coming from
         different 'cmd' invocations.

        Result(
            debug = D1,
            help  = H1,
            cmd   = [chomp, findall, grep, grep, range, run],
            rgx   = [       R1,      R2,   R3              ],
            i     = [                I1,   I2,          I3 ],
            v     = [                V1,   V2,          V3 ],
            s     = [                S1,   S2              ],
            start = [                            X1        ],
            stop  = [                            Y1        ],
            step  = [                            Z1        ],
            g     = [                            G1,    G2 ],
            code  = [                                   C1 ],
            a     = [       A1,                         A2 ],
        )

        - Even if one could imagine a policy statement like "put data for a
          Group in an inner-Result", the problem remains that Optopus has no
          attribute name (no dest) to which to allocate the inner-Results.

        - Other default policies (eg, invent formulaic dest) seem inelegant.

    - Setting a Group.dest produces a sensible Result:

        Result(
            debug = d1,
            help  = h1,
            # Each Result is a column in the tabular arrangement above.
            commands = [
                Result(chomp),
                Result(findall, R1, A1),
                Result(grep, R2, I1, V1, S1),
                Result(grep, R3, I2, V2, S2),
                Result(range, X1, Y1, Z2, G1),
                Result(run, I3, V3, G2, C1, A2),
            ],
        )

In early planning work, Group had dest but no name.

    - The equal sign looks like an assignment.
    - Which implies that 'mode' more dest than name.

        <mode=fast|slow>

    - I knew Groups required a dest, in order to achieve reasonable
      data-storage in more complex grammars (EX_NECK_DIAG)
    - But I did not yet have a clear purpose for Group.name.

    - In addition, I had not come to a full understanding of the meaning of the
      name attribute across all grammar entities.
    - Namely, that the 'name' is the primary decide to represent the entity
      both in usage-text (directly) and the API (via queries).

But consider the usage text for nab: EX_NAB:

    - The fully-explicit usage is unwieldy:

        Usages:
            nab [--trace] (chomp | findall <rgx> [-a] | grep <rgx> [-i] [-v]
                [-s] | range <start> <stop> [<step>] [-g] | run <code> [-g <>]
                [-a] [-v] [-i])...
            nab --help

    - More intuitive would be documenting usage via partial-variants:

        Usage:
            nab [--trace] command...
            nab --help

            Where command:
                chomp
                findall <rgx> [-a]
                grep <rgx> [-i] [-v] [-s]
                range <start> <stop> [<step>] [-g]
                run <code> [-g <>] [-a] [-v] [-i]

    - The Group.name provides the mechanism to achive outcomes like that.
        - As with other grammar entities, the name is the
          symbolic representative in usage-text.

Optopus users can achieve various usage-text styles for Groups:

    - Compact, readable style:
        - Use a named group.
        - Tells Optopus to represent the Group symbolically in usage.

    - Fully-explicit style (no inner-Results):
        - Use an unnamed Group in the main variant-spec.

    - Fully-explicit-style (with inner-Results):
        - Use a named group in the spec.
        - Plural name would be advised in this case (commands), because the
          user mainly cares about the dest.
        - Then unset the Group.name via API.

            p.config('commands', name = None)

--------
degenerate-groups: Degenerate groups with only one element
--------

Groups with one element will occur often:

    - One optional thing in square brackets:

        [--foo]
        [<z>]

    - One required thing in parentheses for disambiguation:

        --point <x>     | Option with one parameter
        (--point) <x>   | Flat and one positional

In the spec-syntax, single-element groups exist for good reason:

    - But when the parsed spec is converted into the actual
      Grammar instance, degenerate groups will be dropped.

    - And the group's quantifier will be applied directly to the single
      element.

--------
opts-should-know-provenance: Opts should know their data provenance
--------

Data values in a parsed Result can come from three sources:
    - Command-line arguments supplied by end-user.
    - Settings/preferences in a config file managed by the user's program.
    - Defaults set in the configured Parser.

A Parser should know the data provenance for each dest in the Result:
    - Users sometimes need this information to facilitate easy
      merging of preferences and opts.

The Parser should be able to report on data provenance:

    p = Parser(...)
    opts, sources = p.parse(ARGS, with_sources = True)

    Where sources:
        - Is a dict where:
            - key: dest
            - value: Source or dict  # The latter for inner-Results.
        - And a Source has attributes:
            - source: str
                - 'arguments'
                - 'applied_defaults'     # Preferences (more below).
                - 'defaults'
            - indexes: TBD
                - Maybe slice into the command-line arguments.
                - Might need to be more complex for situations involving
                  complex grammars.
                - Some use cases require knowing the argument ordering:
                    - Perl `rename`: the "rules" has to be applied in order.
                    - Unix `find`: ditto.

How will Optopus support users needs to merge preferences and opts?

    # User loads their own prefs.
    prefs = load_prefs(...)

    # If needed, user creates an adjusted variant of those prefs.
    pref_defaults = ...

    # User configures Optopus in the usual way.
    p = Parser(...)

    # User applies the prefs to the configured Parser.
    p.apply_defaults(pref_defaults)

    - What happens:

        - prefs is a dict:
            - key: query-path to identify 1+ Opts
            - value: desired value for their Opt.applied_default

        - Optopus sets every Opt.applied_default with the applicable value.
            - The regular Opt.default values are not altered.

        - During arg-parsing, the presence of an applied-default can help
          satisfy quantifer requirements.

        - After parsing, defaults and applied-defaults are attached to the
          Result, as needed.

    - This approach involves less complexity for Optopus that some of my
      earlier plans.

        - Optopus does not need to know about key mappings from prefs-to-opts:
            - An earlier plan involved the user telling Optopus how to
              translate prefs keys to corresponding Opt dests (for cases when
              they did not align exactly).

        - Optopus still generals the regular usage-text and help-text.
            - That is driven by the spec and grammar.
            - The presence of a setting/preference can help to satisfy
              requirements at the moment of typing command line arguments.
            - But they do not fundamentally change the spec/grammar.

        - No information is overwritten or lost:
            - Optopus does not set a new default on the Opts.
            - It does not modify the configured quantifiers.
            - Instead, the presences of an applied_default is taken into
              account during arg-parsing.

Merging preferences and opts:

    - This task can be fraught with argparse (eg, neon-client, mvs, etc).

    - With the plan above, the user typically does not need
      to do anything. The merge happens during arg-parsing.

    - But even in complicated situations, the user can sort out remaining
      details because they know data provenance.

A related topic: preferences and opts tend to have similar validation needs:

    - User-prefs are not an Optopus responsibility.
    - But an Opt knows how to validate its own incoming values.
    - User might want to take advantage of that:
        - Define validation once, in the Opt.
        - Use the Opt to validate a value coming from preferences.
            - Provides a convenient setup for preferences validation.
            - Would generate consistent error messages.
        - This topic needs more thinking and details, but it seems amenable to
          the rest of the project's design.

--------
parser-serialization: Parser serialization
--------

In some of my planning notes, I suggested that a configured Parser should be
able to be represented as a regular data structure.

    p1 = Parser(...)
    d1 = p.as_dict

    p2 = Parser(from_dict = d1)

Those notes also implied that the data structure should be serializable:

    - That raises two challenges.

    - Parser data includes callables:
        - Not readily serialized.

    - Parser data has many dataclass instances:
        - Doable.
        - Would need a mechanism to support de-serialization.
        - Maybe a special key holding the dataclass name.

    - Not sure how important serialization really is.
    - Defer this for now.

--------
readme-next-version: README for next version
--------

Add some default setting to at least one example.

Ultimately, readme should be more how-to than why.

As lib evolves, shorten readme to have very short intro; how to use; then brief
discussion of why its better (maybe bullet points even), with links to longer
discussions of why-build-it and how-it-is-better.

--------------------------------------------------------------------------------
reference: Reference
--------------------------------------------------------------------------------

--------
parsing-resources: Parsing resources
--------

Extended Backus–Naur form (EBNF):

    https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form

Recursive descent parser:

    https://en.wikipedia.org/wiki/Recursive_descent_parser

Parsing expression grammar (PEG):

    # Very useful on PEGs, packrat parsing, and CFGs (notes below).
    https://stackoverflow.com/questions/1410477/what-is-packrat-parsing

    https://en.wikipedia.org/wiki/Parsing_expression_grammar

Code examples:

    Pyparsing: https://github.com/pyparsing/pyparsing/

    Build a simple interpreter: https://github.com/rspivak/lsbasi

    http://jayconrod.com/posts/37/a-simple-interpreter-from-scratch-in-python-part-1

Books:

    Language Implementation Patterns: Create Your Own Domain-Specific and General Programming Languages

--------
parsing-process-generally: Parsing process generally
--------

Given a grammar, generate an appropriate parser.

Given input text, use a lexer to generate typed tokens.

Feed the tokens into the parsers, which determines validity and returns a
syntax tree.

--------
pegs-cfgs-and-packrat-parsing: PEGs, CFGs, and packrat parsing
--------

Resource:

    https://stackoverflow.com/questions/1410477/what-is-packrat-parsing

Many parsers use context-free grammars (CFG). For example:

    E -> E * E | E + E | (E) | N
    N -> D | DN
    D -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

    Rule 1: nonterminal E can be replaced E * E, etc.
    Rule 2: nonterminal N can be replaced by D or DN.
    Rule 3: nonterminal D can be replaced by any single digit.

    The rules can generate any simple arithmetic expression using +, *, parens,
    and single digits.

CFGs are a compact way to represent a collection of strings and they have a
rich and well-understood theory. However, they have two main drawbacks.

    - A CFG defines a collection of strings, but doesn't tell you how to check
      check a string for validity. This means that whether a particular CFG
      will lend itself to a nice parser depends on the particulars of how the
      parser works, meaning that the grammar author may need to familiarize
      themselves with the internal workings of their parser generator to
      understand what restrictions are placed on the sorts of grammar
      structures can arise.

    - Grammars can be ambiguous. For example, the above grammar generates the
      string 2 + 3 * 4, but does so in two ways. In one way, we essentially get
      the grouping 2 + (3 * 4), which is what's intended. The other one gives
      us (2 + 3) * 4, which is not what's meant. This means that grammar
      authors either need to ensure that the grammar is unambiguous or need to
      introduce precedence declarations auxiliary to the grammar to tell the
      parser how to resolve the conflicts. This can be a bit of a hassle.

Parsing expression grammars (PEG) are alternatives to CFGs. Here's the same
arithmetic example in PEG form:

    E -> F + E | F
    F -> T * F | T
    T -> D* | (E)
    D -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 / 9

A key feature of PEGs is explicit ordering of parsing alternatives. The syntax
can be read as "First try this, then this, etc". In that sense, PEGs directly
encode into the grammar structure itself how the parsing is to be done. This
approach resolves the ambiguity noted above and lends itself toward direct
translation from grammar to parser generation.

The Packrat Parsing Algorithm builds on the PEG approach. The algorithm is
conceptually quite simple. At a high level, a packrat parser begins with the
start symbol, then tries the ordered choices, one at a time, in sequence until
it finds one that works. As it works through those choices, it may find that it
needs to match another nonterminal, in which case it recursively tries matching
that nonterminal on the rest of the string. If a particular choice fails, the
parser backtracks and then tries the next production.

The algorithm combines the PEG approach with memoization (essentially dynamic
programming without the bookkeeping) to achieve linear performance.

--------
grammar-types: Grammar types
--------

References:

    https://en.wikipedia.org/wiki/Chomsky_hierarchy
    https://en.wikipedia.org/wiki/Formal_grammar
    https://stackoverflow.com/questions/14589346/is-c-context-free-or-context-sensitive
    https://www.quora.com/What-is-an-intuitive-way-to-describe-the-differences-between-context-sensitive-context-free-and-regular-grammars-Explanations-with-examples-relating-to-human-language-would-be-particularly-helpful

Formal grammars:

    In formal language theory, a grammar describes how to form strings from a
    language's alphabet (or elemental values) that are valid according to the
    language's syntax.

    More specically, a grammar consists of:

        - A finite set N of nonterminal symbols (disjoint from the strings
          formed from G).

        - A finite set T of terminal symbols (disjoint from N).

        - A finite set P of production rules for rewriting strings via
          substitution.

    A grammar is usually thought of as a language generator. However, it can
    also sometimes be used as the basis for a recognizer -- a function in
    computing that determines whether a given string belongs to the language or
    is grammatically incorrect. To describe such recognizers, formal language
    theory uses separate formalisms, known as automata theory.

    Parsing is the process of recognizing an utterance (a string in natural
    languages) by breaking it down to a set of symbols and analyzing each one
    against the grammar of the language.

    Most languages have the meanings of their utterances structured according
    to their syntax—a practice known as compositional semantics. As a result,
    the first step to describing the meaning of an utterance in language is to
    break it down part by part and look at its analyzed form (known as its
    parse tree in computer science, and as its deep structure in generative
    grammar).

Chomsky Hierarchy:

    The following table summarizes each of Chomsky's four types of grammars, the
    class of language it generates, the type of automaton that recognizes it, and
    the form its rules must have.

    Grammar | Languages               | Recognizer automaton       | Allowed production rules
    -----------------------------------------------------------------------------------
    Type-3  | Regular                 | Finite state               | A   => a | aB
    Type-2  | Context-free            | Non-deterministic pushdown | A   => x
    Type-1  | Context-sensitive       | LB-ND Turing machine       | xAy => xzy
    Type-0  | Recursively enumberable | Turing machine             | z   => x

    Symbols and abbreviations:

        * These symbols are not standard. Typically, uppercase are terminals,
          lowercase are non-terminals, and Greek are sequences of either.

        a     | Terminal
        ---------------------------------------------
        M     | Non-terminal
        N     | Same
        ---------------------------------------------
        x     | Sequence of terminals or non-terminals
        y     | Same
        z     | Same, and this one cannot empty
        ---------------------------------------------
        LB-ND | Linear-bounded non-deterministic

    Understanding the production rules:

        - Regular grammar (Type-3) is very rigid. Every non-terminal produces
          at least a left-side terminal. The automaton requires no memory and
          can make each decision based on the information directly at hand.

            Classic example (using regex quantifier notation):

                L = a{n}

                X = ''
                X = a
                X = Xa

            In other words, the language consisting of all strings of
            consisting of zero or more letter a.

        - Context-free grammar (Type-2) is more open: a non-terminal can
          generate sequences of terminals and/or non-terminals. The constraint
          is that every non-terminal maps to exactly one pre-defined thing.
          Mappings never change dynamically during parsing. This automaton
          requires memory to support backtracking (classically, a stack).

            Classic example:

                L = a{n} b{n}

                X = ''
                X = ab
                X = aXa
                X = bXb

            To recognize strings in this language, the parser needs to remember
            how many letter a were seen.

        - Context-sensitive (Type-1) can be understood in relation to
          context-free. If you look only at the middle terms, you see the
          context-free production rule just discussed (A => z). But now what
          each non-terminal maps to can differ depending on the context (x and
          y are the surrounding context on both sides of the rule).

            Classic example:

                L = a{n} b{n} c{n}

            At first, I did not understand why this is any different than a{n}
            b{n}. Couldn't you just remember N in the same way? Perhaps the
            answer lies less in the ordinary practicalities of how one would
            implement a real parser but in writing the grammar rules.

        - Context-sensitive (Type-0) is wide open, no constraints on the
          grammar.

--------
api-driven-vs-text-driven-examples: API-driven vs text-driven examples
--------

# Simple programs.
examples/get-pocket-items
examples/daily-reading

# More complex examples: contrast the API vs the text examples.
misc/examples/job-client-via-api
misc/examples/job-client-via-api-thematic
misc/examples/job-client-via-text
misc/examples/job-client-via-text-subparsers

--------
other-tools: Other tools
--------

App::Cmd

    - Conclusion: not sure that I'm sold on this.

    - The documentation is difficult.

    - The module uses Params::Validate and Getopt::Long::Descriptive, and it
      does not appear to be flexible in that regard.

Getopt::Long::Descriptive

    - Front end for Getopt::Long

    - Promising in several respects.

    - One could write a subclass to modify help text output.

    - But it does not support the basic element of a option arg name (eg
      --logfile PATH)

    - So subclassing will take you only so far.

    - Supports concept of "implies": if -X, then -Y and -Z are required.

    - Support concept of a hidden option (not in help text).

Getopt::Tabular

    - Tabular spec definition

    - Validation

    - Help text: not bad, but not controllable

    - Can parse an array besides ARGV

    - Looks unmaintained.

Getopt::Lucid:

    - Interesting approach

    - Emphasizes readability of specification

    - Uses a chainable module when defining specs

    - Also allows you to merge options with config

    - Does not produce help text

Getopt::Euclid

    - Creates parser from your application's POD, specifically:

    - The POD can also include validation assertions.

    - Still active.

    - Takes input from @ARGV and puts results in %ARGV

    - I don't like the fact that it uses globals and is non-OO

Getopt::Simple

    - Wrapper around Getopt::Long

    - Produces help text.

Getopt::Declare

    - Builds option parser from a help-text string

    - It's an interesting idea.

    - Requires a special syntax to define the spec and that syntax is embedded
      in the help string

Other Perl modules briefly checked:

    - Abridged
    - Auto
    - Base
    - Chain
    - Clade
    - Compac
    - Complete::Args
    - Easy
    - Fancy
    - Flex
    - Helpful
    - Lazy
    - LL
    - OO
    - Param
    - Plus
    - Regex
    - Tiny
    - Usaginator
    - Params::Validate
    - Params::Smart
    - Getargs::Mixed
    - Getargs::Long
    - Pod::WikiDoc

Pod::Usage

    - You document your application with POD.

    - Then you simply use  Getopt::Long and PodUsage.

    - In addition to getting a usage message, you get a man page (based on
      pod2man) and your application is CPAN-ready.

    - As a result, you have a decent level of control over the look of the
      usage and help text. To the extent that you can't control appearance, at
      least your documentation looks standard.

    - When you invoke pod2usage, you can specify a verbosity level, which
      controls the POD sections that are rendered.

    - The main drawback is POD itself.

    - You could wrap the module to simplify usage further: trap the WARN from
      GetOptions and invoke your own help(); then invoke pod2usage if --help or
      --man are requested.

MooseX::GetOpt

    - Front end for Geopt::Long
    - Requires using Moose
    - Not many new ideas here

Python plac module

    - This module wraps argparse.

    - It deduces the needed parser based on: the signature of the main()
      function (for positional arguments); annotations of the main() function
      (for options).

    - Advertises itself as being super easy to use and setup, but by the time
      you create all of the awkward-looking annotations, it seems like argparse
      would have been simpler.

Ruby Trollop

    - Very simple to use

    - Not much customizability.

Python argparse module

    - Important concept: the module should parse/validate arguments or options

Python's docopt:

    - Primary ideas: (1) write good usage text and build opt parser from it.
      and (2) parsing should be separate from validation.

    - Tried to use it, but seems half-baked:

        - The parsing code is up to the task of achieving goal of infering
          complex logic and arg/option interdependencies from a usage text).

        - It's easy to cause their demo example (naval-fate) to fail just by
          making a few obvious changes to the configuration.

    - Fundamental problem with separating arg parsing from data validation.

        - Because docopt does not validate, it lacks the concept like
          argparse's `choices`.

        - As a result, a library focused on giving the user clear usage text
          has no mechanism for telling the user what the allowed values are for
          an option-argument.

        - It does not even try: in the face of invalid input, it just prints
          the usage text and exits.

    - The library also has an awkward way of creating the returned opts
      dictionary, with keys like `--foo` and `<path>`.

    - The library's returned dict also divorces an option's presence (a
      True/False flag) from the value of its argument. For example, a spec like
      `-C PATH` would produce a dict like `{'-C': True, 'PATH', '/tmp/blah'}`.
      That seems like a fundamental problem.

Python: Click

    - Summary:

        - Interesting but opinionated and therefore rigid in various ways.

        - Strong subcommand support but very weak grammar support:
            - Built around a subcommand model (with nesting).
            - With a heavy focus on dispatching.
            - No grammar support other than:
                - Basic.
                - Commands and nested subcommands.
            - Missing:
                - More than one positional with non-static nargs.
                - Alternatives and mutual exclusion.
                - Groups as first-class grammatical entities.
                - Rich quantifiers.

        - Highly constrained help text:
            - Very little customization of help text.
            - Usage text lists options generically (absent subclassing).

        - Code readability is poor:
            - Configuration ends up scattered across decorators.
            - Not easy to understand script usage at a glance.

        - Heavy API burden:
            - A lot of API to learn just for the documentation's main examples.
            - A API is even more sprawling as you read through the details.

        - Reasonably good support for:
            - Using configuration files as defaults.
            - Ditto for environment variables.
            - Smart-types for conversion/validation.
            - Various utilities adjacent to command-line scripts.
            - But the project seems to be comingling concerns too much.

    - Click views command-line programs through the lens of subcommands:
        - Subcommands can be nested under other subcommands.
        - Other than than, grammatical support is weak (worse than argparse).

    - Click thinks dispatching is a primary concern:
        - I have never felt that way about writing scripts.
        - Dispatching is typically one of the easiest things to do.
        - The dispatching model seems rigid:
            - Always passes 3 arguments to the receiving functions.
            - Function signatures have to align with the arguments
              that will be passed to them.

    - Click explicitly rejects customizability of help output:
        - You can control metavars (like argparse).
        - Usage-text uses a general metavar (OPTIONS) for all options.
        - Overriding that can be done (maybe) with awkward subclassing.

    - Configuration is not very readable:
        - It ends up spread across various decorators.
        - Not easy to understand script usage at a glance of the code.
        - A good example of this is the docopt naval-fate example.
        - In docopt, you can understand usage immediately in the source code.
        - The same example in the Click documentation is much less intuitive.

    - Heavy API burden:
        - If your program fits the Click model well, you can get things working
          rapidly enough.
        - Anything outside that path leads to:
            - Large API footprint.
            - Conceptual and API complexity.
            - Some quite strange API features.
        - In spite of good/extensive documentation, my eyes often glazed over.
        - Examples:
            - Multi Commands.
            - Complex Applications (a git clone).

    - Click explicitly rejects fuzzy option/choice matching:
        - Example: accepting --fu for --fubb if former yields 1 match.
        - The rationale is that accepting fuzzy matches can break future usages
          if end-users get accustomed to the abbreviated options.
        - But the library does support case-insensitivity for situations
          involving Opt.choices, seemingly contrtacting that rationale.

    - Options:
        - Must take a fixed N of parameters (seems restrictive).
        - One exception to that:
            - An option taking 1 parameter can be configured also take zero.
            - Strange.
        - An option's parameters can have different types and (maybe)
          validation.

    - Positionals:
        - A positional can have a fixed nargs.
        - Or it can have nargs of -1, which means 1+ (odd).
        - But only one Opt can be "variadic".

    - Help text details:
        - Help text for commands/subcommands:
            - Set in function docstring.
            - Each command can be given a short_help.
            - If so, Click will document the commands in style similar to
              documentation for options.
        - Help text for an options:
            - Set when defining the Opt via the decorator.
        - Help text for a positionals:
            - Mostly not supported.
            - You have to document them in your command docstring.
            - The small exception here is short_help for commands (see above).
        - Epilog help text:
            - Similar to argparse.
            - Fairly limited in functionality.
        - Metavars in help text:
            - Click supports them, similar to argparse.
            - Also can be applied to all options for a command.
            - Metavar defaults:
                - Parameters: UPPERCASE.
                - All options for a command: OPTIONS.
        - Wrapping:
            - Syntax to suppress default wrapping is quite opaque.
            - Syntax to include non-help-text in a function docstring is also weird.

    - Support for configuration files and environment variables:
        - Click has a reasonable and flexible approach.
        - At least within the larger limits of the system.
        - But the API footprint is moderately large.

    - Supports eager options (like high-precedence Opts).

    - Supports file handling and various other smart types:
        - Meaning types that carry additional requirements for
          convert/validate.

    - Testing support:
        - Has some support for running your Click commands in testing
          scenarios.
            - Capturing stdout/stderr.
            - Using an isolated file system.
        - I did not read carefully and am skeptical that it can do very much.

    - Shell completion:
        - Refer to Click documentation when setting up completion for Optopus.
        - I did not read closely.
        - Completion seems to be supported only for scripts executed via an
          entry point in setuptools.

    - Other utilities:
        - Provides an echo() function.
            - More robust in the face of Unicode issues.
            - Works across various terminal environments.
        - Also support for:
            - ANSI coloring.
            - Pagination.
            - Screen clearing.
            - Getting single character inputs from end-user.
            - Waiting for key press.
            - Launching editors.
            - Launching other applications.
            - Showing progress bars.
        - All of that is cool/useful in some sense.
            - But why combine it with a command-line argument parser?
            - Seems like too much comingling of concerns.

Python invoke:

    - Part of the Fabric ecosystem.

    - Good for a collection of small tools used by a project.

    - Not a full CLI arg parser.

Ruby Thor

    - Similar to Fabric in its approach.

Ruby GLI

--------
problems-scenarios-from-argparse: Problems scenarios from argparse
--------

https://stackoverflow.com/questions/35847084

    Wants to customize help text capitalization to mimic standard English usage
    for section titles. The answers demostrate the absurdity of trying to
    customize argparse help text.

        Usage: ...                       # Difficult: must subclass.

        Positional arguments:            # Fairly easy: ap._positionals.title
            ...

        Optional arguments:              # Fairly easy: ap._optionals.title
            ...

https://stackoverflow.com/questions/18025646

    Grammar needed:

        frob -x [other-opts]
        frob -y -z [other-opts]

https://stackoverflow.com/questions/4466197

    Grammar needed:

        frob [ -s | -f [-m] ] <host>
        frob -h

https://stackoverflow.com/questions/28660992

    Grammar needed:

        - Option takes 2 args.
            - The 1st arg must be A|B|C.
            - The 2nd arg must be X|Y|Z.

        frob [-a {A,B,C} {X,Y,Z}]
        frob -h

    Solvable if the parser allows `choices` to take a list:

        dict(
            option = '-a',
            nargs = 2,
            choices = [(A, B, C), (X, Y, Z)],
        )

https://stackoverflow.com/questions/25626109

    Grammar needed: if -x if present, -a and -b are also required.

        frob          [-y] [-z]
        frob -x -a -b [-y] [-z]

http://bugs.python.org/issue11588

    Grammar needed:

        - Sets of arguments that must occur together.

        frob -o           [-x]
        frob -r (-p | -s) [-x]

    Grammar needed:

        frob -a -b [-x]
        frob -c -d [-x]

http://bugs.python.org/issue10984

    Grammar needed:

        - User has three flags: -a -b -c
        - Plus some other flags: -x -y
        - The -b flag is incompatible with both -a and -c.

        frob [-b]      [-x] [-y]
        frob [-a] [-c] [-x] [-y]

https://stackoverflow.com/questions/11455218

    Grammar needed:

        - If -y is given, -x is required.

        frob [-x] [-z]
        frob -y -x [-z]

https://stackoverflow.com/questions/27681718

    Grammar needed:

        frob [-x] [-y] (<a> <b> <c>)...

    Approach:

        - Allow groups of positionals to be repeated, with append-like action.

https://stackoverflow.com/questions/19114652

    Grammar needed:

        - The entire CLI grammar can be repeated.

        frob (version <n> --file <p1> <p2>)...

    Control how choices are listed in usage text:

        - eg, don't repeat them.

            -n {foo,bar,baz}, --name {foo,bar,baz}

        - or refer to them by name, and then define the name later

            --othername FOO

            where FOO
                foo
                bar
                baz

Help text with subparsers:

    frob -h
        - some people want just top-level help
        - others want all help : top-level all subparsers

https://stackoverflow.com/questions/4042452

    If program has required args/options, but it is run
    with zero args, provide help text, not error text.

    It's trivial if you have a grammar:

        frob <x> <y> [-z]
        frob --help
        frob

https://stackoverflow.com/questions/27258173

    - Required: -x, -y, or both (but not neither).

    frob -x [-y] [-z]
    frob -y [-x] [-z]

https://stackoverflow.com/questions/5257403

    - wants nargs to allow a range: eg, 1 to 3.

    - this works, but starts to look ugly if N gets larger

        frob -x A [B [C]]

        frob -x A [B [C [D [E [F]]]]]

    - other possibilities:

        frob -x A...{7}
        frob -x A...{1,3}
        frob -x A...{0,3}
        frob -x A...{3,}

https://stackoverflow.com/questions/4692556

    Need just the literal 'all' or 1+ positions.

    frob [-x] [-y] all
    frob [-x] [-y] <pos>...

https://stackoverflow.com/questions/62524681

    - Wants a grammar where each -C option resets the configuration,
      and where the specifically declared configurations are linked
      to the -p option.

    - The desired end result is a list of configurations.

    frob -w 100 -c 50 -C -w 1000 -c 500 -p /foo -C -w 5% -c 3% -p /bar
         ----(3)-----    ---------(1)----------    --------(2)--------

    1. Configuration for the /foo volume.
    2. Ditto, for /bar volume.
    3. Configuration settings for all other volumes.

job-client:

    Allow for extra options for job-client devs, based on env var.

    Special options that exit-with-msg (without griping about other issues):
        --version
        --examples
        --autocomplete

    General and task-specific help (without griping about other issues):
        job-client -h
        job-client TASK -h
        job-client -h TASK -h

    Using a YAML config file:

        - Settings from the config file should control the `default`
          settings for the argument parser.

        - When running `job-client configure`, you do not want to load the
          existing config file.

--------
example-grammars: Example grammars
--------

Example 1:

    [-b]      [-x] [-y]   # -a and -b are mutex,
    [-a] [-c] [-x] [-y]   # and -b also allows -c

Example 2:

    [-x]  [-z] <a>
    -y -x [-z] <a> [<b>]   # If -y, then -x is required and <b> is allowed.

Example 3:

    [-x] [-y] (<a> <b> <c>)...

Example 4:

    (-x | -y | -z -q) [-a] <b>

Example 5:

    (-a -x | -b... | [-a] -c -d) [-e | -f] [-g] <h> [<i>...] ([-j -k]... | -m -n)

--------
vim-modelines: Vim modelines
--------

vim: iskeyword=@,48-57,_,192-255,-

