#! /usr/bin/env python

import sys
import pyperclip

from textwrap import dedent
from pathlib import Path

from argle import bargparse as bp

from argle.spec_parser import (
    SpecParser,
    Option,
    Positional,
    Variant,
    Group,
)

from argle.grammar import (
    WalkElemKinds,
)

halt = bp.halt
EXIT = bp.EXIT

DESCRIPTION = dedent(f'''
    Experiment with Argle spec-parsing.
''')

ARG_CONFIGS = (
    dict(
        name = 'path',
        nargs = '?',
        metavar = 'TEXT-OR-PATH',
        help = 'Get spec from argument or from file path',
    ),
    dict(
        name = f'--clipboard -c',
        action = 'store_true',
        help = 'Get spec from clipboard',
    ),
    dict(
        name = f'--spec -s',
        action = 'store_true',
        help = 'Print spec and exit',
    ),
    dict(
        name = f'--parse -p',
        action = 'store_true',
        help = 'Try to parse the spec',
    ),
    dict(
        name = f'--debug -d',
        action = 'store_true',
        help = 'Parse spec with debug=True',
    ),
    dict(
        name = f'--tree -t',
        action = 'store_true',
        help = 'Print SpecAST as a tree',
    ),
    dict(
        name = f'--elems -e',
        action = 'store_true',
        help = 'Print SpecAST as a sequence of elems',
    ),
    dict(
        name = f'--traverse -v',
        action = 'store_true',
        help = 'Print SpecAST via traverse()',
    ),
    dict(
        add_help = True,
    ),
)

def main(args):
    ap, opts = bp.parse_args(
        args,
        ARG_CONFIGS,
        description = DESCRIPTION,
    )
    if opts.debug or opts.tree or opts.elems or opts.traverse:
        opts.parse = True

    if opts.clipboard:
        spec = pyperclip.paste()
    elif opts.path:
        p = opts.path
        if Path(p).is_file():
            spec = read_file(opts.path)
        else:
            spec = opts.path
    else:
        bp.exit_with_usage(ap, 'No spec provided')

    if opts.spec:
        print('# SPEC')
        print(spec.rstrip())

    g = None
    if opts.parse:
        sp = SpecParser(spec, debug = opts.debug)
        pspec = sp.parse()
        g = pspec.grammar
        print('# SPEC-OK')

    if g:

        if opts.tree:
            msg = g.pretty(omit_end = True, indent_size = 2)
            print('# TREE')
            print(msg)

        if opts.elems:
            print('# ELEMS')
            for e in g.walk_elems():
                cls = e.__class__.__name__
                name = getattr(e, 'name', None)
                print(f'{cls}(name = {name!r})')

        if opts.traverse:
            print('# TRAVERSE')
            for we in g.traverse(include_closing = True):
                indent = '  ' * we.level
                if we.kind == WalkElemKinds.elem_close:
                    ...
                elif we.kind == WalkElemKinds.list_open:
                    ...
                    # print(f'{indent}[')
                elif we.kind == WalkElemKinds.list_close:
                    ...
                    # print(f'{indent}]')
                else:
                    e = we.val
                    cls = e.__class__.__name__
                    name = getattr(e, 'name', '')
                    print(f'{indent}{cls}({name})')

def read_file(path):
    with open(path) as fh:
        return fh.read()

if __name__ == '__main__':
    main(sys.argv[1:])

