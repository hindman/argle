#! /usr/bin/env python

# job-client : configuration via usage text, with subparsers.
#
# - The approach ends up very bad indeed: heavy, repetitive.
#   No one wants to do it this way.

USAGE = {}

USAGE['main'] = '''
Usage:
  job-client [general-options] COMMAND [ARGS]
  job-client [special-options]

General options:
  --job-env ENV      Environment ('production' for most users).
  --od-user USER     Open Directory user name.
  --log-level LEVEL  DEBUG, INFO, WARNING, ERROR, or CRITICAL [DEBUG].
  --disable-logging  Disable logging.

Special options:
  --examples         Display configuration and usage examples.
  --autocomplete     Display instructions for enabling autocomplete.
  --version          Display version information.
  --help             Display the help message.

Commands:
  configure          Set up the default configurations for job-client.
  submit             Submit the config file for a new job.
  upload             Upload requests for a submitted job.
  start              Start a submitted job.
  stop               Stop a job.
  download           Download Item data for a job.
  get                Get information about a job.
  find               Find jobs.

Short options:
  -h --help
'''

USAGE['configure'] = '''
Usage:
  job-client configure --job-env ENV --od-user USER
              [--log-level LEV] [--disable-logging]

Options:
  --job-env ENV      Environment ('production' for most users).
  --od-user USER     Open Directory user name.
  --log-level LEVEL  DEBUG, INFO, WARNING, ERROR, or CRITICAL [DEBUG].
  --disable-logging  Disable logging.
'''

USAGE['submit'] = '''
Usage:
  job-client submit --job-config-file PATH --requests-file PATH [--start-job]

Options:
  --job-config-file PATH
                     Path to job configuration file, which should contain an
                     JobConfig, either base64-encoded or as JSON.
  --requests-file PATH
                     Path to the job's requests file, which should contain
                     Item objects, base64-encoded, one per line. If
                     this option is given, job-client will upload after
                     submitting the JobConfig.
  --start-job        After submitting job and uploading requests, start job.

Short options:
  -c --job-config-file
  -r --requests-file
'''

USAGE['upload'] = '''
Usage:
  job-client upload --job-id ID --requests-file PATH [--resume N]

Options:
  --job-id ID        The job id.
  --requests-file PATH
                     Path to the job's requests file, which should contain
                     Item objects, base64-encoded, one per line. If
                     this option is given, job-client will upload after
                     submitting the JobConfig.
  --resume N         Resume upload, starting at line N [1].

Short options:
  -r --requests-file
  -j --job-id
'''

USAGE['start'] = '''
Usage:
  job-client start --job-id ID

Options:
  --job-id ID        The job id.

Short options:
  -j --job-id
'''

USAGE['get'] = '''
Usage:
  job-client get --job-id ID

Options:
  --job-id ID        The job id.

Short options:
  -j --job-id
'''

USAGE['stop'] = '''
Usage:
  job-client stop --job-id ID

Options:
  --job-id ID        The job id.

Short options:
  -j --job-id
'''

USAGE['download'] = '''
Usage:
  job-client download --job-id ID [--output-file PATH] [--start-index N]
              [--stop-index N] [--force]

Options:
  --job-id ID        The job id.
  --output-file PATH Output file path [STDOUT].
  --start-index N    Start index [1].
  --stop-index N     Stop index, inclusive.
  --force            Download even if job is not finished.

Short options:
  -j --job-id
  -o --output-file
  -f --force
'''

USAGE['find'] = '''
Usage:
  job-client find [--job-id ID] [--user USER] [--job-status S]

Options:
  --job-id ID        The job id.
  --user USER        Open Directory user who submitted the job.
  --job-status S     Job status.

Short options:
  -j --job-id
  -u --user
'''

# Would need to nest most of this configuration under
# the relevant subparsers.
p = parser(
    usage_text = USAGE,
    subparser_dispatch = 'command',
    option_groups = 'general special command download'.split(),
    defaults = dict(
        env = 'dev',
        resume = 1,
        start_index = 1,
    ),
    types = dict(
        job_config_file = 'file',
        requests_file = 'file',
        output_file = 'file',
        resume = int,
        start_index = int,
        stop_index = int,
    ),
    choices = dict(
        log_level = 'DEBUG INFO WARNING ERROR CRITICAL'.split(),
    ),
)

p.variants('help', 'version', 'examples', 'autocomplete').make_tolerant()
p.variants().add_options('general-options')

