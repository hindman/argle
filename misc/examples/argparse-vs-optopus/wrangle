#! /usr/bin/env python

'''

README example 4: a subcommand-style program.

The initial pgrep script has been expanded and renamed. It now includes various
regex-based text processing utilities.

Optopus:

    - Even with subcommands, the Optopus usage remains quite intuitive.

    - User must learn a few additional syntax rules (double-colon marker and
      positional variants like <task=grep>), but API burden remains low.

    - A Python programmer unfamiliar with the library could infer the intent
      even without knowing the syntax rules.

    - Help text is unified rather than separate -- a benefit in its own right
      and an amplifier of the virtues noted in prior README examples.

Argparse:

    - To avoid code repetition for shared options, the user has to take some
      care (in this case, defining a secondary data structure).

Size: 76%.

Help size: 73%.

'''

####
# Argparse.
####

ap = argparse.ArgumentParser()

sps = ap.add_subparsers(dest = 'task', help = 'Task to perform', metavar = '<task>')
sp1 = sps.add_parser('grep', help = 'Emit lines matching pattern')
sp2 = sps.add_parser('sub', help = 'Search for pattern and replace')
sp3 = sps.add_parser('search', help = 'Emit text matching pattern')

conf = {
    'rgx': dict(metavar = '<rgx>', type = re.compile, help = 'Python regular expression'),
    'path': dict(metavar = '<path>', type = Path, nargs = '*', help = 'Path(s) to input'),
    '-i': dict(action = 'store_true', help = 'Ignore case'),
}

sp1.add_argument('--ignore-case', '-i', **conf['-i'])
sp1.add_argument('--invert-match', '-v', action = 'store_true', help = 'Select non-matching lines')
sp1.add_argument('--max-count', '-m', metavar = '<n>', type = int, help = 'Stop searching after N matches')
sp1.add_argument('--context', '-C', metavar = '<n>', type = int, help = 'Print N lines of before/after context')
sp1.add_argument('--color', metavar = '<col>', choices = ('red', 'green', 'blue'), help = 'Highlight matching text: red, green, blue')
sp1.add_argument('rgx', **conf['rgx'])
sp1.add_argument('path', **conf['path'])

sp2.add_argument('--ignore-case', '-i', **conf['-i'])
sp2.add_argument('--nsubs', '-n', metavar = '<n>', type = int, help = 'N of substitutions')
sp2.add_argument('rgx', **conf['rgx'])
sp2.add_argument('rep', metavar = '<rep>', help = 'Replacement text')
sp2.add_argument('path', **conf['path'])

sp3.add_argument('--ignore-case', '-i', **conf['-i'])
sp3.add_argument('--group', '-g', metavar = '<n>', type = int, help = 'Emit just capture group N [0 for all]')
sp3.add_argument('--delim', '-d', metavar = '<s>', help = 'Delimeter for capture groups [tab]')
sp3.add_argument('--para', '-p', action = 'store_true', help = 'Emit capture groups one-per-line, paragraph-style')
sp3.add_argument('rgx', **conf['rgx'])
sp3.add_argument('path', **conf['path'])

####
# Optopus.
####

p = Parser('''
    <task=grep>   [--ignore-case] [--invert-match] [--max-count] [--context]
                  [--color <red|green|blue>]
                  <rgx> [<path>...]
    <task=sub>    [--ignore-case] [--nsubs]
                  <rgx> <rep> [<path>...]
    <task=search> [--ignore-case] [--group] [--delim | --para]
                  <rgx> [<path>...]

    <task>               : Task to perform
    <task=grep>          : Emit lines matching pattern
    <task=sub>           : Search for pattern and replace
    <task=search>        : Emit text matching pattern
    <rgx>                : Python regular expression
    <rep>                : Replacement text
    [<path>...]          : Path(s) to input
    [-i --ignore-case]   : Ignore case
    [-v --invert-match]  : Select non-matching lines
    [-m --max-count <n>] : Stop searching after N matches
    [-C --context <n>]   : Print N lines of before/after context
    [--color <>]         : Highlight matching text
    [-n --nsubs <n>]     : N of substitutions
    [-g --group <n>]     : Emit just capture group N [0 for all]
    [-d --delim <s>]     : Delimeter for capture groups [tab]
    [-p --para]          : Emit capture groups one-per-line, paragraph-style
''')

p.config('rgx', convert = re.compile)
p.config('path', convert = Path, validate = isfile)
p.config('max_count', 'context', 'nsubs', convert = int, validate = ispositive)
p.config('group', convert = int, validate = nonnegative)

####
# Argparse help text.
####

# Main program.
'''
usage: wrangle [-h] <task> ...

positional arguments:
  <task>      Task to perform
    grep      Emit lines matching pattern
    sub       Search for pattern and replace
    search    Emit text matching pattern

optional arguments:
  -h, --help  show this help message and exit
'''

# Task: grep.
'''
usage: wrangle grep [-h] [--ignore-case] [--invert-match] [--max-count <n>]
                    [--context <n>] [--color <col>]
                    <rgx> [<path> ...]

positional arguments:
  <rgx>                 Python regular expression
  <path>                Path(s) to input

optional arguments:
  -h, --help            show this help message and exit
  --ignore-case, -i     Ignore case
  --invert-match, -v    Select non-matching lines
  --max-count <n>, -m <n>
                        Stop searching after N matches
  --context <n>, -C <n>
                        Print N lines of before/after context
  --color <col>         Highlight matching text: red, green, blue
'''

# Task: sub.
'''
usage: wrangle sub [-h] [--ignore-case] [--nsubs <n>] <rgx> <rep> [<path> ...]

positional arguments:
  <rgx>                Python regular expression
  <rep>                Replacement text
  <path>               Path(s) to input

optional arguments:
  -h, --help           show this help message and exit
  --ignore-case, -i    Ignore case
  --nsubs <n>, -n <n>  N of substitutions
'''

# Task: search.
'''
usage: wrangle search [-h] [--ignore-case] [--group <n>] [--delim <s>]
                      <rgx> [<path> ...]

positional arguments:
  <rgx>                Python regular expression
  <path>               Path(s) to input

optional arguments:
  -h, --help           show this help message and exit
  --ignore-case, -i    Ignore case
  --group <n>, -g <n>  Emit just capture group N [0 for all]
  --delim <s>, -d <s>  Delimeter for capture groups [tab]
  --para, -p           Emit capture groups one-per-line, paragraph-style
'''

####
# Optopus help text.
####

'''
Usage:
  wrangle grep [--ignore-case] [--invert-match] [--max-count <n>] [--context <n>]
          [--color <red|green|blue>] [--help] <rgx> [<path>...]
  wrangle sub [--ignore-case] [--nsubs <n>] [--help] <rgx> <rep> [<path>...]
  wrangle search [--ignore-case] [--group <n>] [--delim <s> | --para] [--help]
          <rgx> [<path>...]
  wrangle --help

Arguments:
  <task>                 Task to perform:
    grep                 - Emit lines matching pattern
    sub                  - Search for pattern and replace
    search               - Emit text matching pattern
  <rgx>                  Python regular expression
  <path>                 Path(s) to input
  <rgx>                  Python regular expression
  <rep>                  Replacement text
  <path>                 Path(s) to input
  --ignore-case, -i      Ignore case
  --invert-match, -v     Select non-matching lines
  --max-count <n>, -m    Stop searching after N matches
  --context <n>, -C      Print N lines of before/after context
  --color <>             Highlight matching text: red, green, blue
  --nsubs <n>, -n        N of substitutions
  --group <n>, -g        Emit just capture group N [0 for all]
  --delim <s>, -d        Delimeter for capture groups [tab]
  --para                 Emit capture groups one-per-line, paragraph-style
  --help, -h             Print help text and exit
'''

