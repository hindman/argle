#! /usr/bin/env python

####
# Setup.
####

import sys
import argparse
import re
import os
from pathlib import Path

class Parser:

    def __init__(self, *xs, **kws):
        pass

    def config(self, *xs, **kws):
        pass

    def query(self, *xs, **kws):
        return Query()

class Query:

    def __init__(self, *xs, **kws):
        pass

    def usage_group(self, *xs, **kws):
        pass

def isfile(path):
    return True

def ispositive(n):
    return True

####
#
# Example 1: minimal.
#
# Bare-bones grep-clone so you can use Python regexes.
#
#   pgrep [-i] [-v] <rgx>
#
# Optopus much easier: shorter, more intuitive, no API to remember.
#
# Size: Argparse 4.2x bulkier.
#
####

# Optopus.

p = Parser('pgrep [-i] [-v] <rgx>')

# Argparse.

ap = argparse.ArgumentParser(prog = 'pgrep')
ap.add_argument('-i', action = 'store_true')
ap.add_argument('-v', action = 'store_true')
ap.add_argument('rgx')

####
#
# Example 2: basic.
#
# Simple pgrep with help text and optional positionals.
#
#   pgrep [-i] [-v] <rgx> [<path>...]
#
# Same LOC, but the Optopus lines are more efficient, more
# readable, and require less API knowledge. You just type
# what you want and have to remember nothing more than
# a couple of intuitive syntax rules.
#
# Size: Argparse 1.9x bulkier.
#
####

# Optopus.

p = Parser('''pgrep
    <rgx> : Python regular expression
    [<path>...] : Path(s) to input
    -i --ignore-case : Ignore case
    -v --invert-match : Select non-matching lines
''')

# Argparse.

ap = argparse.ArgumentParser(prog = 'pgrep')
ap.add_argument('rgx', help = 'Python regular expression')
ap.add_argument('path', nargs = '*', help = 'Path(s) to input')
ap.add_argument('-i', '--ignore-case', action = 'store_true', help = 'Ignore case')
ap.add_argument('-v', '--invert-match', action = 'store_true', help = 'Select non-matching lines')

####
#
# Example 3a: moderate.
#
# A pgrep with more options, plus some conversion/validation
# and choices.
#
#   pgrep [-i] [-v] <rgx> [<path>...]
#
# Argparse configuration is notably heavier and harder to read or
# scan. It provides less flexible conversion/validation (in the
# argparse example, we ignore isfile and ispositive).
#
# Size: Argparse 1.4x bulkier.
#
####

# Optopus.

p = Parser('''pgrep
    <rgx> : Python regular expression
    [<path>...] : Path(s) to input
    --ignore-case -i : Ignore case
    --invert-match -v : Select non-matching lines
    --max-count <n> -m : Stop searching after N matches
    --context <n> -C : Print N lines of before/after context
    --before-context <n> -B : Print N lines of before context
    --after-context <n> -A : Print N lines of after context
    --color red|green|blue|off : Highlight matching text [off]
''')

p.query(kind = 'opt').usage_group('options')
p.config('rgx', convert = re.compile)
p.config('path', convert = Path, validate = isfile)
p.config('m C B A', convert = int, validate = ispositive)
p.config('color', default = 'off')

# Argparse.

ap = argparse.ArgumentParser(prog = 'pgrep')
ap.add_argument('rgx', metavar = '<rgx>', type = re.compile, help = 'Python regular expression')
ap.add_argument('path', metavar = '<path>', type = Path, nargs = '*', help = 'Path(s) to input')
ap.add_argument('--ignore-case', '-i', action = 'store_true', help = 'Ignore case')
ap.add_argument('--invert-match', '-v', action = 'store_true', help = 'Select non-matching lines')
ap.add_argument('--max-count', '-m', metavar = '<n>', type = int, help = 'Stop searching after N matches')
ap.add_argument('--context', '-C', metavar = '<n>', type = int, help = 'Print N lines of before/after context')
ap.add_argument('--before-context', '-B', metavar = '<n>', type = int, help = 'Print N lines of before context')
ap.add_argument('--after-context', '-A', metavar = '<n>', type = int, help = 'Print N lines of after context')
ap.add_argument('--color', metavar = '<col>', choices = ('red', 'green', 'blue', 'off'), help = 'Highlight matching text: red|green|blue [off]')

####
#
# Example 3b: help text for moderate.
#
# Optopus help text is cleaner, easier to read, and more aesthetic.
# The traditional approach for aliases can be configured easily.
#
####

OPTOPUS_OUTPUT = '''
Usage:
  pgrep [options] <rgx> [<path>...]

Positionals:
  <rgx>                  Python regular expression
  <path>                 Path(s) to input

Options:
  --help                 Print help text and exit
  --ignore-case          Ignore case
  --invert-match         Select non-matching lines
  --max-count <n>        Stop searching after N matches
  --context <n>          Print N lines of before/after context
  --before-context <n>   Print N lines of before context
  --after-context <n>    Print N lines of after context
  --color <col>          Highlight matching text: red|green|blue [off]

Aliases:
  --help                 -h
  --ignore-case          -i
  --invert-match         -v
  --max-count            -m
  --context              -C
  --before-context       -B
  --after-context        -A
'''

ARGPARSE_OUTPUT = '''
usage: pgrep [-h] [--ignore-case] [--invert-match] [--max-count <n>]
             [--context <n>] [--before-context <n>] [--after-context <n>]
             [--color <col>]
             <rgx> [<path> ...]

positional arguments:
  <rgx>                 Python regular expression
  <path>                Path(s) to input

optional arguments:
  -h, --help            show this help message and exit
  --ignore-case, -i     Ignore case
  --invert-match, -v    Select non-matching lines
  --max-count <n>, -m <n>
                        Stop searching after N matches
  --context <n>, -C <n>
                        Print N lines of before/after context
  --before-context <n>, -B <n>
                        Print N lines of before context
  --after-context <n>, -A <n>
                        Print N lines of after context
  --color <col>         Highlight matching text: red|green|blue [off]
'''

####
# Wrap up.
####

opts = ap.parse_args()
print(opts)

