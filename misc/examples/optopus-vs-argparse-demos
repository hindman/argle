#! /usr/bin/env python

####
# Setup, just so the Argparse code is runnable.
####

import sys
import argparse
import re
import os
from pathlib import Path
from textwrap import dedent

class Parser:

    def __init__(self, *xs, **kws):
        pass

    def config(self, *xs, **kws):
        pass

    def query(self, *xs, **kws):
        return Query()

class Query:

    def __init__(self, *xs, **kws):
        pass

    def usage_group(self, *xs, **kws):
        pass

def isfile(path):
    return True

def ispositive(n):
    return True

def nonnegative(n):
    return True

####
#
# Example 1: minimal command-line script.
#
# Bare-bones grep-clone so you can use Python regexes.
#
# Compared to Argparse, Optopus much easier: shorter,
# more intuitive, with less API to remember.
#
# Size comparison: 4.0x.
#
####

# Optopus.

p = Parser('pgrep :: [-i] [-v] <rgx>')

# Argparse.

ap = argparse.ArgumentParser(prog = 'pgrep')
ap.add_argument('-i', action = 'store_true')
ap.add_argument('-v', action = 'store_true')
ap.add_argument('rgx')

####
#
# Example 2: basic script.
#
# Simple pgrep, now with help text and optional positionals.
#
# The Optopus configuration is more efficient, more
# readable, and requires less API knowledge. You just type
# what you want and have to remember nothing more than an
# intuitive syntax -- intuitive because it relies heavily
# on established conventions for command-line usage text.
#
# Size comparison: 1.9x.
#
####

# Optopus.

p = Parser('''pgrep
    <rgx> : Python regular expression
    [<path>...] : Path(s) to input
    [-i --ignore-case] : Ignore case
    [-v --invert-match] : Select non-matching lines
''')

# Argparse.

ap = argparse.ArgumentParser(prog = 'pgrep')
ap.add_argument('rgx', help = 'Python regular expression')
ap.add_argument('path', nargs = '*', help = 'Path(s) to input')
ap.add_argument('-i', '--ignore-case', action = 'store_true', help = 'Ignore case')
ap.add_argument('-v', '--invert-match', action = 'store_true', help = 'Select non-matching lines')

####
#
# Example 3a: enhanced script.
#
# A pgrep with more options, plus some conversion, validation,
# and choices.
#
# The Argparse configuration is notably heavier and harder to read
# and scan. It also provides less flexible conversion/validation
# (in the argparse example, we ignore isfile and ispositive).
#
# Size comparison: 1.5x.
#
####

# Optopus.

p = Parser('''pgrep
    <rgx> : Python regular expression
    [<path>...] : Path(s) to input
    [-i --ignore-case] : Ignore case
    [-v --invert-match] : Select non-matching lines
    [-m --max-count <n>] : Stop searching after N matches
    [-C --context <n>] : Print N lines of before/after context
    [--color red|green|blue] : Highlight matching text
''')

p.config('rgx', convert = re.compile)
p.config('path', convert = Path, validate = isfile)
p.config('m C', convert = int, validate = ispositive)

# Argparse.

ap = argparse.ArgumentParser(prog = 'pgrep')
ap.add_argument('rgx', metavar = '<rgx>', type = re.compile, help = 'Python regular expression')
ap.add_argument('path', metavar = '<path>', type = Path, nargs = '*', help = 'Path(s) to input')
ap.add_argument('--ignore-case', '-i', action = 'store_true', help = 'Ignore case')
ap.add_argument('--invert-match', '-v', action = 'store_true', help = 'Select non-matching lines')
ap.add_argument('--max-count', '-m', metavar = '<n>', type = int, help = 'Stop searching after N matches')
ap.add_argument('--context', '-C', metavar = '<n>', type = int, help = 'Print N lines of before/after context')
ap.add_argument('--color', metavar = '<col>', choices = ('red', 'green', 'blue'), help = 'Highlight matching text: red, green, blue')

####
#
# Example 3b: help text.
#
# Optopus help text is cleaner, easier to read, and more aesthetic.
#
# The traditional approach -- listing aliases with options -- is
# also supported.
#
####

OPTOPUS_TEXT = '''
Usage:
  pgrep [options] <rgx> [<path>...]

Positionals:
  <rgx>                  Python regular expression
  <path>                 Path(s) to input

Options:
  --help                 Print help text and exit
  --ignore-case          Ignore case
  --invert-match         Select non-matching lines
  --max-count <n>        Stop searching after N matches
  --context <n>          Print N lines of before/after context
  --color <col>          Highlight matching text: red, green, blue

Aliases:
  --help                 -h
  --ignore-case          -i
  --invert-match         -v
  --max-count            -m
  --context              -C
'''

ARGPARSE_TEXT = '''
usage: pgrep [-h] [--ignore-case] [--invert-match] [--max-count <n>]
             [--context <n>] [--color <col>] <rgx> [<path> ...]

positional arguments:
  <rgx>                 Python regular expression
  <path>                Path(s) to input

optional arguments:
  -h, --help            show this help message and exit
  --ignore-case, -i     Ignore case
  --invert-match, -v    Select non-matching lines
  --max-count <n>, -m <n>
                        Stop searching after N matches
  --context <n>, -C <n>
                        Print N lines of before/after context
  --color <col>         Highlight matching text: red, green, blue
'''

####
#
# Example 4a: simple subcommand-style program.
#
# The initial pgrep script has been expanded and renamed.
# It now includes various regex-based text processing utilities.
#
# Even with subcommands, the Optopus usage remains quite
# intuitive. The user has to learn a few additional syntax rules
# (the double-colon marker and positional variants like <task=grep>),
# but the API burden remains quite low. A Python programmer unfamiliar
# with the library could quickly infer the basic intent even without
# knowing the syntax rules.
#
# The Argparse configuration is notably heavier and harder to read/scan. It
# requires a lot more API to learn and remember. To avoid too much code
# repetition for shared options, the user has to take some care (in this case,
# defining a secondary data structure). As before, Argparse provides less
# flexible conversion/validation.
#
# Size comparison: 1.5x.
#
####

# Optopus.

p = Parser('''wrangle ::
    <task=grep>   [-i] [-v] [-m] [-C]
                  [--color <red|green|blue>]
                  <rgx> [<path>...]
    <task=sub>    [-i] [-n] <rgx> <rep> [<path>...]
    <task=search> [-i] [-g] [-d] <rgx> [<path>...]

    ::

    <task>             : Task to perform
    <task=grep>        : Emit lines matching pattern
    <task=sub>         : Search for pattern and replace
    <task=search>      : Emit text matching pattern
    <rgx>              : Python regular expression
    <path>             : Path(s) to input
    <rep>              : Replacement text
    -i --ignore-case   : Ignore case
    -v --invert-match  : Select non-matching lines
    -m --max-count <n> : Stop searching after N matches
    -C --context <n>   : Print N lines of before/after context
    --color <>         : Highlight matching text
    -n --nsubs <n>     : N of substitutions
    -g --group <n>     : Emit just capture group N [0 for all]
    -d --delim <s>     : Delimeter for capture groups [tab]
''')

p.config('rgx', convert = re.compile)
p.config('path', convert = Path, validate = isfile)
p.config('m C n', convert = int, validate = ispositive)
p.config('g', convert = int, validate = nonnegative)

# Argparse.

ap = argparse.ArgumentParser(prog = 'wrangle')

sps = ap.add_subparsers(dest = 'task', help = 'Task to perform', metavar = '<task>')
sp1 = sps.add_parser('grep', help = 'Emit lines matching pattern')
sp2 = sps.add_parser('sub', help = 'Search for pattern and replace')
sp3 = sps.add_parser('search', help = 'Emit text matching pattern')

conf = {
    'rgx': dict(metavar = '<rgx>', type = re.compile, help = 'Python regular expression'),
    'path': dict(metavar = '<path>', type = Path, nargs = '*', help = 'Path(s) to input'),
    '-i': dict(action = 'store_true', help = 'Ignore case'),
}

sp1.add_argument('--ignore-case', '-i', **conf['-i'])
sp1.add_argument('--invert-match', '-v', action = 'store_true', help = 'Select non-matching lines')
sp1.add_argument('--max-count', '-m', metavar = '<n>', type = int, help = 'Stop searching after N matches')
sp1.add_argument('--context', '-C', metavar = '<n>', type = int, help = 'Print N lines of before/after context')
sp1.add_argument('--color', metavar = '<col>', choices = ('red', 'green', 'blue'), help = 'Highlight matching text: red, green, blue')
sp1.add_argument('rgx', **conf['rgx'])
sp1.add_argument('path', **conf['path'])

sp2.add_argument('--ignore-case', '-i', **conf['-i'])
sp2.add_argument('--nsubs', '-n', metavar = '<n>', type = int, help = 'N of substitutions')
sp2.add_argument('rgx', **conf['rgx'])
sp2.add_argument('rep', metavar = '<rep>', help = 'Replacement text')
sp2.add_argument('path', **conf['path'])

sp3.add_argument('--ignore-case', '-i', **conf['-i'])
sp3.add_argument('--group', '-g', metavar = '<n>', type = int, help = 'Emit just capture group N [0 for all]')
sp3.add_argument('--delim', '-d', metavar = '<s>', help = 'Delimeter for capture groups [tab]')
sp3.add_argument('rgx', **conf['rgx'])
sp3.add_argument('path', **conf['path'])

####
#
# Example 4b: help text.
#
# The Optopus help text is cleaner, easier to read, more compact,
# and more aesthetic. It is also unified rather than separate.
#
# The library will also support use cases that need separate
# help text for different usage variants.
#
####

OPTOPUS_TEXT = '''
Usage:
  wrangle grep [-h] [-i] [-v] [-m <n>] [-C <n>]
          [--color <red|green|blue>] <rgx> [<path>...]
  wrangle sub [-h] [-i] [-n <n>] <rgx> <rep> [<path>...]
  wrangle search [-h] [-i] [-g <n>] [-d <s>] <rgx> [<path>...]
  wrangle -h

Positionals: task:
  grep                   Emit lines matching pattern
  sub                    Search for pattern and replace
  search                 Emit text matching pattern

Positionals: other:
  <rgx>                  Python regular expression
  <path>                 Path(s) to input

Options:
  --help                 Print help text and exit
  --ignore-case          Ignore case
  --invert-match         Select non-matching lines
  --max-count <n>        Stop searching after N matches
  --context <n>          Print N lines of before/after context
  --color <>             Highlight matching text: red, green, blue
  --nsubs <n>            N of substitutions
  --group <n>            Emit just capture group N [0 for all]
  --delim <s>            Delimeter for capture groups [tab]

Aliases:
  --help                 -h
  --ignore-case          -i
  --invert-match         -v
  --max-count            -m
  --context              -C
  --nsubs                -n
  --group                -g
  --delim                -d
'''

ARGPARSE_TEXT_HELP = '''
usage: wrangle [-h] <task> ...

positional arguments:
  <task>      Task to perform
    grep      Emit lines matching pattern
    sub       Search for pattern and replace
    search    Emit text matching pattern

optional arguments:
  -h, --help  show this help message and exit
'''

ARGPARSE_TEXT_GREP = '''
usage: wrangle grep [-h] [--ignore-case] [--invert-match] [--max-count <n>]
                    [--context <n>] [--color <col>]
                    <rgx> [<path> ...]

positional arguments:
  <rgx>                 Python regular expression
  <path>                Path(s) to input

optional arguments:
  -h, --help            show this help message and exit
  --ignore-case, -i     Ignore case
  --invert-match, -v    Select non-matching lines
  --max-count <n>, -m <n>
                        Stop searching after N matches
  --context <n>, -C <n>
                        Print N lines of before/after context
  --color <col>         Highlight matching text: red, green, blue
'''

ARGPARSE_TEXT_SUB = '''
usage: wrangle sub [-h] [--ignore-case] [--nsubs <n>] <rgx> <rep> [<path> ...]

positional arguments:
  <rgx>                Python regular expression
  <rep>                Replacement text
  <path>               Path(s) to input

optional arguments:
  -h, --help           show this help message and exit
  --ignore-case, -i    Ignore case
  --nsubs <n>, -n <n>  N of substitutions
'''

ARGPARSE_TEXT_SEARCH = '''
usage: wrangle search [-h] [--ignore-case] [--group <n>] [--delim <s>]
                      <rgx> [<path> ...]

positional arguments:
  <rgx>                Python regular expression
  <path>               Path(s) to input

optional arguments:
  -h, --help           show this help message and exit
  --ignore-case, -i    Ignore case
  --group <n>, -g <n>  Emit just capture group N [0 for all]
  --delim <s>, -d <s>  Delimeter for capture groups [tab]
'''

####
#
# Example 5a: expanded subcommand-style program.
#
# __
#
# __
#
# __
#
# Size comparison: __x.
#
####

# Optopus.

p = Parser('''wrangle ::
<task=grep>   [-i] [-v] [-m] [-C]
              [--color <red|green|blue>]
              <rgx> [<path>...]
<task=sub>    [-i] [-n] <rgx> <rep> [<path>...]
<task=search> [-i] [-g] [-d | -p] <rgx> [<path>...]

grep::

    ```
    The grep command emits input lines matching (or not
    matching) the regular expression.
    ```

    <rgx> : Python regular expression
    <path> : Path(s) to input
    -i --ignore-case : Ignore case
    -v --invert-match : Select non-matching lines
    -m --max-count <n> : Stop searching after N matches
    -C --context <n> : Print N lines of before/after context
    --color <> : Highlight matching text

sub::

    ```
    The sub command emits all lines after performing a search
    and replace operation on each.
    ```

    <rgx>
    <rep> : Replacement text
    <path>
    -i
    -n --nsubs <n> : N of substitutions

search::

    ```
    The search command emits text matching (or not matching)
    the regular expression. The text will contain the entire
    match as a line (the default), the matched groups separated
    by a delimeter (-d), or one group per line in paragraph-style
    with blank line between matches (-p).
    ```

    <rgx>
    <path>
    -i
    -g --group <n> : Emit just capture group N [0 for all]
    -d --delim <s> : Delimeter for capture groups [tab]
    -p --para      : Emit capture groups paragraph style
''')

p.config('rgx', convert = re.compile)
p.config('path', convert = Path, validate = isfile)
p.config('m C n', convert = int, validate = ispositive)
p.config('g', convert = int, validate = nonnegative)

# Argparse.

####
# Wrap up: to execute the last Argparse example.
####

opts = ap.parse_args()
print(opts)

