--------
road-map: Road map
--------

Sketch the parsing algo [in process on paper]

Sketch the Grammar data structure [in process on paper]

Organize and simplify the planning docs/notes:

    - old_planning_notes.txt
    . specification.txt
    . action.txt
    x dev.txt
    x discussion.txt
    x reference.txt
    x toc.txt

why CLI grammar is amenable to PEG, recursive descent, etc. It is 
a context-sensitive language. Read this and take notes:

    https://cs.stackexchange.com/questions/7716/can-someone-give-a-simple-but-non-toy-example-of-a-context-sensitive-grammar/7717#7717?newreg=2930da1fdc374a098aa9d9b17b33b195
    https://www.quora.com/What-is-an-intuitive-way-to-describe-the-differences-between-context-sensitive-context-free-and-regular-grammars-Explanations-with-examples-relating-to-human-language-would-be-particularly-helpful

Design plan.

    x Grammar syntax.
    - Class names and attributes.
    - Naming conventions.
    - Terminology.
    - API.

    * The code currently reads as very heavy; try to lighten up naming.

Road map.

    - Try to organize into top-level features.
    - What is an MVP?
    - Shift things that can wait to later.

Rename project: optopuss:

    - Git repo: remote and local.
    - Package and module name.
    - Notes files.

    - How quickly could we publish a beta version of something useful?
        - Maybe an MVP that does zero-config parsing?

    - Shift to a master/dev branching model, plus release tags.

--------
feature-list: Feature list
--------

Support zones and anchors to regulate argument ordering (via the API, not grammar syntax).

Support high-precendence options.

Need to support other formats (eg, POD or man pages).

Maybe support the tool's usages for simple conversion/validation of arguments
to functions.

Ability to emit parser config as data.

Support variant validation hooks.

Support sub-variants.

Support abbrev not only for long-options but also choices.

--------
items-from-prior-road-map: Items from prior road map
--------

- Drop the Simple spec: just have a grammar and allow it to parse in full (with
  variants), in basic usage (standard command line grammar), and for an
  individual option.

- Don't worry about using simple dependencies: attrs, short_con.

- tox: py27 tests fail under tox (they pass under development virtualenv).

- Implement a proof-of-concept for the new parsing approach:

- asserts in code: don't rely on them for error checking

- GrammarSpecParser and complex Phrase parsing.
  - Planning.
  - Basic GrammarSpecParser implementation.
  - Complex grammars:
    - Varying nargs and ntimes.
    - Keeping track of partially-parsed results.
    - Pruning no-longer-eligible subphrases.
    - Keeping track of alternatives.
    - Backtracking using those alternatives.

- Support tolerant.

- Check argparse for other behaviors.

- Opt: allow `x` or `<x>`

- Handle --opt=val.

- Constructors should support dict-based configuration. Parser does, but not
  FormatterConfig and Section.

- help_text(): usage section: when wrapping, keep options together with their
  option args.

- Wildcards mode: allow user to specify pos/opt/both/True.

- nargs and ntimes: support regex-style quantifiers, both in specs and in the
  generated USAGE help-text.

- Negatable options: `--smart-case` and `--no-smart-case`.

- API thematic configuration.

- Help text customization.

- Support allow_abbreviation boolean.

- Option customization: eg, the regex to identify long opt, short opt, etc.

- Better exception strategy.

- Man-page support.

- Integration with configuration files.

- Integration with ENV variables.

- Miscellaneous.

