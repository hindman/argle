--------
road-map: Road map
--------

Design plan.

    - specification.txt

        - Grammar data structure
        - Class names and attributes.
        - Naming conventions.
        - Terminology.
        - API.

Road map.

    - action.txt

    - Possible milestones:

        Nail down naming, classes, and API.
        MVP: zero-config parsing.
        Publish to claim pypi name.

        Parsing backed by core grammar.
        Usage text creation.
        High precendence.
        Dispatch support.
        Anchored Opts.
        Conveniences.
        Integration with config data and env variables.

Rename project: optopuss:

    - Git repo: remote and local.
    - Package and module name.
    - Notes files.
    - Shift to a master/dev branching model, plus release tags.

Drop PY2 support.
    - There is a community effort to get libraries to stop
      supporting PY2 starting 2020: python3statement.org

--------
feature-list: Feature list
--------

Support zones and anchors to regulate argument ordering (via the API, not grammar syntax).

Support high-precendence options.

Need to support other formats (eg, POD or man pages).

Maybe support the tool's usages for simple conversion/validation of arguments
to functions.

Ability to emit parser config as data.

Support variant validation hooks.

Support sub-variants.

Support abbrev not only for long-options but also choices.

--------
items-from-prior-road-map: Items from prior road map
--------

- Drop the Simple spec: just have a grammar and allow it to parse in full (with
  variants), in basic usage (standard command line grammar), and for an
  individual option.

- Don't worry about using simple dependencies: attrs, short_con.

- tox: py27 tests fail under tox (they pass under development virtualenv).

- Implement a proof-of-concept for the new parsing approach:

- asserts in code: don't rely on them for error checking

- GrammarSpecParser and complex Phrase parsing.
  - Planning.
  - Basic GrammarSpecParser implementation.
  - Complex grammars:
    - Varying nargs and ntimes.
    - Keeping track of partially-parsed results.
    - Pruning no-longer-eligible subphrases.
    - Keeping track of alternatives.
    - Backtracking using those alternatives.

- Support high-precendence.

- Check argparse for other behaviors.

- Handle --opt=val.

- Constructors should support dict-based configuration. Parser does, but not
  FormatterConfig and Section.

- help_text(): usage section: when wrapping, keep options together with their
  option args.

- Wildcards mode: allow user to specify pos/opt/both/True.

- nargs and ntimes: support regex-style quantifiers, both in specs and in the
  generated USAGE help-text.

- Negatable options: `--smart-case` and `--no-smart-case`.

- API thematic configuration.

- Help text customization.

- Support allow_abbreviation boolean.

- Option customization: eg, the regex to identify long opt, short opt, etc.

- Better exception strategy.

- Man-page support.

- Integration with configuration files.

- Integration with ENV variables.

- Support no-args behaviors, such as show-help or default-args.

- Support global configuration to automatically add single-letter aliases.

