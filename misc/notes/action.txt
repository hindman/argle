--------
todos: TODOs
--------

Publish:
    - README
    - setup.py
    - tasks.py
    - dev.txt
    - Publish.
    - Check in pypi and confirm pip-install.

Figure out how to handle options with 2+ params, where the params each need
their own choices, conversion, or validation.

    - Does that require support a nested structure for attributes like
      choices, convert, validate? For example:

        Opt('--foo', nparams = 2, choices = [('a', 'b'), ('c', 'd')])
        Opt('--bar', nparams = 2, convert = [[int], [float]])

    - Similar considerations apply to nargs. But not to ntimes. Basically, it
      is needed for any Opt attribute that configures the params/args
      individually (as oppose to configuring the entire Opt as an entity).

        dest      # Needed only for parameters.
        metavar

        default
        factory
        value

        choices
        convert
        validate

--------
road-map: Road map
--------

Core algorithms:

    Data-oriented exception strategy.

    Grammar syntax parsing.

    Argument parsing.

    Look into Github Actions.

Core enhancements:

    Opt creation via convenience syntax.

    Error selection during failed argument parsing.

    Conversion/validation/choices.

Help text: basic:

    Automatic --help.

    Help text: usage.

    Help text: options.

Parsing enhancements:

    Other parsing modes: key-val, greedy, unknown-ok, unconverted-ok, invalid-ok.

    No-args behaviors, such as show-help or default-args.

    Data flattening/non-flattening in Result.

Help text: enhancements:

    Help text: show defaults and choices.

    Help text: sections.

Alternative inputs: basics:

    Aliases.

    Tight binding of option and parameter: --opt=PARAM.

    Short-flag bundling.

    Option-prefix customization.

    Non-option arguments having option prefix: negative numbers.

    Non-option arguments having option prefix: generally via a configurable escape
    prefix.

Opt enhancements:

    Opt.factory.

    Negatable options: --foo and --no-foo.

    File-type arguments. Let user decide behaviors: (1) validate path exists, (2)
    opening (with encoding, mode, etc). Also support `-` for stdin/stdout.

Alternative inputs: handy:

    Abbrevations for long-options.

    Abbrevations for choices values.

Dispatching:

    Help dispatch.

    Dispatch.

Grammar enhancements:

    High-precendence options.

    Anchored Opts.

Parser enhancements:

    Parser.query() and bulk configuration.

    Parser utilities: warn(), help(), error(), exit().

    Parser configuration to add single-letter option aliases automatically.

    Group validation.

Alternative inputs: other:

    @FILE (command line arguments from a file). See argparse fromfile_prefix_chars.

    Case-insensitive options.

    Intermixed parsing mode. See argparse.parse_intermixed_args().

Text customization:

    Help text: short options in separate section.

    Help text: usage: symbolically named groupings.

    Help text: customizations via config and/or hooks.

    Help text: supplied via alternative devices (text file or blob, with
    f-string support).

    Error text: customizations via config and/or hooks.

    Man-page-style help text.

Development aids:

    Hidden options: either totally or in specific types of help text.

    Automatic --version.

    Ability to emit Parser configuration as data (and re-create from data).

    Bash completion.

    Integration with configuration data and environment variables.

