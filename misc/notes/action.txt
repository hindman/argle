--------
todos: TODOs
--------

Strategy reassessment.

    - Define a few realistic programs ranging from simple to fairly complex
      (job-client is example of the latter). Ignore examples that argparse
      cannot support. Try to define examples that others can understand
      intuitively.

    - Configure the parser for each script.

        - Argparse.
        - Optopus: new strategy.

Augment grammar syntax:

    - Reassess optional parameter syntax:

        - Uppercase for parameters is very common, and I keep feeling internal
          pressure to support it.

        - Also, consider how metavar will work (alternative naming idea: sym,
          for symbolic value). Is there any point to a rigid brace-reqired
          syntax if the metavar can just lead to usage text that works
          differently than the grammar syntax. Ideally the two would be aligned
          well, as least on basics.

        - Allow UPPER word to also represent a parameter. Use this
          general parameter syntax:

            SYM.dest=vals

        - Some examples:

            Configuration     | Usage text
            ---------------------------------
            --point _ _       | --point {} {}
            --point X Y       | --point X Y
            --point X.x Y.y   | --point X Y
            --point X.x Y.y=0 | --point X 0       # But these are a bit ambiguous.
            --point .x .y     | --point {} {}
            --point _ =0      | --point {} 0
            --point X Y=0     | --point X 0

        - Strictly speaking, uppercase paramaters can cause some ambiguity,
          especially in more complex situations. But they are very rare. Maybe
          just allow the user to request explicit braced-parameters in usage
          text (or even angle-bracket parameters, like Git).

    - Program name as the first word.

    - The option text, optionally with section titles.

    - Make sure we can support full spectrum implied by this meta-grammar.

        [PROG] (OPTS | VARIANTS) [OPTSHELP | SECTION OPTSHELP]...

Publish:
    - README
    - setup.py
    - tasks.py
    - dev.txt
    - Publish.
    - Check in pypi and confirm pip-install.

--------
road-map: Road map
--------

Core algorithms:

    Data-oriented exception strategy.

    Grammar syntax parsing.

    Argument parsing.

    Look into Github Actions.

Core enhancements:

    Opt creation via convenience syntax.

    Error selection during failed argument parsing.

    Conversion/validation/choices.

Help text: basic:

    Automatic --help.

    Help text: usage.

    Help text: options.

Parsing enhancements:

    Other parsing modes: key-val, greedy, unknown-ok, unconverted-ok, invalid-ok.

    No-args behaviors, such as show-help or default-args.

    Data flattening/non-flattening in Result.

Help text: enhancements:

    Help text: show defaults and choices.

    Help text: sections.

Alternative inputs: basics:

    Aliases.

    Tight binding of option and parameter: --opt=PARAM.

    Short-flag bundling.

    Option-prefix customization.

    Non-option arguments having option prefix: negative numbers.

    Non-option arguments having option prefix: generally via a configurable escape
    prefix.

Project health:

    Add validation to user-facing callables. [consider valid8; or roll simple one]

    Documentation.

    Docstrings.

Opt enhancements:

    Opt.factory.

    Negatable options: --foo and --no-foo.

    File-type arguments. Let user decide behaviors: (1) validate path exists, (2)
    opening (with encoding, mode, etc). Also support `-` for stdin/stdout.

Alternative inputs: handy:

    Abbrevations for long-options.

    Abbrevations for choices values.

Dispatching:

    General dispatch.

    Help dispatch.

    Different dispatch for --help vs -h.

Grammar enhancements:

    High-precendence options.

    Anchored Opts.

Parser enhancements:

    Parser.query() and bulk configuration.

    Parser utilities: warn(), help(), error(), exit().

    Parser configuration to add single-letter option aliases automatically.

    Group validation.

Alternative inputs: other:

    @FILE (command line arguments from a file). See argparse fromfile_prefix_chars.

    Case-insensitive options.

    Intermixed parsing mode. See argparse.parse_intermixed_args().

Text customization:

    Help text: short options in separate section.

    Help text: usage: symbolically named groupings.

    Help text: customizations via config and/or hooks.

    Help text: supplied via alternative devices (text file or blob, with
    f-string support).

    Error text: customizations via config and/or hooks.

    Man-page-style help text.

Development aids:

    Hidden options: either totally or in specific types of help text.

    Automatic --version.

    Ability to emit Parser configuration as data (and re-create from data).

    Bash completion.

    Integration with configuration data and environment variables.

