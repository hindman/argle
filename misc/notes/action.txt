--------
Road map
--------

Organize and simplify the planning docs/notes:

    old_planning_notes.txt

    classes_and_attributes.txt
    road_map.txt
    api_notes.txt
    design_decisions.txt
    dev_notes.txt
    goals_and_reqs.txt
    grammar_syntax_notes.txt
    other_tools.txt
    reference_material.txt

Design plan.

    - Terminology and names.
    - Class names and relationships.
    - Spec syntax.
    - API.
    - Naming conventions.

    * The code currently reads as very heavy; try to lighten up naming.

Road map.

Rename project: optopuss:

    - Git repo: remote and local.
    - Package and module name.

--------
Feature list
--------

Need to support other formats (eg, POD or man pages).

Maybe support the tool's usages for simple conversion/validation of arguments
to functions.

Ability to emit parser config as data.

--------
Items from prior road map
--------

- Don't worry about using simple dependencies: attrs, short_con.

- tox: py27 tests fail under tox (they pass under development virtualenv).

- Implement a proof-of-concept for the new parsing approach:

- asserts in code: don't rely on them for error checking

- GrammarSpecParser and complex Phrase parsing.
  - Planning.
  - Basic GrammarSpecParser implementation.
  - Complex grammars:
    - Varying nargs and ntimes.
    - Keeping track of partially-parsed results.
    - Pruning no-longer-eligible subphrases.
    - Keeping track of alternatives.
    - Backtracking using those alternatives.

- Support tolerant.

- Check argparse for other behaviors.

- Opt: allow `x` or `<x>`

- Handle --opt=val.

- Constructors should support dict-based configuration. Parser does, but not
  FormatterConfig and Section.

- help_text(): usage section: when wrapping, keep options together with their
  option args.

- Wildcards mode: allow user to specify pos/opt/both/True.

- nargs and ntimes: support regex-style quantifiers, both in specs and in the
  generated USAGE help-text.

- Negatable options: `--smart-case` and `--no-smart-case`.

- API thematic configuration.

- Help text customization.

- Support allow_abbreviation boolean.

- Option customization: eg, the regex to identify long opt, short opt, etc.

- Better exception strategy.

- Man-page support.

- Integration with configuration files.

- Integration with ENV variables.

- Miscellaneous.

