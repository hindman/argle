--------
todos: TODOs
--------

Reorientation:
    x README.md
    - specification.txt [next: classes-and-attributes]
    - action.txt
    - toc.txt
    - discussion.txt
    - dev.txt
    - reference.txt
    - parser.py
    - constants.py
    - errors.py
    - grammar.py
    - _old.py
    x version.py

Implement data-oriented exception strategy.

Grammar syntax parsing.

Convert grammar-syntax AST into a Grammar.

Argument parsing.

Issues encounted while working on mvs: fold into the optopus plan:

    - Did user supply a value or did it come from the configured default?

        - After parsing occurs, how does the user tell if an opts attribute was
          (1) supplied in the command-line args vs (2) obtain from the default.

        - This an annoying problem with no good argparse solutions.

    - Merging user-preferences and opts.

        - User-prefs and opts tend to have the same validation needs.

        - And the merge them can be tricky.

            - Maybe this isn't too bad if we could solve the argparse
              deficiency where you don't know if the opt was supplied or was
              the default.

            - If we knew that, then the merge logic would be simpler[?].

                for K, V in prefs.items():
                    if opts.K was not set by user:
                        opts.K = V

    - How does a user request a non-default location for user-prefs?

        - Environment variable?

    - Negatable options:

        - Whether/how to display in help text.
        - How to represent data.

--------
road-map: Road map
--------

Core enhancements:

    Error selection during failed argument parsing.

    Conversion/validation/choices.

    Look into Github Actions for CI.

Help text: basic:

    Automatic --help.

    Help text: usage.

    Help text: options.

    Docs: proper README; shift why-build elsewhere [see readme-next-version].

    Upgrade classifers to beta.

Parsing enhancements:

    Other parsing modes: no-conf, unknown-ok, unconverted-ok, invalid-ok.

    No-args behaviors, such as show-help or default-args.

    Data flattening/non-flattening in Result.

Help text: enhancements:

    Help text: show defaults and choices.

    Help text: sections.

Alternative inputs: basics:

    Aliases.

    Tight binding of option and parameter: --opt=<param>

    Short-flag bundling.

    Option-prefix customization.

    Quoting customization.

    Non-option arguments having option prefix: negative numbers.

    Non-option arguments having option prefix: generally via a configurable escape
    prefix.

Project health:

    Add validation to user-facing callables. [consider valid8; or roll simple one]

    Documentation.

    Docstrings.

Opt enhancements:

    Opt.factory.

    Negatable options: --foo and --no-foo.

    File-type arguments. Let user decide behaviors: (1) validate path exists, (2)
    opening (with encoding, mode, etc). Also support `-` for stdin/stdout.

Alternative inputs: handy:

    Case-sensitive grammar syntax and usage text.

    Abbrevations for long-options.

    Abbrevations for choices values.

Dispatching:

    General dispatch.

    Help dispatch.

    Different dispatch for --help vs -h.

Grammar enhancements:

    High-precendence options.

    Anchored Opts.

Parser enhancements:

    Parser.query() and bulk configuration.

    Parser utilities: warn(), help(), error(), exit().

    Parser configuration to add single-letter option aliases automatically.

    Group validation.

Alternative inputs: other:

    @FILE (command line arguments from a file). See argparse fromfile_prefix_chars.

    Case-insensitive options.

Text customization:

    Help text: short options in separate section.

    Help text: usage: symbolically named groupings.

    Help text: customizations via config and/or hooks.

    Help text: supplied via alternative devices (text file or blob, with
    f-string support).

    Error text: customizations via config and/or hooks.

    Man-page-style help text.

Development aids:

    Hidden options: either totally or in specific types of help text.

    Automatic --version.

    Ability to emit Parser configuration as data (and re-create from data).

    Bash completion.

    Integration with configuration data and environment variables.

Other possibilities:

    Enhanced quantifiers: range-step and disjoint values.

