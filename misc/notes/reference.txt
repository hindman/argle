--------
parsing-resources: Parsing resources
--------

Extended Backus–Naur form (EBNF):

    https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form

Recursive descent parser:

    https://en.wikipedia.org/wiki/Recursive_descent_parser

Parsing expression grammar (PEG):

    # Very useful on PEGs, packrat parsing, and CFGs (notes below).
    https://stackoverflow.com/questions/1410477/what-is-packrat-parsing

    https://en.wikipedia.org/wiki/Parsing_expression_grammar

Code examples:

    Pyparsing: https://github.com/pyparsing/pyparsing/

    Build a simple interpreter: https://github.com/rspivak/lsbasi

    http://jayconrod.com/posts/37/a-simple-interpreter-from-scratch-in-python-part-1

Books:

    Language Implementation Patterns: Create Your Own Domain-Specific and General Programming Languages

--------
parsing-process-generally: Parsing process generally
--------

Given a grammar, generate an appropriate parser.

Given input text, use a lexer to generate typed tokens.

Feed the tokens into the parsers, which determines validity and returns a
syntax tree.

--------
pegs-cfgs-and-packrat-parsing: PEGs, CFGs, and packrat parsing
--------

Resource:

    https://stackoverflow.com/questions/1410477/what-is-packrat-parsing

Many parsers use context-free grammars (CFG). For example:

    E -> E * E | E + E | (E) | N
    N -> D | DN
    D -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

    Rule 1: nonterminal E can be replaced E * E, etc.
    Rule 2: nonterminal N can be replaced by D or DN.
    Rule 3: nonterminal D can be replaced by any single digit.

    The rules can generate any simple arithmetic expression using +, *, parens,
    and single digits.

CFGs are a compact way to represent a collection of strings and they have a
rich and well-understood theory. However, they have two main drawbacks.

    - A CFG defines a collection of strings, but doesn't tell you how to check
      check a string for validity. This means that whether a particular CFG
      will lend itself to a nice parser depends on the particulars of how the
      parser works, meaning that the grammar author may need to familiarize
      themselves with the internal workings of their parser generator to
      understand what restrictions are placed on the sorts of grammar
      structures can arise.

    - Grammars can be ambiguous. For example, the above grammar generates the
      string 2 + 3 * 4, but does so in two ways. In one way, we essentially get
      the grouping 2 + (3 * 4), which is what's intended. The other one gives
      us (2 + 3) * 4, which is not what's meant. This means that grammar
      authors either need to ensure that the grammar is unambiguous or need to
      introduce precedence declarations auxiliary to the grammar to tell the
      parser how to resolve the conflicts. This can be a bit of a hassle.

Parsing expression grammars (PEG) are alternatives to CFGs. Here's the same
arithmetic example in PEG form:

    E -> F + E | F
    F -> T * F | T
    T -> D* | (E)
    D -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 / 9

A key feature of PEGs is explicit ordering of parsing alternatives. The syntax
can be read as "First try this, then this, etc". In that sense, PEGs directly
encode into the grammar structure itself how the parsing is to be done. This
approach resolves the ambiguity noted above and lends itself toward direct
translation from grammar to parser generation.

The Packrat Parsing Algorithm builds on the PEG approach. The algorithm is
conceptually quite simple. At a high level, a packrat parser begins with the
start symbol, then tries the ordered choices, one at a time, in sequence until
it finds one that works. As it works through those choices, it may find that it
needs to match another nonterminal, in which case it recursively tries matching
that nonterminal on the rest of the string. If a particular choice fails, the
parser backtracks and then tries the next production.

The algorithm combines the PEG approach with memoization (essentially dynamic
programming without the bookkeeping) to achieve linear performance.

--------
grammar-types: Grammar types
--------

References:

    https://en.wikipedia.org/wiki/Chomsky_hierarchy
    https://en.wikipedia.org/wiki/Formal_grammar
    https://stackoverflow.com/questions/14589346/is-c-context-free-or-context-sensitive
    https://www.quora.com/What-is-an-intuitive-way-to-describe-the-differences-between-context-sensitive-context-free-and-regular-grammars-Explanations-with-examples-relating-to-human-language-would-be-particularly-helpful

Formal grammars:

    In formal language theory, a grammar describes how to form strings from a
    language's alphabet (or elemental values) that are valid according to the
    language's syntax.

    More specically, a grammar consists of:

        - A finite set N of nonterminal symbols (disjoint from the strings
          formed from G).

        - A finite set T of terminal symbols (disjoint from N).

        - A finite set P of production rules for rewriting strings via
          substitution.

    A grammar is usually thought of as a language generator. However, it can
    also sometimes be used as the basis for a recognizer -- a function in
    computing that determines whether a given string belongs to the language or
    is grammatically incorrect. To describe such recognizers, formal language
    theory uses separate formalisms, known as automata theory.

    Parsing is the process of recognizing an utterance (a string in natural
    languages) by breaking it down to a set of symbols and analyzing each one
    against the grammar of the language.

    Most languages have the meanings of their utterances structured according
    to their syntax—a practice known as compositional semantics. As a result,
    the first step to describing the meaning of an utterance in language is to
    break it down part by part and look at its analyzed form (known as its
    parse tree in computer science, and as its deep structure in generative
    grammar).

Chomsky Hierarchy:

    The following table summarizes each of Chomsky's four types of grammars, the
    class of language it generates, the type of automaton that recognizes it, and
    the form its rules must have.

    Grammar | Languages               | Recognizer automaton       | Allowed production rules
    -----------------------------------------------------------------------------------
    Type-3  | Regular                 | Finite state               | A   => a | aB
    Type-2  | Context-free            | Non-deterministic pushdown | A   => x
    Type-1  | Context-sensitive       | LB-ND Turing machine       | xAy => xzy
    Type-0  | Recursively enumberable | Turing machine             | z   => x

    Symbols and abbreviations:

        * These symbols are not standard. Typically, uppercase are terminals,
          lowercase are non-terminals, and Greek are sequences of either.

        a     | Terminal
        ---------------------------------------------
        M     | Non-terminal
        N     | Same
        ---------------------------------------------
        x     | Sequence of terminals or non-terminals
        y     | Same
        z     | Same, and this one cannot empty
        ---------------------------------------------
        LB-ND | Linear-bounded non-deterministic

    Understanding the production rules:

        - Regular grammar (Type-3) is very rigid. Every non-terminal produces
          at least a left-side terminal. The automaton requires no memory and
          can make each decision based on the information directly at hand.

            Classic example (using regex quantifier notation):

                L = a{n}

                X = ''
                X = a
                X = Xa

            In other words, the language consisting of all strings of
            consisting of zero or more letter a.

        - Context-free grammar (Type-2) is more open: a non-terminal can
          generate sequences of terminals and/or non-terminals. The constraint
          is that every non-terminal maps to exactly one pre-defined thing.
          Mappings never change dynamically during parsing. This automaton
          requires memory to support backtracking (classically, a stack).

            Classic example:

                L = a{n} b{n}

                X = ''
                X = ab
                X = aXa
                X = bXb

            To recognize strings in this language, the parser needs to remember
            how many letter a were seen.

        - Context-sensitive (Type-1) can be understood in relation to
          context-free. If you look only at the middle terms, you see the
          context-free production rule just discussed (A => z). But now what
          each non-terminal maps to can differ depending on the context (x and
          y are the surrounding context on both sides of the rule).

            Classic example:

                L = a{n} b{n} c{n}

            At first, I did not understand why this is any different than a{n}
            b{n}. Couldn't you just remember N in the same way? Perhaps the
            answer lies less in the ordinary practicalities of how one would
            implement a real parser but in writing the grammar rules.

        - Context-sensitive (Type-0) is wide open, no constraints on the
          grammar.

--------
api-driven-vs-text-driven-examples: API-driven vs text-driven examples
--------

# Simple programs.
examples/get-pocket-items
examples/daily-reading

# More complex examples: contrast the API vs the text examples.
misc/examples/job-client-via-api
misc/examples/job-client-via-api-thematic
misc/examples/job-client-via-text
misc/examples/job-client-via-text-subparsers

--------
other-tools: Other tools
--------

App::Cmd

    - Conclusion: not sure that I'm sold on this.

    - The documentation is difficult.

    - The module uses Params::Validate and Getopt::Long::Descriptive, and it
      does not appear to be flexible in that regard.

Getopt::Long::Descriptive

    - Front end for Getopt::Long

    - Promising in several respects.

    - One could write a subclass to modify help text output.

    - But it does not support the basic element of a option arg name (eg
      --logfile PATH)

    - So subclassing will take you only so far.

    - Supports concept of "implies": if -X, then -Y and -Z are required.

    - Support concept of a hidden option (not in help text).

Getopt::Tabular

    - Tabular spec definition

    - Validation

    - Help text: not bad, but not controllable

    - Can parse an array besides ARGV

    - Looks unmaintained.

Getopt::Lucid:

    - Interesting approach

    - Emphasizes readability of specification

    - Uses a chainable module when defining specs

    - Also allows you to merge options with config

    - Does not produce help text

Getopt::Euclid

    - Creates parser from your application's POD, specifically:

    - The POD can also include validation assertions.

    - Still active.

    - Takes input from @ARGV and puts results in %ARGV

    - I don't like the fact that it uses globals and is non-OO

Getopt::Simple

    - Wrapper around Getopt::Long

    - Produces help text.

Getopt::Declare

    - Builds option parser from a help-text string

    - It's an interesting idea.

    - Requires a special syntax to define the spec and that syntax is embedded
      in the help string

Other Perl modules briefly checked:

    - Abridged
    - Auto
    - Base
    - Chain
    - Clade
    - Compac
    - Complete::Args
    - Easy
    - Fancy
    - Flex
    - Helpful
    - Lazy
    - LL
    - OO
    - Param
    - Plus
    - Regex
    - Tiny
    - Usaginator
    - Params::Validate
    - Params::Smart
    - Getargs::Mixed
    - Getargs::Long
    - Pod::WikiDoc

Pod::Usage

    - You document your application with POD.

    - Then you simply use  Getopt::Long and PodUsage.

    - In addition to getting a usage message, you get a man page (based on
      pod2man) and your application is CPAN-ready.

    - As a result, you have a decent level of control over the look of the
      usage and help text. To the extent that you can't control appearance, at
      least your documentation looks standard.

    - When you invoke pod2usage, you can specify a verbosity level, which
      controls the POD sections that are rendered.

    - The main drawback is POD itself.

    - You could wrap the module to simplify usage further: trap the WARN from
      GetOptions and invoke your own help(); then invoke pod2usage if --help or
      --man are requested.

MooseX::GetOpt

    - Front end for Geopt::Long
    - Requires using Moose
    - Not many new ideas here

Python plac module

    - This module wraps argparse.

    - It deduces the needed parser based on: the signature of the main()
      function (for positional arguments); annotations of the main() function
      (for options).

    - Advertises itself as being super easy to use and setup, but by the time
      you create all of the awkward-looking annotations, it seems like argparse
      would have been simpler.

Ruby Trollop

    - Very simple to use

    - Not much customizability.

Python argparse module

    - Important concept: the module should parse/validate arguments or options

Python's docopt:

    - Primary ideas: (1) write good usage text and build opt parser from it.
      and (2) parsing should be separate from validation.

    - Tried to use it, but seems half-baked:

        - The parsing code is up to the task of achieving goal of infering
          complex logic and arg/option interdependencies from a usage text).

        - It's easy to cause their demo example (misc/examples/naval-fate) to
          fail just be making a few obvious changes to the configuration.

    - There is a fundamental problem with separating arg parsing from data
      validation. Because docopt does not validate, it lacks the concept like
      argparse's `choices`. As a result, a library focused on giving the user
      clear usage text has no mechanism for telling the user what the allowed
      values are for an option-argument.

    - The library also has an awkward way of creating the returned opts
      dictionary, with keys like `--foo` and `<path>`.

    - The library's returned dict also divorces an option's presence (a
      True/False flag) from the value of its argument. For example, a spec like
      `-C PATH` would produce a dict like `{'-C': True, 'PATH', '/tmp/blah'}`.
      That seems like a fundamental problem.

Python: Click

    - Interesting but opinionated

    - Explicitly rejects customizability of help output

    - Option parsing configuration ends up spread widely across your code base,
      next to the actual functions that do the work, rather than centralized

    - Is lazily composable

    - Follows the Unix command line conventions

    - Supports loading values from environment variables

    - Supports for prompting of custom values

    - Nestable and composable

    - Supports file handling

    - Useful helpers: getting terminal dimensions; ANSI colors; fetching direct
      keyboard input; screen clearing; finding config paths; launching apps and
      editors.

Python invoke:

    - Part of the Fabric ecosystem.

    - Good for a collection of small tools used by a project.

    - Not a full CLI arg parser.

Ruby Thor

    - Similar to Fabric in its approach.

Ruby GLI

--------
problems-scenarios-from-argparse: Problems scenarios from argparse
--------

https://stackoverflow.com/questions/18025646

    Grammar needed:

        frob -x [other-opts]
        frob -y -z [other-opts]

https://stackoverflow.com/questions/4466197

    Grammar needed:

        frob [ -s | -f [-m] ] <host>
        frob -h

https://stackoverflow.com/questions/28660992

    Grammar needed:

        - Option takes 2 args.
            - The 1st arg must be A|B|C.
            - The 2nd arg must be X|Y|Z.

        frob [-a {A,B,C} {X,Y,Z}]
        frob -h

    Solvable if the parser allows `choices` to take a list:

        dict(
            option = '-a',
            nargs = 2,
            choices = [(A, B, C), (X, Y, Z)],
        )

https://stackoverflow.com/questions/25626109

    Grammar needed: if -x if present, -a and -b are also required.

        frob          [-y] [-z]
        frob -x -a -b [-y] [-z]

http://bugs.python.org/issue11588

    Grammar needed:

        - Sets of arguments that must occur together.

        frob -o           [-x]
        frob -r (-p | -s) [-x]

    Grammar needed:

        frob -a -b [-x]
        frob -c -d [-x]

http://bugs.python.org/issue10984

    Grammar needed:

        - User has three flags: -a -b -c
        - Plus some other flags: -x -y
        - The -b flag is incompatible with both -a and -c.

        frob [-b]      [-x] [-y]
        frob [-a] [-c] [-x] [-y]

https://stackoverflow.com/questions/11455218

    Grammar needed:

        - If -y is given, -x is required.

        frob [-x] [-z]
        frob -y -x [-z]

https://stackoverflow.com/questions/27681718

    Grammar needed:

        frob [-x] [-y] (<a> <b> <c>)...

    Approach:

        - Allow groups of positionals to be repeated, with append-like action.

https://stackoverflow.com/questions/19114652

    Grammar needed:

        - The entire CLI grammar can be repeated.

        frob (version <n> --file <p1> <p2>)...

    Control how choices are listed in usage text:

        - eg, don't repeat them.

            -n {foo,bar,baz}, --name {foo,bar,baz}

        - or refer to them by name, and then define the name later

            --othername FOO

            where FOO
                foo
                bar
                baz

Help text with subparsers:

    frob -h
        - some people want just top-level help
        - others want all help : top-level all subparsers

https://stackoverflow.com/questions/4042452

    If program has required args/options, but it is run
    with zero args, provide help text, not error text.

    It's trivial if you have a grammar:

        frob <x> <y> [-z]
        frob --help
        frob

https://stackoverflow.com/questions/27258173

    - Required: -x, -y, or both (but not neither).

    frob -x [-y] [-z]
    frob -y [-x] [-z]

https://stackoverflow.com/questions/5257403

    - wants nargs to allow a range: eg, 1 to 3.

    - this works, but starts to look ugly if N gets larger

        frob -x A [B [C]]

        frob -x A [B [C [D [E [F]]]]]

    - other possibilities:

        frob -x A...{7}
        frob -x A...{1,3}
        frob -x A...{0,3}
        frob -x A...{3,}

https://stackoverflow.com/questions/4692556

    Need just the literal 'all' or 1+ positions.

    frob [-x] [-y] all
    frob [-x] [-y] <pos>...

https://stackoverflow.com/questions/62524681

    - Wants a grammar where each -C option resets the configuration,
      and where the specifically declared configurations are linked
      to the -p option.

    - The desired end result is a list of configurations.

    frob -w 100 -c 50 -C -w 1000 -c 500 -p /foo -C -w 5% -c 3% -p /bar
         ----(3)-----    ---------(1)----------    --------(2)--------

    1. Configuration for the /foo volume.
    2. Ditto, for /bar volume.
    3. Configuration settings for all other volumes.

job-client:

    Allow for extra options for job-client devs, based on env var.

    Special options that exit-with-msg (without griping about other issues):
        --version
        --examples
        --autocomplete

    General and task-specific help (without griping about other issues):
        job-client -h
        job-client TASK -h
        job-client -h TASK -h

    Using a YAML config file:

        - Settings from the config file should control the `default`
          settings for the argument parser.

        - When running `job-client configure`, you do not want to load the
          existing config file.

--------
example-grammars: Example grammars
--------

Example 1:

    [-b]      [-x] [-y]   # -a and -b are mutex,
    [-a] [-c] [-x] [-y]   # and -b also allows -c

Example 2:

    [-x]  [-z] <a>
    -y -x [-z] <a> [<b>]   # If -y, then -x is required and <b> is allowed.

Example 3:

    [-x] [-y] (<a> <b> <c>)...

Example 4:

    (-x | -y | -z -q) [-a] <b>

Example 5:

    (-a -x | -b... | [-a] -c -d) [-e | -f] [-g] <h> [<i>...] ([-j -k]... | -m -n)

