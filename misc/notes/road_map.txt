--------
Road map
--------

- Organize notes/plans and nail down key decisions and naming:

    - Read current code to get back up to speed and take notes on:

        - Important issues.
        - Key class, function, attribute names.

    - Create an up-to-date current design plan:

        - Terminology and names.
        - Class names and relationships.
        - Spec syntax.
        - API.

        * The code currently reads as very heavy.
        * Try to lighten things up, if possible.
        * Try to rely more on small, immutable data objects.
        * Don't worry about using simple dependencies: attrs, short_con.
        * The "simple spec" name isn't very good.

    - Move long evaluations out of the action-oriented docs.

- Rename name: optopuss:

    - Git repo: remote, then local.
    - Package and module name.

- tox: py27 tests fail under tox (they pass under development virtualenv).

- Implement a proof-of-concept for the new parsing approach:

--------
Items from prior road map
--------

- GrammarSpecParser and complex Phrase parsing.
  - Planning.
  - Basic GrammarSpecParser implementation.
  - Complex grammars:
    - Varying nargs and ntimes.
    - Keeping track of partially-parsed results.
    - Pruning no-longer-eligible subphrases.
    - Keeping track of alternatives.
    - Backtracking using those alternatives.

- Support tolerant.

- Check argparse for other behaviors.

- Opt: allow `x` or `<x>`

- Handle --opt=val.

- Constructors should support dict-based configuration. Parser does, but not
  FormatterConfig and Section.

- help_text(): usage section: when wrapping, keep options together with their
  option args.

- Wildcards mode: allow user to specify pos/opt/both/True.

- nargs and ntimes: support regex-style quantifiers, both in specs and in the
  generated USAGE help-text.

- Negatable options: `--smart-case` and `--no-smart-case`.

- API thematic configuration.

- Help text customization.

- Support allow_abbreviation boolean.

- Option customization: eg, the regex to identify long opt, short opt, etc.

- Better exception strategy.

- Man-page support.

- Integration with configuration files.

- Integration with ENV variables.

- Miscellaneous.

