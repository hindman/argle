--------
grammar-syntax: Grammar syntax
--------

Spec structure:

    grammar-section
    [sections...]

    - The grammar-section is required, but can be empty. If empty, presumably
      opt-help lines are found in the sections.

Grammar section forms:

    Variants | Opt-helps | Form
    -------------------------------------
             |           |
    0        | 0         | ::
    -------------------------------------
             |           | [prog] ::
    0        | 1+        | opt-help...
    -------------------------------------
             |           | [prog]
    1+       | 0         | variant...
    -------------------------------------

    - Mneumonic:
        - Double-colon is the section marker.
        - Opt-help can resided in sections.
        - So grammar section with double-colon means opt-help.

    - Any of the grammar-section forms can be following by 0+ sections
      containing opt-help and/or regular text.

    - Prog must be a valid name.

    - Each opt-help must start on a fresh line.

    - Same for variants, other than the first, which can follow prog directly.

    - The grammar section does not allow regular text.

    - Grammar section cannot have its title (Usage) changed via the spec.

    - The first form (an empty grammar section) is needed because a one-word
      section title would be indistinguishable from a prog.

Opt help lines:

    - Syntax:

        <pos>            [: [help-text]]
        [alias...] --opt [: [help-text]]

    - Note that the grammar portion of each line can contain square brackets.

    - Normal grammar rules apply when defining a <pos> or --opt.

    - An alias is a lone option, not a full Opt configuration.

    - Continuation lines must be indented and contiguous.

Variants:

    - Syntax:

        [name[!] :] definition

        Where ! denotes a partial variant.

    - Continuation lines must be indented and contiguous.

    - Variants can fully configure the opts or use an abbreviated form if the
      user has defined the Opts explicitly in opt-help lines.

        - The two types of grammar configuration (variants and opt-help
          lines) are additve.

        - Subsuequent configurations never overwrite an prior settings
          for an Opt. Each new setting is added to the prior settings.

Sym-dest:

    - Variable end-user inputs (positionals and parameters) are enclosed in
      angle brackets, which can contain a sym-dest.

        <sym-dest>

    - Syntax:

        <sym.dest=vals>
        --dest <sym.subdest=vals>

        Where vals can be:

            val|val|... | Choices
            val         | Positional or parameter variant.

        Where sym translates to usage text as follows:

            sym. : <sym>
            sym! : sym

        And where a single <name> means the following:

            Positionals | <dest>       | The name is dest and sym
            Options     | --dest <sym> | The name is sym

    - Forms:

        - Postitionals require a dest, so there are only four forms:

            <    dest     >
            <    dest=vals>
            <sym.dest     >
            <sym.dest=vals>

        - Options do not require subdest, so there are eight forms:

            --dest <                >
            --dest <           =vals>    # Equal sign is optional.
            --dest <sym             >
            --dest <sym        =vals>
            --dest <   .subdest     >
            --dest <   .subdest=vals>
            --dest <sym.subdest     >
            --dest <sym.subdest=vals>

Names:

    - Various grammar elements have names:

        - Variants.
        - Partials.
        - Destinations.

    - Optopus allows both typical names and non-standard ones (eg, names
      starting with underscore or even digit).

    - However, the dest will be normalized as follows:

        - Hyphens converted to underscores.
        - Attach underscore prefix to dest starting with digit.

Variant definition syntax:

    Partial:

        foo!             Insert foo partial into the variant.

    Grouping and alternatives:

        []               Grouping, optional.
        ()               Grouping.
        foo=[]           Named grouping, optional.
        foo=()           Named grouping.
        |                Alternatives.

    Quantifiers:

        ...              1 or more
        {m,n}            Repetition: m through n, inclusive.
        ?                Non-greedy for preceding quantifier.

    Options:

        -f               Short.
        --foo            Long.

    Positionals and parameters:

        <sym-dest>       Positional.
        -f <sym-dest>    Parameter.

    Quoted literals:

        `hello`          Can be used as positional, positional
                         choice/variant, or parameter choice/variant.

Variant definition syntax allowed for opt-help lines:

    - Supported:

        <x>                  Positionals.
        -x <>                Options.
        <x=1>                Positional variants.
        -x <=2>              Parameter variants.
        <sym.dest=choices>   Sym-dest, including with choices.
        -x <=a|b|`do it`>    Literals, in choices.
        [] ()                Groups.
        |                    Alternatives, for choices.
        ...  {m,n}  ?        Quantifiers.

    - Not supported:

        x : defin            Variants.
        x!                   Partials.
        x=[]  x=()           Named groups.

Sections:

    - Syntax:

        [Title] ::
        section-content

    - Title is optional, but marker is required. The title, if supplied,
      functions as a kind of identifier for the Section in the API.

    - Section content:

        - Sections are assumed to contain four types of lines:

            - variant-scope lines. Looks the same as as partial usage.
              Subsequent opt-help lines will be scoped to that variant.
              Applicable only when Opt.dest values are reused across variants.

            - opt-help lines. Can fully configure an Opt or use an abbreviated
              form if merely augmenting an already-configured Opt.

            - block-quote lines. Just the markers; nothing else.

            - regular-text lines. Allowed only after opening block-quote.

        - Indentation:

            - Optopus will generally try to preserve the original indentation
              level of ordinary text -- specifically the indentation of the
              first line of the paragraph.

            - If line-wrapping is suppressed, Optopus will rendered lines
              as-is, including each line's indentation.

    - Quoting:

        Situation           | Suppressed  | Open   | Close
        --------------------------------------------------
        Block quote         | Syntax      | ```    | ```
        Block quote         | Syntax/wrap | ```!   | ```
        Inline quote        | Syntax      | `      | `
        Literal backquote   | Syntax      | \`     | na

        - Block quotes can be on their own line or not.

Whitespace rules:

    - Whitespace required:

        - Each variant must start on its own line.

        - Continuation lines for variants and opt-help must be indented and
          contiguous.

        - Section start must be on its own line, ending in marker.

        - Grammar section must have prog on first line in some usages.

        - For opt-help lines with help text, colon must be on first line.

    - Tight-binding required among syntax elements:

        - Option prefix with name.

        - Partial name with marker.

--------
syntax-examples: Syntax examples
--------

blort-maker:

    - This is a subcommand-style script, plus various bells and whistles to
      exercise most of the full grammar syntax.

    help!     : [--help] [--syntax]
    general!  : [--verbose] [--log-file <>] help!
    other!    : [--hi] [--bye]

    configure : help! general! <task=configure> --env <> --user <>
    submit    : help! general! <task=submit> -c <> -r <> [--start-job] [--person <name> <age>]
    get       : help! general! <task=get> -j <> [--json [--indent <>] | --b64 | --yaml]
    drop      : help! general! <task=drop> <what=first|last|random> [--print] <n>
    fubb      : help! other! [-a] [-b] <fubb>... (--fast | --slow)
    zzz       : help! other! [-x] [-y] items=(<a> <b> <c> [-z]){2,7}

neck-diagram:

    - This is a non-standard command line program: its grammar consists of one
      or more subcommands with a literal separator between them.

    cmd! :  commands=(
                <cmd=snum>   <snum>             |
                <cmd=fnum>   <fnum>             |
                <cmd=number> <numbering=on|off> |
                <cmd=tuning> <notes>...         |
                <cmd=fret>   <syms>...          |
                <cmd=invert> <syms>...
            )

    main : cmd! [ `/` cmd! ]...

Syntax example: nab:

    - Another separator-based grammar.
    - Note that Opt.dest values need to be repeated.

    chomp!   : / <cmd=chomp>
    findall! : / <cmd=findall> <rgx> [-a]
    grep!    : / <cmd=grep> <rgx> [-i] [-v] [-s]
    range!   : / <cmd=range> <start> <stop> [<step>] [-g]
    run!     : / <cmd=run> <code> [-g <>] [-a] [-v] [-i]

    main : [--trace] commands=(chomp! | grep! | range! | run!)...
    help : --help

--------
terminology: Terminology
--------

Users:

    - Library: the optopus code base.
    - Library user (or just user): a developer using optopus.
    - End user: a user running a program that uses optopus.

Command line argument types:

    - Arguments:
        - The raw strings directly from the command line.

    - Positionals:
        - The typical non-option argument.

    - Options: arguments with an option prefix.

        - Long prefix.
        - Short prefix.

        - Option (parameter option)
        - Flag

    - Parameters:
        - Arguments for an option.

    - Sym:
        - Like argparse metavar.
        - Symbolic name for a positional or parameter in usage text.

    - Positional or parameter variant:
        - Mechanism to define a special grammar when a
          positional or parameter takes a specific value.

Help text sections:

    - Help text: documents everything.
    - Usage text: documents the command-line grammar.
    - Options text: documents the options and positional arguments, perhaps in groups.
    - Custom sections.

Destination assignment:

    - Controls how the parsed data elements are stored and named.

--------
classes-and-attributes: Classes and attributes
--------

Overview:

    User-facing entities:

        Parser
        Section
        Grammar
        Variant
        Group
        Opt
        Result
        Query

        Relationships:

            Parser
                sections      = List[Section]      # 1+   # Usage always exists.
                grammar       = Grammar            # 1    # Empty grammar ok.
                    variants  = List[Variant]      # 0+
                        elems = List[Group or Opt] # 0+

                parse(ARGS) -> Result

            Group:
                elems = List[Group or Opt] # 0+

    Objects used during grammar parsing:

        SpecParser | Parses a spec, returns Grammar.
        RegexLexer | Lexer used by SpecParser.
        TokType    | Token types given to lexer.
        Token      | Emitted by lexer.
        ParseElem  | Emitted by parser functions. Later assembled into Grammar.

    Objects used during argument parsing:

        State
        ArgResult
        Target

    Entities used only for notation:

        PartialUsage      | Group
        Positional        | Opt
        PositionalVariant | Opt
        ParameterVariant  | Opt

Parser:

    - Class will likely have various getters or query functionality to make it
      easy to configure specific grammar elements. Users should not have to
      manually navigate the Grammar hierarchy.

    Attribute | Note
    --------------------------------------------------------------------------------
    spec      | Was 'simple_spec'.
    grammar   | Grammar. Was 'opts'.
    mode      | Special parsing mode.
    --------------------------------------------------------------------------------
    auto      | Defer. True by default: exit with error on failed parse().
    sections  | Defer.
    format    | Defer. Data object to namepsace formatting attributes. Was 'formatter_config'.
    helpful   | Defer.
    syntax    | Defer. Data object to configure syntax parsing and usage text rules.
    --------------------------------------------------------------------------------
    prog      | Drop. Handled via the spec or under format.
    wildcards | Drop. Was used to support * as a match-anything device.
    --------------------------------------------------------------------------------

    API:

        - Parsing:

            Parser(spec = None, grammar = None, ...)

                - The spec/grammar arguments are mutex and optional.
                - Other arguments are deferred.

            parse(args = None, mode = ...) -> Result or raise

                - Parser can have a mode.
                - And parse() can temporarily use a different mode.

        - Querying and configuring grammar elements:

            query(*paths, **kws) -> Grammar.query(...) -> Query

                - Query paths are based on Opt.dest, Variant.name, and
                  Group.dest or Group.index.

                - The vast majority of queries will be for Opts:

                    query('foo', 'bar')

                    - Gets Opt(foo) and Opt(bar).

                    - More precisely, the query gets any grammar element having
                      those dests/names.

                - In complex cases where independent Opts have the same dest,
                  the query path can include the variant name.

                    query('go foo')

                    - Gets Opt(foo) inside Variant(go).

                - Although Groups can have a dest, most won't. But they will
                  have a unique index within each variant.

                    query('go 2')

                    - Gets the third Group in Variant(go).

                - As a future enhancement, these query path elements can be
                  interpreted as regular expressions (I doubt the need).

            config(*paths, **kws) -> None

                - Given Opts, configure them all in the same way.

                - Just a shortcut for query(*paths).config(**kws).

            config_each(attr_name, d) -> None

                - Given Opts, set one attribute in different ways
                  for each opt.

                - The second argument is a dict mapping query paths to the
                  desired value for the attribute.

                - For example, setting a bunch of Opt.text values:

                    config_each('text', dict(
                        foo = 'Blah',
                        bar = 'Blah blah',
                    ))

        - Obtaining help text or text for the error from most recent parse():

            help_text(section...)
            error_text
            exception

        - Actions like printing or exiting.

            warn(msg)
            help(section...)
            error(msg = None, code = 1)
            exit(msg = None, code = 0)

Section

    - Used to create labeled groups of Opt for help text purposes.
    - Each variant has a corresponding section with the same name.

    Attribute | Note
    --------------------------------------------------------------------------------
    name      | Short symbolic name used in API.
    label     | Used in help text.
    opts      | Opts belonging to the section.
    text      | Hand-crafted help text.
    --------------------------------------------------------------------------------

Grammar:

    Attribute | Note
    --------------------------------------------------------------------------------
    variants  | List[Variant]
    --------------------------------------------------------------------------------

    API:

        query(*paths, kind = KIND, negate = False) -> Query

Query:

    Iterable tuple-like object returned by Grammar.query(). Holds the Groups/Opts
    that satisfy the search parameters. Supports bulk configuration.

    Attribute | Note
    --------------------------------------------------------------------------------
    elems     | List[Group or Opt]
    --------------------------------------------------------------------------------

    API:

        config(...) # Apply the config parameters to all Groups/Opts.
        query(...)  # Subquery to filter down further.

Variant:

    Attribute | Note
    --------------------------------------------------------------------------------
    name      | .
    elems     | List[Group or Opt]
    ntimes    | .
    --------------------------------------------------------------------------------

Group:

    Attribute | Note
    --------------------------------------------------------------------------------
    elems     | List[Group or Opt]
    ntimes    | .
    dest      | .
    validate  | Defer. Callable(s).
    --------------------------------------------------------------------------------

Opt:

    - A configurable data object to represent one option (with parameters,
      quantifiers) or one positional (with quantifiers).

    Attribute | Note
    --------------------------------------------------------------------------------
    spec      | Was 'option_spec'.
    grammar   | Grammar.
    ntimes    | .
    nargs     | .
    nparams   | .
    dest      | Was 'destination'.
    default   | .
    value     | None (typical) or the variant value.
    choices   | None (validation deferred).
    --------------------------------------------------------------------------------
    help      | Defer. For help dispatching. Maybe handle via dispatch attribute.
    metavar   | Defer. But need a better name.
    choices   | Defer.
    convert   | Defer. Callable.
    validate  | Defer. Callable.
    text      | Defer.
    hide      | Defer. False (visible), True (hidden), or sequence of where/what to hide
    sections  | Defer. Sequence of section names.
    high      | Defer. Was 'tolerant'.
    factory   | Defer. Callable to create default.
    aliases   | Defer.
    dispatch  | Defer. Callable(s). Maybe 'actions'.
    required  | Defer, maybe drop. Same as ntimes=1.
    negaters  | Defer. For flag negatives (to overrule True default)
    case      | Defer. Case-sensitive if True.
    anchor    | Defer. bool
    --------------------------------------------------------------------------------
    option    | Internal. Not sure of purpose.
    _opt_type | Internal. Holds an OptType.
    arg_names | Internal. Seems related to simple spec parsing.
    --------------------------------------------------------------------------------

    For options taking multiple parameters or positionals having multiple
    arguments, the most common use case treats the parameters/arguments as
    values of the same kind -- meaning that that have the same type, defaults,
    choices, conversion, validation, etc. However, sometimes users want those
    characteristics to vary. In that case, the following attributes also
    support a sequence of values, one per parameter/argument. In cases where
    the nparams/nargs have no upper bound, the last value in the sequence will
    be applied: for example, if nparams=(2,None) one could use convert=(float,
    int), which would use int to convert any parameters beyond the second.

        dest      # Needed only for parameters.
        metavar
        ----
        default
        factory
        value
        ----
        choices
        convert
        validate

    API:

        config(...)

Result:

    - Data object returned to end-user by Parser.parse().

    - An iterable mapping-like object with destinations as the attributes.

SpecParser:

    Attribute | Note
    --------------------------------------------------------------------------------
    lexer     | Lexer.
    handlers  | Sequence of token-stream handlers. Was 'parser_functions'.
    curr      | Was 'current_token'. Managed by the mixin.
    prevpeek  | .
    --------------------------------------------------------------------------------

    API:

        parse()
        eat()
        error()

RegexLexer:

    - General-purpose regex-based lexer.

    Attribute | Note
    --------------------------------------------------------------------------------
    text      | The text to be lexed.
    toktypes  | Sequence of TokType.
    pos       | Current index of the lexer.
    mxpos     | Last index of the text.
    iseof     | Becomes True when text exhausted.
    --------------------------------------------------------------------------------

    API:

        See old.py implementation and modifications in draft.py.

TokType:

    - Internal data object given to a lexer.

    Attribute | Note
    --------------------------------------------------------------------------------
    name      | Name of token.
    regex     | Regex to match the token.
    emit      | Whether to emit back to parser [default: True].
    --------------------------------------------------------------------------------

    Kinds:

        See grammar-parsing-algo notes.

Token:

    - Simple internal data object emitted by a lexer.

    Attribute | Note
    --------------------------------------------------------------------------------
    toktype   | TokType of the token.
    value     | Corresponding token text.
    pos       | Position (where matched)
    line      | Line number.
    col       | Column number.
    --------------------------------------------------------------------------------

    Kinds:

        Same as TokType.

ParseElem:

    - Simple internal data object emitted by the parsing phase of
      SpecParser.parse(). Subsequent work in that method will convert the
      ParseElem into a user-facing Grammar.

    - Attributes for each kind of ParseElem will vary.

    Kinds:

        variant
        group
        opt
        quantifier
        choices
        parameter
        literal

State:

    - An internal data object used during argument parsing. See
      arg-parsing-algo notes.

ArgResult:

    - An internal data object used during argument parsing. See
      arg-parsing-algo notes.

Target:

    - A data object used during argument parsing to store the information
      ultimately returned as a Result to end user.

    - For the applicable parsing interpretation, a Target contains information
      about all relevant Opt/Pos and values parsed so far.

    Attribute | Note
    --------------------------------------------------------------------------------
    poss      | List[Pos]
    opts      | Dict[Opt]
    vals      | Dict[DEST -> VAL]
    --------------------------------------------------------------------------------

