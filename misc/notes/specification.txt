--------
grammar-syntax: Grammar syntax
--------

SIMPLIFYING THE SPEC:

    - Setting prog via the spec:
        - Typically not needed or wanted.
        - Optopus can compute it from the caller's file name.
        - POSSIBLE DECISION:
            - Drop prog from the spec.
            - Make prog settable only via API.

    - Purpose of section without title:
        - The first section can be title-free.
        - Optopus would use 'Positionals' and 'Options' in help text.
        - What if subsequent sections lack title?
        - Optopus could default to something generic. But that's unhelpful.
        - For user, what's the point of a subsequent-section having no title?
        - If new title is unwanted, don't declare a subsequent-section at all.
        - POSSIBLE DECISION:
            - First section can be title-free.
            - Other sections require a title.

    - Those decisions would reduce the spec grammar to the following:

        [variant...]
        [opt-help...]
        [section...]

    - That is easier to parse and document than the current plan below.

    - Is there a way to ditch the need for double-colon in the simple and
      common case of the user who just wants to configure via opt-help lines in
      one untitled section?

        - For example, can we eliminate the need for double-colon in README ex2
          and ex3?

        - As detailed in discussion.txt, opt-help lines can be confused with
          unnamed variants.

            # Is this (a) 3 variants or (b) 3 bare-bones opt-help lines?
            <rgx>
            [-i --ignore-case]
            [-v --invert-match]

        - The second interpretation would be more commonly observed in
          real-world scripts, so I would like to make that use case supportable
          without any special syntax like (a) the double-colon section marker
          or (b) forcing opt-help lines to require either help-text (very bad)
          or a trailing colon (bad).

        - The core issue:

            - If the spec starts without a titled section (by far the most
              common usage pattern), the spec-parser does not know for sure how
              to interpret the first section -- at least in certain bare-bones
              scenarios.

            - More precisely, the status of the initial lines in the first
              sections are potentially ambiguous. Some variations on the
              example cited above:

                - Since <rgx> line is opt-help, all of them are.

                    <rgx> : Pattern to search for
                    [-i --ignore-case]
                    [-v --invert-match]
                    [--foo]

                - The --foo line is opt-help. First 3 lines ambiguous:

                    <rgx>
                    [-i --ignore-case]
                    [-v --invert-match]
                    [--foo] : Enable foo blah-blah-blah

                - The <rgx> line is variant. Others ambiguous.

                    <rgx> [--algo <X|Y|Z>]
                    [-i --ignore-case]
                    [-v --invert-match]
                    [--foo]

                - Since --foo line must be variant, all must be.

                    <rgx>
                    [-i --ignore-case]
                    [-v --invert-match]
                    [--foo] [--blort <X|Y|Z>]

            - The plan so far is running into complexities caused by the desire
              to support syntax-free approaches to various use cases.

                - Bare-bones configuration in opt-help style:

                    <rgx>
                    [-i --ignore-case]
                    [-v --invert-match]
                    [--foo]

                - Bare-bones configuration in variant style:

                    # Like README ex1.
                    # But this is non-ambigous: must be a variant.
                    [-i] [-v] <rgx> <path>

                    # This example is ambigous.
                    <rgx>
                    <path>
                    [--help]
                    [--examples <A|B|C>]

                    # But it is better expressed as this.
                    (<rgx> | <path>) [--help] [--examples <A|B|C>]

                    # Or even this way.
                    # Since last line is variant, all must be.
                    <rgx>
                    <path>
                    [--help] [--examples <A|B|C>]

                - Conclusion from those examples:

                    - The ambiguous cases involve bare-bones variant usages
                      that are neither common nor compelling.

                    - Most real-world needs for variants involve more than
                      something that can be confused for a bare-bones opt-help.

                    - More detailed analysis:

                        - Lines can be one of the following:

                            OH  | only an opt-help
                            V   | only a variant
                            AMB | ambiguous

                        - Consider all of the ways that those three types of
                          lines can first appear in the first section of a
                          spec. [We can ignore repeats of the same type, since
                          that does not affect the analysis.]

                            - First section has only 1 type of line.

                                OH  | ok
                                V   | ok
                                AMB | Ambiguous #1

                            - First section has 2 types of lines:

                                OH V     | Invalid. V cannot appear after OH.
                                OH AMB   | ok: must be OH
                                V OH     | ok
                                V AMB    | Ambiguous #2
                                AMB OH   | Ambiguous #3
                                AMB V    | ok: must be V

                            - First section has 3 types of lines:

                                OH V AMB | Invalid
                                OH AMB V | Invalid
                                V OH AMB | ok: must be V then OH
                                V AMB OH | Ambiguous #4
                                AMB V OH | ok: must be V then OH
                                AMB OH V | Invalid

                        - Is there an obvious policy reponse to the ambigous cases?

                            - A narrow analysis does not produce obvious decisions:

                                #1 | Unclear
                                #2 | Assume V, since we saw V already
                                #3 | Assume OH (similar logic)
                                #4 | Unclear

                            - Alternatively, could we simply default one way or
                              another in the face of ambiguity?

                                - Perhaps.

                                - Consider real consequences and what a user
                                  must do to resolve an ambiguity.

                                - If the argument parsing and help text don't
                                  perform correctly, it will be quickly obvious
                                  to the user.

                                - How will they fix the situation?

                                - If Optopus works from a fallback-default of
                                  OH for ambigous cases, how does a user tell
                                  us that they actually want V?
                                    - Option 1: an API call.
                                    - Option 2: name the variant.

                                - If Optopus instead defaults to V but the user
                                  wants OH, the fix is much easier.
                                    - Just add help-text (which they probably
                                      should do anyway) or, at a minimum, add a
                                      trailing colon to the first ambigous OH
                                      line.

                        - POSSIBLE DECISION:

                            - In the face of ambiguity, assume V.

                            - Of course! This is consistent with the way we
                              have resolved many other ambiguous situations via
                              a policy of greedy parsing without back-tracking.

                            - If this is the grammar, the consistent approach
                              is to keep assuming that lines are variants until
                              they are clearly not.

                                [variant...]
                                [opt-help...]
                                [section...]

    - SUMMARY OF DECISIONS ABOVE:

        - Spec grammar, with the usual greedy parsing approach, so we assume
          variant in the face of ambiguity about the initial lines in the first
          "section".

            [variant...]
            [opt-help...]
            [section...]

        - The prog is not used in the spec. Settable via API.

        - Sections other than the first must have titles.

        - The first section might or might not be a "section". Look into this.

        - None of the current README examples would require double-colon.

    - Remaining question: is the first section a Section?

        - TODO...

    - Examples from the README:

        # README ex1.
        [-i] [-v] <rgx> <path>

        # README ex2.
        ::
        <rgx> : Python regular expression
        [<path>...] : Path(s) to input
        [-i --ignore-case] : Ignore case
        [-v --invert-match] : Select non-matching lines

        # README ex3.
        ::
        <rgx> : Python regular expression
        [<path>...] : Path(s) to input
        [-i --ignore-case] : Ignore case
        [-v --invert-match] : Select non-matching lines
        [-m --max-count <n>] : Stop searching after N matches
        [-C --context <n>] : Print N lines of before/after context
        [--color red|green|blue] : Highlight matching text

        # README ex4.
        <task=grep>   [-i] [-v] [-m] [-C]
                      [--color <red|green|blue>]
                      <rgx> [<path>...]
        <task=sub>    [-i] [-n] <rgx> <rep> [<path>...]
        <task=search> [-i] [-g] [-d | -p] <rgx> [<path>...]

        ::

        <task>             : Task to perform
        <task=grep>        : Emit lines matching pattern
        <task=sub>         : Search for pattern and replace
        <task=search>      : Emit text matching pattern
        <rgx>              : Python regular expression
        <path>             : Path(s) to input
        <rep>              : Replacement text
        -i --ignore-case   : Ignore case
        -v --invert-match  : Select non-matching lines
        -m --max-count <n> : Stop searching after N matches
        -C --context <n>   : Print N lines of before/after context
        --color <>         : Highlight matching text
        -n --nsubs <n>     : N of substitutions
        -g --group <n>     : Emit just capture group N [0 for all]
        -d --delim <s>     : Delimeter for capture groups [tab]
        -p --para          : Emit capture groups one-per-line, paragraph-style

Spec structure:

    grammar-section
    [section...]

    - The grammar-section is required, but can be empty. If empty, presumably
      opt-help lines are found in the sections.

Grammar section forms:

    - The grammar-section can contain variants, opt-helps, or neither, but not
      both.

    - Variants can reside only in the grammar-section; opt-helps can reside in
      any section.

    - The grammar-section forms, by N of variants and opt-helps in the
      grammar-section.

        Variants | Opt-helps | Form
        -------------------------------------
                 |           |
        0        | 0         | ::
        -------------------------------------
                 |           | [prog] ::
        0        | 1+        | opt-help...
        -------------------------------------
                 |           | [prog]
        1+       | 0         | variant...
        -------------------------------------
        1+       | 1+        | Not allowed.
        -------------------------------------

        * All forms can be followed by other sections containing opt-helps.

    - Mneumonic regarding the double-colon marker:
        - Double-colon is the section marker.
        - Opt-help can reside in sections.
        - So grammar section with double-colon means opt-help.

    - Prog must be a valid name.

    - Must start on a fresh line:
        - Opt-helps.
        - Variants other than the first.

    - The grammar section does not allow regular text.

    - Grammar section cannot have its title (Usage) changed via the spec.

    - The first form (an empty grammar section) is needed because a one-word
      section title would be indistinguishable from a prog.

Opt-help lines:

    - Syntax:

        <pos>            [: [help-text]]
        [alias...] --opt [: [help-text]]

    - Note that the grammar portion of each line can contain square brackets.

    - Normal grammar rules apply when defining a <pos> or --opt.

    - An alias is a lone option, not a full Opt configuration.

    - Continuation lines must be indented and contiguous.

Variants:

    - Syntax:

        [name[!] :] definition

        * Where ! denotes a partial variant.

    - Continuation lines must be indented and contiguous.

    - Variants can fully configure the opts or use an abbreviated form if the
      user has defined the Opts explicitly in opt-help lines.

        - The two types of grammar configuration (variants and opt-help
          lines) are additve.

        - Subsuequent configurations never overwrite an prior settings
          for an Opt. Each new setting is added to the prior settings.

Sym-dest:

    - Variable end-user inputs (positionals and parameters) are enclosed in
      angle brackets, which can contain a sym-dest.

        <sym-dest>

    - Syntax:

        <sym.dest=vals>
        --dest <sym.subdest=vals>

        Where vals can be:

            val|val|... | Choices
            val         | Positional or parameter variant.

        Where val can be:

            - Simple name consisting of \w or hyphen.
            - Quoted-literal.

        Where sym translates to usage text as follows:

            sym. : <sym>
            sym! : sym

        And where a single <name> means the following:

            Positionals | <dest>       | The name is dest and sym
            Options     | --dest <sym> | The name is sym

    - Forms:

        - Postitionals require a dest, so there are only four forms:

            <   .dest     >              # Period optional.
            <   .dest=vals>              # Period optional.
            <sym.dest     >
            <sym.dest=vals>

        - Options do not require subdest, so there are eight forms:

            --dest <                >
            --dest <           =vals>    # Equal sign optional.
            --dest <sym             >
            --dest <sym        =vals>
            --dest <   .subdest     >
            --dest <   .subdest=vals>
            --dest <sym.subdest     >
            --dest <sym.subdest=vals>

        - The vals in a spec must be quoted-literals or non-whitespace "words"
          not containing right-angle-bracket or pipes.

Names:

    - Various grammar elements have names:

        - Variants.
        - Partials.
        - Destinations.

    - Optopus allows both typical names and non-standard ones (eg, names
      starting with underscore or even digit).

    - However, the dest will be normalized as follows:

        - Hyphens converted to underscores.
        - Attach underscore prefix to dest starting with digit.

Variant definition syntax:

    Partial:

        foo!             Insert foo partial into the variant.

    Grouping and alternatives:

        []               Grouping, optional.
        ()               Grouping.
        foo=[]           Named grouping, optional.
        foo=()           Named grouping.
        |                Alternatives.

    Quantifiers:

        ...              1 or more
        {m,n}            Repetition: m through n, inclusive.
        ?                Non-greedy for preceding quantifier.

    Options:

        -f               Short.
        --foo            Long.

    Positionals and parameters:

        <sym-dest>       Positional.
        -f <sym-dest>    Parameter.

    Quoted literals:

        `hello`          Can be used as positional, positional
                         choice/variant, or parameter choice/variant.

Variant definition syntax allowed for opt-help lines:

    - Supported:

        <x>                  Positionals.
        -x <>                Options.
        <x=1>                Positional variants.
        -x <=2>              Parameter variants.
        <sym.dest=choices>   Sym-dest, including with choices.
        -x <=a|b|`do it`>    Literals, in choices.
        [] ()                Groups.
        |                    Alternatives, for choices.
        ...  {m,n}  ?        Quantifiers.

    - Not supported:

        x : defin            Variants.
        x!                   Partials.
        x=[]  x=()           Named groups.

Sections:

    - Syntax:

        [Title] ::
        section-content

    - Title is optional, but marker is required. The title, if supplied,
      functions as a kind of identifier for the Section in the API.

    - Section content:

        - Sections are assumed to contain four types of lines:

            - variant-scope lines. Looks the same as as partial usage.
              Subsequent opt-help lines will be scoped to that variant.
              Applicable only when Opt.dest values are reused across variants.
              [Is this concept necessary? What is a variant-scope line?]

            - opt-help lines. Can fully configure an Opt or use an abbreviated
              form if merely augmenting an already-configured Opt.

            - block-quote lines. Just the markers; nothing else.

            - regular-text lines. Allowed only after opening block-quote.

        - Indentation:

            - Optopus will generally try to preserve the original indentation
              level of ordinary text -- specifically the indentation of the
              first line of the paragraph.

            - If line-wrapping is suppressed, Optopus will rendered lines
              as-is, including each line's indentation.

    - Quoting:

        Situation           | Suppressed  | Open   | Close
        --------------------------------------------------
        Block quote         | Syntax      | ```    | ```
        Block quote         | Syntax/wrap | ```!   | ```
        Inline quote        | Syntax      | `      | `
        Literal backquote   | Syntax      | \`     | na

        - Block quotes can be on their own line or not.

Whitespace rules:

    - Line and indentation requirements:

        - Opt-help must start on its own line.

        - Variant, if not the first, must start on its own line.

        - Continuation line must be indented more than the first.

        - Section title must be on its own line, ending in marker.

    - Line breaks not allowed:

        - Within an {m,n} quantifier.

        - Between a name and equal sign.

        - Within a sym.dest element.

    - Whitespace not allowed:

        - Between option prefix and its dest.

        - Between partial name and its marker.

        - Within a triple-dot quantifier.

--------
syntax-examples: Syntax examples
--------

blort-maker:

    - This is a subcommand-style script, plus various bells and whistles to
      exercise most of the full grammar syntax.

    help!     : [--help] [--syntax]
    general!  : [--verbose] [--log-file <>] help!
    other!    : [--hi] [--bye]

    configure : help! general! <task=configure> --env <> --user <>
    submit    : help! general! <task=submit> -c <> -r <> [--start-job] [--person <name> <age>]
    get       : help! general! <task=get> -j <> [--json [--indent <>] | --b64 | --yaml]
    drop      : help! general! <task=drop> <what=first|last|random> [--print] <n>
    fubb      : help! other! [-a] [-b] <fubb>... (--fast | --slow)
    zzz       : help! other! [-x] [-y] items=(<a> <b> <c> [-z]){2,7}

neck-diagram:

    - This is a non-standard command line program: its grammar consists of one
      or more subcommands with a literal separator between them.

    cmd! :  commands=(
                <cmd=snum>   <snum>             |
                <cmd=fnum>   <fnum>             |
                <cmd=number> <numbering=on|off> |
                <cmd=tuning> <notes>...         |
                <cmd=fret>   <syms>...          |
                <cmd=invert> <syms>...
            )

    main : cmd! [ `/` cmd! ]...

Syntax example: nab:

    - Another separator-based grammar.
    - Note that Opt.dest values (cmd, in this case) need to be repeated.

    chomp!   : / <cmd=chomp>
    findall! : / <cmd=findall> <rgx> [-a]
    grep!    : / <cmd=grep> <rgx> [-i] [-v] [-s]
    range!   : / <cmd=range> <start> <stop> [<step>] [-g]
    run!     : / <cmd=run> <code> [-g <>] [-a] [-v] [-i]

    main : [--trace] commands=(chomp! | findall! | grep! | range! | run!)...
    help : --help

--------
terminology: Terminology
--------

Users:

    - Library: the optopus code base.
    - Library user (or just user): a developer using optopus.
    - End user: a user running a program that uses optopus.

Command line argument types:

    - Arguments:
        - The raw strings directly from the command line.

    - Positionals:
        - The typical non-option argument.

    - Options: arguments with an option prefix.

        - Long prefix.
        - Short prefix.

        - Option (parameter option)
        - Flag

    - Parameters:
        - Arguments for an option.

    - Sym:
        - Like argparse metavar.
        - Symbolic name for a positional or parameter in usage text.

    - Positional or parameter variant:
        - Mechanism to define a special grammar when a
          positional or parameter takes a specific value.

Help text sections:

    - Help text: documents everything.
    - Usage text: documents the command-line grammar.
    - Options text: documents the options and positional arguments, perhaps in groups.
    - Custom sections.

Destination assignment:

    - Controls how the parsed data elements are stored and named.

--------
classes-and-attributes: Classes and attributes
--------

Overview:

    User-facing entities:

        Parser
        Section
        Grammar
        Variant
        Group
        Opt
        Result
        Query

        Relationships:

            Parser
                sections      = List[Section]      # 1+   # Usage always exists.
                grammar       = Grammar            # 1    # Empty grammar ok.
                    variants  = List[Variant]      # 0+
                        elems = List[Group or Opt] # 0+

                parse(ARGS) -> Result

            Group:
                elems = List[Group or Opt] # 0+

    Objects used during grammar parsing:

        SpecParser | Parses a spec, returns Grammar.
        RegexLexer | Lexer used by SpecParser.
        TokType    | Token types given to lexer.
        Token      | Emitted by lexer.
        ParseElem  | Emitted by parser functions. Later assembled into Grammar.

    Objects used during argument parsing:

        State
        ArgResult
        Target

    Entities used only for notation:

        PartialUsage      | Group
        Positional        | Opt
        PositionalVariant | Opt
        ParameterVariant  | Opt

Parser:

    - Class will likely have various getters or query functionality to make it
      easy to configure specific grammar elements. Users should not have to
      manually navigate the Grammar hierarchy.

    Attribute | Note
    --------------------------------------------------------------------------------
    spec      | Was 'simple_spec'.
    grammar   | Grammar. Was 'opts'.
    mode      | Special parsing mode.
    --------------------------------------------------------------------------------
    auto      | Defer. True by default: exit with error on failed parse().
    sections  | Defer.
    format    | Defer. Data object to namepsace formatting attributes. Was 'formatter_config'.
    helpful   | Defer.
    syntax    | Defer. Data object to configure syntax parsing and usage text rules.
    --------------------------------------------------------------------------------
    prog      | Drop. Handled via the spec or under format.
    wildcards | Drop. Was used to support * as a match-anything device.
    --------------------------------------------------------------------------------

    API:

        - Parsing:

            Parser(spec = None, grammar = None, ...)

                - The spec/grammar arguments are mutex and optional.
                - Other arguments are deferred.

            parse(args = None, mode = ...) -> Result or raise

                - Parser can have a mode.
                - And parse() can temporarily use a different mode.

        - Querying and configuring grammar elements:

            query(*paths, **kws) -> Grammar.query(...) -> Query

                - Query paths are based on Opt.dest, Variant.name, and
                  Group.dest or Group.index.

                - The vast majority of queries will be for Opts:

                    query('foo', 'bar')

                    - Gets Opt(foo) and Opt(bar).

                    - More precisely, the query gets any grammar element having
                      those dests/names.

                - In complex cases where independent Opts have the same dest,
                  the query path can include the variant name.

                    query('go foo')

                    - Gets Opt(foo) inside Variant(go).

                - Although Groups can have a dest, most won't. But they will
                  have a unique index within each variant.

                    query('go 2')

                    - Gets the third Group in Variant(go).

                - As a future enhancement, these query path elements can be
                  interpreted as regular expressions (I doubt the need).

            config(*paths, **kws) -> None

                - Given Opts, configure them all in the same way.

                - Just a shortcut for query(*paths).config(**kws).

            config_each(attr_name, d) -> None

                - Given Opts, set one attribute in different ways
                  for each opt.

                - The second argument is a dict mapping query paths to the
                  desired value for the attribute.

                - For example, setting a bunch of Opt.text values:

                    config_each('text', dict(
                        foo = 'Blah',
                        bar = 'Blah blah',
                    ))

        - Obtaining help text or text for the error from most recent parse():

            help_text(section...)
            error_text
            exception

        - Actions like printing or exiting.

            warn(msg)
            help(section...)
            error(msg = None, code = 1)
            exit(msg = None, code = 0)

Section

    - Used to create labeled groups of Opt for help text purposes.
    - Each variant has a corresponding section with the same name.

    Attribute | Note
    --------------------------------------------------------------------------------
    name      | Short symbolic name used in API.
    label     | Used in help text.
    opts      | Opts belonging to the section.
    text      | Hand-crafted help text.
    --------------------------------------------------------------------------------

Grammar:

    Attribute | Note
    --------------------------------------------------------------------------------
    variants  | List[Variant]
    --------------------------------------------------------------------------------

    API:

        query(*paths, kind = KIND, negate = False) -> Query

Query:

    Iterable tuple-like object returned by Grammar.query(). Holds the Groups/Opts
    that satisfy the search parameters. Supports bulk configuration.

    Attribute | Note
    --------------------------------------------------------------------------------
    elems     | List[Group or Opt]
    --------------------------------------------------------------------------------

    API:

        config(...) # Apply the config parameters to all Groups/Opts.
        query(...)  # Subquery to filter down further.

Variant:

    Attribute | Note
    --------------------------------------------------------------------------------
    name      | .
    elems     | List[Group or Opt]
    ntimes    | .
    --------------------------------------------------------------------------------

Group:

    Attribute | Note
    --------------------------------------------------------------------------------
    elems     | List[Group or Opt]
    ntimes    | .
    dest      | .
    mutex     | If True, only one elem can be matched.
    validate  | Defer. Callable(s).
    --------------------------------------------------------------------------------

Opt:

    - A configurable data object to represent one option (with parameters,
      quantifiers) or one positional (with quantifiers).

    Attribute | Note
    --------------------------------------------------------------------------------
    spec      | Was 'option_spec'.
    grammar   | Grammar.
    ntimes    | .
    nargs     | .
    nparams   | .
    dest      | Was 'destination'.
    default   | .
    value     | None (typical) or the variant value.
    choices   | None (validation deferred).
    --------------------------------------------------------------------------------
    help      | Defer. For help dispatching. Maybe handle via dispatch attribute.
    metavar   | Defer. But need a better name.
    choices   | Defer.
    convert   | Defer. Callable.
    validate  | Defer. Callable.
    text      | Defer.
    hide      | Defer. False (visible), True (hidden), or sequence of where/what to hide
    sections  | Defer. Sequence of section names.
    high      | Defer. Was 'tolerant'.
    factory   | Defer. Callable to create default.
    aliases   | Defer.
    dispatch  | Defer. Callable(s). Maybe 'actions'.
    required  | Defer, maybe drop. Same as ntimes=1.
    negaters  | Defer. For flag negatives (to overrule True default)
    case      | Defer. Case-sensitive if True.
    anchor    | Defer. bool
    --------------------------------------------------------------------------------
    option    | Internal. Not sure of purpose.
    _opt_type | Internal. Holds an OptType.
    arg_names | Internal. Seems related to simple spec parsing.
    --------------------------------------------------------------------------------

    For options taking multiple parameters or positionals having multiple
    arguments, the most common use case treats the parameters/arguments as
    values of the same kind -- meaning that that have the same type, defaults,
    choices, conversion, validation, etc. However, sometimes users want those
    characteristics to vary. In that case, the following attributes also
    support a sequence of values, one per parameter/argument. In cases where
    the nparams/nargs have no upper bound, the last value in the sequence will
    be applied: for example, if nparams=(2,None) one could use convert=(float,
    int), which would use int to convert any parameters beyond the second.

        dest      # Needed only for parameters.
        metavar
        ----
        default
        factory
        value
        ----
        choices
        convert
        validate

    API:

        config(...)

Result:

    - Data object returned to end-user by Parser.parse().

    - An iterable mapping-like object with destinations as the attributes.

SpecParser:

    Attribute | Note
    --------------------------------------------------------------------------------
    lexer     | Lexer.
    handlers  | Sequence of token-stream handlers. Was 'parser_functions'.
    curr      | Was 'current_token'. Managed by the mixin.
    prevpeek  | .
    --------------------------------------------------------------------------------

    API:

        parse()
        eat()
        error()

RegexLexer:

    - General-purpose regex-based lexer.

    Attribute | Note
    --------------------------------------------------------------------------------
    text      | The text to be lexed.
    toktypes  | Sequence of TokType.
    pos       | Current index of the lexer.
    mxpos     | Last index of the text.
    iseof     | Becomes True when text exhausted.
    --------------------------------------------------------------------------------

    API:

        See old.py implementation and modifications in draft.py.

TokType:

    - Internal data object given to a lexer.

    Attribute | Note
    --------------------------------------------------------------------------------
    name      | Name of token.
    regex     | Regex to match the token.
    emit      | Whether to emit back to parser [default: True].
    --------------------------------------------------------------------------------

    Kinds:

        See grammar-parsing-algo notes.

Token:

    - Simple internal data object emitted by a lexer.

    Attribute | Note
    --------------------------------------------------------------------------------
    toktype   | TokType of the token.
    value     | Corresponding token text.
    pos       | Position (where matched)
    line      | Line number.
    col       | Column number.
    --------------------------------------------------------------------------------

    Kinds:

        Same as TokType.

ParseElem:

    - Simple internal data object emitted by the parsing phase of
      SpecParser.parse(). Subsequent work in that method will convert the
      ParseElem into a user-facing Grammar.

    - Attributes for each kind of ParseElem will vary.

    Kinds:

        variant
        group
        opt
        quantifier
        choices
        parameter
        literal

State:

    - An internal data object used during argument parsing. See
      arg-parsing-algo notes.

ArgResult:

    - An internal data object used during argument parsing. See
      arg-parsing-algo notes.

Target:

    - A data object used during argument parsing to store the information
      ultimately returned as a Result to end user.

    - For the applicable parsing interpretation, a Target contains information
      about all relevant Opt/Pos and values parsed so far.

    Attribute | Note
    --------------------------------------------------------------------------------
    poss      | List[Pos]
    opts      | Dict[Opt]
    vals      | Dict[DEST -> VAL]
    --------------------------------------------------------------------------------

