--------
api-vs-text: API-driven vs text-driven
--------

Two fundamental configuration strategies for argument parsers:

    - API-driven:

        - User configures a parser via the programmatic API.
        - The parser generates the help text.
        - Typically allows user to override with literal help text, if desired.
        - Examples: argparse and many others.

    - Text-driven:

        - User writes usage and options text.
        - Library derives the parser from that text.
        - This approach is much less common.
        - Examples: docopt.

The optopuss library combines the best of both approaches:

    - API-driven.

        - Tends to require less typing.

        - Generated usage text is mostly fine, especially for simpler projects.

        - Most developers probably prefer an API-driven approach over
          hand-formatting help text themselves.

        - API-generated help text will follow the conventions for documenting
          command-line programs -- conventions that few developers have studied
          in depth and would rather not worry about.

    - Text-driven for grammar and naming:

        - Even though my experiments configuring argument parsers of varyig
          complexity via usage text convinced me of the benefits of an
          API-driven approach, text-driven option parsers have notable
          advantages. Those advantages are focused on command-line grammar and
          the associated naming for parsed data returned to the caller.

        - The text-driven approach emphasizes the idea of usage variants, a
          technique that can greatly enhance usage-text readability --
          especially for complex programs but also for small ones.

                git diff [<commit>] [--] [<path>...]
                git diff --cached [<commit>] [--] [<path>...]
                git diff <commit> <commit> [--] [<path>...]

                frob [--debug] [--foo <f>] <path>...
                frob --help
                frob --version

        - Usage variants open up a range of possibilities in the kinds of
          command-line grammars that can be supported. API-driven parsers
          struggle with command-lines that need any grammar falling beyond the
          most typical cases. On stackoverflow and bugs.python.org, for
          example, one can find many command-line use cases (some of them quite
          simple) that are not supported easily by argparse but that are
          straightforward in docopt.

        - Finally, usage syntax is both efficient and intuitive. When internet
          users discuss command-line grammar scenarios, they invariably use a
          usage syntax to specify the desired grammar. In my own research, I
          experimented with defining the needed grammars via an API, but I
          consistently found the text-based approach simpler to express and
          read.

Configuration via usage syntax is focused on grammar:

    - Optopuss keeps that syntax fairly clean, readable, and intutive by
      focusing it solely on the grammar and naming -- the area where it excels.
      Other details, if any are neeeded, are handled via the API.

    - The syntax is also intuitive because it relies heavily on common
      conventions for documenting command-line programs.

    - The syntax will look roughly like familiar usage text, plus a small
      number of additional syntax elements focused on supporting flexible
      command-line grammar.

          - Usage variants. Discussed above.

          - Partial variants, which use the variant concept to define a named
            group of options and/or arguments that can then be inserted into
            one or more usage variants -- avoiding repetition in the definition
            of complex grammars.

          - Named destinations for any group of elements in the grammar.

    - The syntax opens up a wide range of possibilities for complex programs or
      unusual grammars

    - But it also helps at the micro scale, simplifying the configuration of
      individual options.

--------
other-lib-weaknesses: Addressing weaknesses common in other libraries
--------

Providing users with simple ways to handle command-line grammars and usage
variants (just noted).

Supporting everything from quick-and-dirty scripts to complex, highly
customized command-line programs:

    - At once extreme, optopuss allows you to parse any default-behavior
      command line, with zero configuration. Just import and go. This parser
      won't enforce any rules, but it will tell you what the end-user entered
      -- which is good enough for many types of quick-and-dirty scripts,
      debugging sessions, experiments, and even early prototypes.

            import optopuss
            opts = optopuss.parse_args()

    - At the other extreme, you could build the next Git or a variety of
      programs with idiosyncratic grammars, heavily customized help text, and
      many other features.

    - Sitting between the two extremes are numerous conveniences and sensible
      defaults to make option parsing easy, no matter what level of control
      your application needs.

Allowing users to control the generated help text in a fine-grained manner.

    - Program complexity increases the need to organize and fine-tune help
      text, but not necessarily to write and layout the whole thing.

    - Optopuss provides many mechanisms for that fine tuning:

        - Simple top-level configurations to control basic layout,
          capitalization, punctuation, etc.

        - Support for common styles: command-line vs man-page.

        - Ability to group options into sections.

        - Ability to supply hand-crafted sections whenever needed and to locate
          those sections with precision in the output.

        - Ability to control nearly all parameters driving the help text
          contruction process via configuration and, where necessary, through
          the programmatic hooks. There should be no need to subclass optopuss
          or delve into the parser's innards.

Allowing users to enhance usage-text readability by being able to refer to
groups of options and to omit either short or long options.

    - API-generated usage text tends to be poor not only because it lacks usage
      variants but also because the generated text exhaustively lists all
      options in all of their permutations (short and long).

    - Especially as the number of options grows, readability can be improved
      greatly by referring to sets of options by symbolic names rather than by
      enumerating every possibility.

    - Similarly, readability can be enhanced by focusing the usage text on just
      the long-options (or just the short-options) and then providing a mapping
      between short and long options latter in the help text.

Allowing users to define their arguments and options in ways that encourage
modularity.

    - In optopuss a user defines options and arguments as atomic units,
      separate from the issues of command-line grammar, usage variants, and
      options help text.

    - Each of those atomic units can be assigned to one or more groups of
      related options.

    - Then those options or option-groups can be leveraged when defining the
      command-line grammar, when expressing the generated usage text, and when
      organizing the options text into sections.

Providing users with full access to the parser configuration, both via the API
and in the form of standard, serializable data structures.

Providing users more conventient mechanisms to reduce repetition in
the configuration of the parser.

--------
other-goals: Other goals
--------

Prioritize the simple use cases. Yes, add features and customization
capability. But do that without sacrificing super super usage patterns.

Should handle both positional arguments and options.

Usage should be intuitive and declarative, especially for the simplest and most
common use cases. It should not depend on bizarre syntax or on user-created
complex data structures.

The parser's configuration should be expressible as a data structure -- and
creatable from one. This is important for testing, debugging, easy integration
with config files, and using other libraries for data validation.

For complex programs or special needs, users should have full control over
documentation. This includes both usage/help text and the styling of error
messages.

Easy system for validators to be combined flexibly.

Should be applicable to validating subroutine arguments, both positional and
key-value.

Should support subcommand applications, like svn or git.

Should easily support different help types: (a) brief usage/synopsis, (b) full
help or man-page, and (c) extras or examples.

Include ability to merge options from several sources: ENV variables, config
files, command-line options. Note that the purpose of the configuration sources
(ENV vars and config files) is to set the default values used by the
command-line option parser. When defaults are supplied, it should also cause a
required option to become non-required (in other words, whenever default is set
for an option, it causes required to become False.

Make it easy to test the option parser.

Error handling should be under the user's control, if they want it. This is a
serious flaw in some parsers (eg argparse). The library should support both
"automatic" mode (where the parser will eagerly print help or error message and
then exit) or non-automatic mode (where the parser will simply return an object
containing all information and allow the user to decide what to do.

Should have a design that is friendly to customization. Allow users to
customize by writing simple functions or hooks rather than having to subclass.
Consider using the pluggy library so that users can implement simple function
hooks.

Start simple: begin with core behaviors; don't support more flexibility until a
basic working system is in place.

Where possible, rely on convention over configuration: sensible defaults to
allow the most common path to be followed with minimal setup.

Provide good support for --version. Show the application's name and version
number.

Provide helper functions for warn(), exit().

Support various configuration styles: per option configuration (argparse and
many other libraries do this); and thematic or bulk (make one type of setting
on multiple options at once).

Allow the user to have hidden options (eg for developers only).

Support file and dir types as arguments, with checks for existence or non-existence.

For file path arguments, support the ability to treat `-` as stdin or stdout.

Support an easy way to get bash completion.

Support @somefile.txt: user supplies command-line args via a file.

Support parse_known_args().

Support abbreviated option names when there is no ambiguity.

Support some no-configuration argument parsing strategies: default (options are
flags), key-val (options take single args by default), greedy (options consume
as many params as possible).

Support conversion/validation.

Support dispatch mechanisms.

The parser's configuration is likely to be organized as a fairly deep
tree behind the scenes. But make it easy for the user to query that
tree to obtain nodes of interest for configuration and other purposes.
Primarily this means quickly getting Opt instances, but there could
be other types of interest as well.

Let users control the important aspects of the help text: section ordering;
section titles; layout style (eg, compact 2-column or man-page); capitalization
rules; widths; conventions for showing default values; etc.

--------
standard-cli-grammar: Standard command-line grammar
--------

Typical rules of command-line grammar, as commonly understood in Unix tradition:

    - Options start with a prefix:

        --long
        -s

    - Options can take zero or more ordered parameters.

    - Positional arguments are ordered among each other:

        P1 P2 P3 ...

    - Options can be ordered in any way:

        --x4 --x1 --x3 --x2 ...

    - Options can be freely interspersed among the ordered positional arguments.

        --x3 P1 --x1 --x4 P2 --x2 P3 ...

    - Short options can be bundled:

        -x -y -z
        -xyz

--------
cli-grammar-vs-regex: Command-line grammar vs. regex
--------

Although Optopus usage syntax borrows many concepts from regular expressions,
command-line grammar parsing is not readily amenable to handling via regex
parsing approaches.

Positionals are ordered among themselves, but options can appear in any order
(ignoring boundaries and anchors). That flexibility makes it not very intuitive
to convert a command-line grammar into a manageable regular expression. At
every stage, any of the options are possible. But then once an option appears,
it cannot appear again (ignoring repeatables). That means command-line parsing
is context-sensitive.

--------
subparsers-not-needed: Optopuss does not need the subparser concept
--------

The subparser concept is much less powerful and flexible than the key concept
of a command-line grammar, along with the related ideas of usage variants and
flexible destination assignment. It's also less intuitive.

The universe of command-line programs could be broken down into a sizable
majority and two small minorities:

    - A sizable majority that needs neither subparsers nor a complex grammar.

    - A small minority that align conceptually with the subparser concept. But
      command-line grammar supports this use case even better.

    - A small minority that are forced by the limitations of current argument
      parsing libraries to resort to subparsers even though the concept does
      not align very well with their needs.

--------
opt-action-not-needed: Optopuss does not need the action concept
--------

Arguments can be configured in argparse with an 'action' parameter. The
parameter is a bit overloaded and misleading. It does control some actions (eg,
showing help text), but mostly it is used as a sometimes misnamed device for option type
and destination assignment.

    Action       | Option type       | Example         | Stored      | Notes
    ----------------------------------------------------------------------------------
    store_true   | 1 flag            | --frob          | True        | True == 1
    store_false  | 1 flag            | --frob          | False       | To override a True default
    count        | 1+ flags          | -v -v           | N           | .
    store        | Single            | --foo F         | F           | .
    append       | Repeatable single | -x A -x B       | [A, B]      | Overwrite on repeat
    extend       | Repeatable multi  | -x A B -x C D E | [A B C D E] | .
    help         | High precedence   | .               |             | .
    version      | "    "            | .               | .           | .
    ----------------------------------------------------------------------------------
    store_const  | 1 flag            | --frob          | X           | Not necessary
    append_const | 1+ flag           | --frob --frob   | [X x]       | Not necessary

--------
explicit-option-param-syntax: Why explicit syntax for option parameters is needed
--------

Without an explicit syntax to mark option parameters, various grammar
ambiguities are possible. For example:

    - Should we interpret --type as a flag or an option taking a
      parameter?

            frob --type (file|dir|link)

    - How many parameters does --group take: 0, 1, or 2?

            frob --group (a|b|c|d) (x|y)

    - Special syntax for choices (for example, the conventionally used
      braces) helps only in the case when nparams equals 1.

The relatively low cost way to resolve such issues to an explicit syntax for
any command line arguments that vary.

--------
high-precendence-options: High precedence options
--------

Most options control the primary behaviors of a program. But some are
special, most notably those related to user help:

    --help
    --version
    --examples
    --demo

Argument parsing libraries often provide an convenient mechanism for --help and
sometimes --version, but rarely anything else. In addition, they tend to
provide such features in a way that is slightly misleading (at least in a
strict sense) and definitely not as convenient for users as it could be.

Consider a simple subcommand-style program. Assume that both <id> and the
parameter for -n should be integers and that the program has both general help
text and subcommand help text.

    demo [--help] [-n {}] (print|delete) <id>

At least by default, if the end-user supplies the --help option, an argument
parser should (1) print help text and exit, (2) select the help text that is
relevant given the other command-line arguments, and (3) ignore errors in the
other command-line arguments. Some examples of desired behavior:

    demo --help                # General help.
    demo --help delete         # Delete help.
    demo --help -n HI delete   # Same, in spite of invalid -n parameter.

Most argument parsers fail on #3 (they gripe instead of helping) and they do
not easily support #2.

Optopuss addresses those problems with two mechanisms: high-precendence options
and flexible dispatching. If an option is configured to be high-precendence,
its presence among the command-line arguments will trigger whatever action it
has been configured to perform, and that dispatching configuration will take
precendence over error reporting. When high-precendence options are used, the
parser performs a best-effort parsing to collect as much contextual information
as it can before calling the code responsible taking action.

There are limits, of course. Some types of bad input can reduce the accuracy of
that best-effort parse. In this example, -Q in an unknown option and is treated
by default as a flag taking no parameters, which then means that HI is is
interpretted an invalid subcommand.

    demo --help -Q HI delete   # General help rather than delete help.

--------
help-text-formatting: Help text formatting
--------

Text wrapping:

    - Respect terminal widths, if known and within boundaries:

        min_width = 40
        max_width = 100

    - Allow users to adjust those parameters.

    - User-supplied text:

        - Break into paragraphs (but preserve info about N of blank lines
          between paragraphs).

        - Rewrap to the desired width (probably using textwrap module).

        - Leave indented paragraphs as-is.

        - Provide an easy syntax for users to suppress line wrapping
          within the text (eg something borrowed from markdown)

--------
arg-parsing-algo: Parsing algorithm
--------

Notation and terminology:

    - Grammar elements:

        Variant
        Group
        Opt

    - Purely notational concepts:

        Pos:         A positional Opt.
        MGroup:      A Group having mutex=True.
        Alternative: A Variant or MGroup.
        OPT:         When current arg looks like an Opt.
        POS:         When current arg looks like a Pos.

    - Parsing terms:

        - Alternatives: the Variants and MGroups determine how many
          alternatives we will try.

        - Interpretations: within an alternative, there can be multiple valid
          interpretations of the arguments -- specifically how they are
          allocated to Opts either as positionals or params.

        - Backtracking:

            - Current parsing route: the interpretation you are
              currently on, based on a successful parse of the current
              arg.

            - Foregone interpretation: the interpretation that you
              could have selected, but did not -- so you push it to
              the stack.

Some key insights related to backtracking:

    - Parsing decisions that might require backtracking come from positional
      arguments or parameters, not options. Options, if present, are
      non-ambiguous: either they are known and allowed, or not.

    - Backtracking is needed when your current parsing route ends up attaching
      a param to an Opt or an argument to a Pos but then that route ultimately
      fails (on a later argument). You need to backtrack to check any foregone
      alternative interpretations of the input arguments.

    - Alternative interpretations are possible only for Opt with non-static
      nparams, Pos with non-static nargs, or Pos with non-static ntimes.

    - So pushing to the stack needs to happen when your parsing decision for
      the current argument creates a foregone alternative.

    - This occurs only for successful parsing of the current argument; never
      for errors.

    - Variants and MGroups also don't require a backtracking mechanism.

        - Rather, you want to process all of the alternatives in order, based
          on the Grammar. Each alternative either succeeds or fails. And you
          stop on the first success.

        - The best time load the stack with these alternatives is before the
          while-stack loop begins. This will ensure that each alternative will
          be tried in order. Because we are using a stack, backtracking within
          any specific alternative (due to non-static nparams/nargs) will
          finish before the algorithm advances to a fresh alternative.

        - If you were to try to push foregone interpretations to the stack when
          an alternative fails, you interfere with the correct ordering of the
          alternatives. Perhaps even worse, it's not easy to know within the
          while-stack loop when an alternative have totally failed. Each
          iteration of the loop can be either starting a fresh alternative or
          exploring one of the different interpretations possible within the
          alternative.

A backtracking example:

    Grammar:
        Opt('-f', nparams = (1,3))
        Opt('x', nargs = (3,4))

    Input:
        -f V1 V2 V3 V4 V5

    Parsing logic:

        -f : Valid: attach it to Opt(-f).

        V1 : Attach to Opt(-f)

        V2 : Because Opt(-f) is greedy by default, attach. But
             this attachment is not required due to non-static
             nparams. Before pushing the new State where V2
             is attached to Opt(-f), we should push the foregone
             interpretation -- namely, where we restrict Opt(-f)
             to nparams of (1,1).

        V3 : Same logic: attach and push foregone interpretation.

        V4 : Attach to Opt(x).

        V5 : Same. But now we're out of arguments and have not
             satisfied Opt(x). So this interpretation fails.
             The next State in the stack will restrict
             Opt(-f) to nparams of (2,2), which will succeed.

    Logic if Opt(-f) had been non-greedy.

        V2 : Don't attach to Opt(-f). Now the foregone interpretation
             is for Opt(-f) with nparams of (2,3). Push that
             to the stack.

Result:

    - Data object returned to user after parse.

Target:

    - Similar to Result in storing the parsed information.

    - But the data is structured with an eye toward supporting
      the parsing process rather than toward user-friendliness.

State:

    - Data object to hold parsing state information as the various
      alternatives from the grammar are being tried during the
      while-stack loop.

    - Attributes:

        ai: index of args.

        gp: next available Pos [or None].

        np: nparams remaining for the active Opt [or None].

        av: map of available Opt to remaining ntimes [0 for exhausted].

        target: parsed data accumulated so far.

        err: error that terminated the current alterantive [or None].

ArgResult:

    Data object to represent info need to capture the result-so-far
    when parsing the current arg. Some likely attributes:

        err: data object holding error info
        opt: matched Opt
        val: converted value

    Notation here:

        ArgResult(ERR: ...)
        ArgResult(OPT)
        ArgResult(PARAM)
        ArgResult(POS)
        ArgResult(UNKNOWN)   # For parse-known-args mode.

Algorithm: how to handle optional Groups:

    - A Group can be optional overall, but have required elements if
      the Group is triggered by the presense of any of its elements.
      For example, if either -x or -y are present, both are needed.

        [ -x -y [-i] ]

    - When to handle such matters:

        - During parse. For example, when we see -x, then we would
          immediately adjust ntimes for -y.

        - After a successfull ArgResult. Before checking Opts for sufficient
          nparams, nargs, ntimes, we would first adjust those expectations
          based on any Groups that were activated by the presense of the Opts.

    - The latter, for two reasons:

        - Groups can alter quantifier expections. It makes sense to
          do all of that logic together.

        - More fundamentally, an optional Group can contain positionals and
          params. Like in the rest of the grammar, greedy is the default. That
          means positionals within optional Groups should be attached eagerly.
          It could get very messy trying to support some special logic just for
          optional Groups. The user has multiple ways to configure the grammar
          if the default greediness isn't desired.

Algorithm: setup:

    Stuff from the end-user or user:

        args = [...]

        P = Parser(...)
        G = P.grammar

    Initialize the stack that drives the algorithm. For every allowed combo of
    Variant and MGroup, add a State instance to represent the initial
    conditions of each Alternative.

        stack = [S1, S2, ...]
        stack = list(reversed(stack))

        # Every State examined and whether the entire parse succeeded.
        history = []
        success = False

Algorithm: parsing loop:

    while stack and not success:

        # Prep.

        S = stack.pop()
        arg = args[S.ai]
        T = P.get_arg_type(arg)
        ares = ArgResult()

        # Check arg type.

        if T is OPT:

            # Handle aliases and fuzzy match.
            if arg not in S.av:
                arg = P.fuzzy_match(arg)

            if S.np is not None:
                ares = ArgResult(ERR: expected param but got OPT)
            elif arg not in S.av:
                ares = ArgResult(Error unknown OPT)
            elif S.av[arg] == 0:
                ares = ArgResult(ERR: OPT occurred too many times)
            else:
                ares = ArgResult(OPT)

        else:
            if S.np[arg]:
                ares = ArgResult(PARAM)
            elif gp is not None:
                ares = ArgResult(POS)
            else:
                ares = ArgResult(ERR: too many POS arguments)

        # Conversion and validation for PARAM and POS.

        if not ares.ERR and not ares.OPT:
            null = object()
            val = null
            ok = null
            err = None
            try:
                val = ares.opt.convert(arg)
                ok = ares.opt.validate(val)
            except (...) as e:
                ares.err = captured info about the error

            if best-effort-mode and ok is not True:
                # Treat as success.
                ares.best_effort = True
                ares.val = arg
            elif val is null:
                ares = ArgResult(ERR: conversion raised an error)
            elif ok is null:
                ares = ArgResult(ERR: validation raised an error)
            elif ok is False:
                ares = ArgResult(ERR: validation returned False)
            else:
                # Success.
                ares.val = val

        # Handle parse-known-args.

        if parse-known-mode and ares.ERR:
            ares = ArgResult(UNKNOWN)

        # Check for overall success if args exhausted.

        if ares.ERR is None and S.ai + 1 == len(args):
            if all Opts have sufficient nparams, nargs, ntimes:
                success = True
            else:
                ares = ArgResult(ERR: insufficient nparams/nargs)

        # Store history, push foregone, check overall success.

        if ares.ERR:
            # On error, just store the history.
            S.target.add(ares)
            history.append(S)

        else:

            # Check for foregone interpretation.
            if not success and (ares.PARAM or ares.POS):
                If either of these apply:
                    - Matched Opt has non-static nparams.
                    - Match Pos has non-static nargs or ntimes.
                Then:
                    S2 = new State to represent the foregone parsing route
                    stack.push(S2)

            # Store history.
            S.target.add(ares)
            history.append(S)

            # Create next parsing State.
            S1 = new State based on current parsing route
            stack.push(S1)

Algorithm: wrap up:

    if success:
        return history[-1].target


--------
alternative-parsing-algo: Alternative parsing algorithm won't work after all
--------

The algorithm:

    - When parse() is called, there will be N command line arguments.
      Command-line use cases never have large N.

    - Using the parser configuration, assemble data on the aspects of the
      grammar that are not static. The most common non-static configurations:
      varying nargs, nparams, or ntimes; variants; and alternatives.

    - For grammar elements that have no inherent boundaries (eg, an option
      taking 1+ params), interpret them in as bounded by using N as the upper
      limit.

    - Use all of that information to generate all static grammars that satisfy
      the actual grammar.

    - Check each static grammar against the command line arguments.

    - A successful parse finds exactly one successful static grammar.

What causes a grammar to generate multiple possibilities?

    .                     | Where expressed | Note
    -----------------------------------------------------
    Varying nargs/nparams | Opt             | .
    Varying ntimes        | Opt or Phrase   | Includes required.
    Alternatives          | Phrase          | Includes variants.
    Aliases               | Opt             | .

Benefits of the algorithm:

    - This code seems easy to write:

        - The generation of static grammars seems like a manageable
          situation involving itertools.

        - Parsing a static grammar very simple: no backtracking required.

    - It provides a run-time guard for users against ambiguous grammars.

Three concerns:

    - The approach seems non-standard. A classic stack algorithm seems to suit
      the situation. And that code might not be any harder to write -- perhaps
      just a bit less familiar. Why reinvent the wheel? Make sure there's a
      good reason.

    - Modern operating systems and shells have very large limits on the max
      size of command lines and N of arguments. Why build a good argument
      parsing tool that would fail at moderate values for N -- especially
      when a linear algorithm is known?

    - There won't necessarily be only one successful parse of the static
      grammars, as noted in the discussion of ambiguous grammars. By using a
      greedy assignment policy the parser can ignore that matter. But regular
      expressions have a greedy concept precisely because without it there can
      be more than one successful parse of an input. [On further reflection,
      this point argues against expecting only one successful static grammar.
      But if you try the static grammars in the correct order, based on greedy
      policies in place, you can stop at the first success -- as regex does.]

--------
abmiguous-grammars: Ambiguous grammars are not an issue
--------

From a strictly grammatical perspective, only one positional can have a
non-static nargs or ntimes, because there isn't exactly one valid way to attach
the values to the destination attributes. A similar problem occurs when an
option has non-static nparams and a positional has non-static nargs.
Two examples:

    <xray>...    <y>...
    --xray {}... <y>...

But that's not a problem, because Optopuss can do what regular expression
engines do: greedy assignment by default, non-greedy by configuration.

--------
parsed-data-structure: Parsed data structuring: nargs, nparams, ntimes
--------

The meaning of nparams, nargs, and ntimes:

    nparams : N of params (for options)
    nargs   : N args (for positionals)
    ntimes  : Governs only optionality and repetition via {n,m} or its shortcuts.

    Options:                    #  nparams  ntimes

        -y                      #  0        (1,1)
        [-y]                    #  0        (0,1)
        [-y {} {}]              #  2        (0,1)

    Positionals:                #  nargs    ntimes

        <x>                     #  1        (1,1)
        [<x>]                   #  1        (0,1)
        (<x> <x> <x>){0,2}      #  3        (0,2)
        -----------------------------------------
        <x> <x> <x>             #  3        (1,1)      # A
        <x>{3}                  #  1        (3,3)      # B

Is nargs needed? Why not handle it all with ntimes? See the examples marked A
and B above. There is a subtle difference between the two configurations in the
returned data, if the user requests non-flattened. Example A would produce [X1,
X2, X2], but example B would create [[X1], [X2], [X3]]. Generally, users should
prefer to configure positionals with nargs first, using ntimes only when
required.

Internally, all data assigned to destinations will be stored in a fully
explicit manner. Assume a list of lists, where nargs/nparams determines the
length of the inner lists and ntimes determines the length of the outer.

    self._values = [
          [a1, a2, ...],  # First time.
          ...             # Etc.
    ]

But attribute values returned to users will be as flat as possible, based on
nargs/nparams and ntimes (unless user requests non-flattened data).

    nargs/nparams | ntimes 0 or 1 | ntimes 2+ flattened                 | ntimes 2+ non-flattened
    ---------------------------------------------------------------------------------------------
    0             | bool          | [bool, bool, ...]                   | [[bool], [bool], ...]
    1             | a1            | [a1, a2, ...]                       | [[a1], [a2], ...]
    2+            | [a1, a2, ...] | [[a1, a2, ...], [a1, a2, ...], ...] | .

--------
eager-attachment-at-bounary: Eager option attachment at repetition boundaries
--------

In the following example, the -z option will bind eagerly to the repeated
triplets of positionals.

    Grammar:                  cmds=(<a> <b> <c> [-z]){2,7}
    Example input:            A1 B1 C1 -z A2 B2 C2
    Returned data for cmds:   opts.cmds[1] = Namespace(a=A1, b=B1, c=C1, z=False)

That policy is consistent with greedy parsing elsewhere. Configuration for this
issue will have to be done via the API.

--------
grammar-syntax-named-unnamed: Grammar syntax: named and unnamed arguments
--------

Positionals must be named:

    frob <a> <b> [<c>]

Option arguments can be named or unnamed:

                                        # opts.mode:
    frob --mode {group} {name} {n}      # - Data object with attributes.
    frob --mode {} {} {}                # - Tuple.

--------
variants-needed: Variants: why they are needed
--------

Are variants needed give that the grammar syntax already has support for
alternatives?

Partial variants are a useful device to express some grammars more
conveniently.

Usage variants are a good mechanism for the user to help Optopuss generate more
readable usage text and more relevant portions of it in response to errors.

Variants can provide a low-config mechanism for subcommand-style programs to
provide subcommand help text.

Variants have been a useful concept, and their names convenient handles, when
thinking about and planning this project. That utility might come in handy
later.

So one might think of the following related concepts, from most general
to most specific:

    Group           # Any grouping of grammar elements.
    Alternative     # A grouping where the end-user should choose one.
    Variant         # An alterantive that strongly affects usage text.

--------
destination-assignment: General destination assignment: needed after all
--------

Optopuss does need generalized destination assignment. At a minimum, it needs
that feature not just for Opt, but also for partial variants. And once you go
that far, you might as well generalize it.

Consider examples like neck-diagram (nab is similar). With destination
assignment, the specific Opt destinations (cmd, snum, syms, etc) will be nested
underneath the 'commands' namespace (the outer destination assignment). The returned
data would have this structure:

    opts.commands : (
        Namespace(cmd = 'snum', snum = 6),
        Namespace(cmd = 'tuning', notes = ('E', 'A', ...)),
        Namespace(cmd = 'fret', syms = ('1', '3', '5')),
        ...
    )

Without the outer assignment, the returned data would be grouped by the Opt
destination names -- which badly jumbles everything up:

    opts = Namespace(
        cmd   : ['snum, 'tuning', 'fnum', 'fret', 'fret', ...]
        snum  : ['6']
        fnum  : ['5']
        notes : [[...]]
        syms  : [[...], [...], ]
    )

--------
grammar-syntax-complexity: Grammar syntax: is it too complex?
--------

To evaluate the question, I focused on the least intuitive aspect of the syntax
and compared it against the API-driven alternative:

Alternatives:

    - This is an easy call: syntax is intuitive and API usage for this
      situation is annoying.

    - This is a strong example of the superiority of text syntax for grammar
      configuration relative to API.

Quantifiers:

    - The ... is intuitive and practically a convention.

    - The {m,n} syntax directly mimics regex and is also quite intutive.

General destination assignment:

    - This feature is powerful: it allows grammar variation when
      a positional or parameter takes a specific value.

    - Configuring such matters via the API requires the user to understand how
      the library works a bit too closely.

Partials:

    - API usage would require the user make multiple configurations to mark a
      variant as partial and then insert it wherever needed.

    - The partial syntax isn't heavy; in fact, it's moderately intuitve and
      without it, the grammar syntax might even be a bit less immediately
      understandable.

Zones and anchoring:

    - I suspect the desire for zones and anchoring is moderately low but still
      more than nothing.

    - Also, configuring these parameters via the API is simple to understand
      and requires little code.

    - While the zone syntax not too obtrusive, and it is a mixture of intuitive
      (zone markers) and not very intuitive (anchor markers)

    - Infrequent use case, easy to handle via API: let's drop it from grammar syntax.

    - Another question: is the zone concept needed, or could Group do the same
      thing? I increasingly think so.

High precedence:

    - Setting this attribute is easy in the API.

    - Although the syntax is not heavy, it's also not fully intuitive.

    - The majority of use cases will get the built-in help behavior, and the
      library could interpret --help and --version options as high precedence
      by default.

    - Infrequent use case, easy via the API: let's drop it.

