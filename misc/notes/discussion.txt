--------
why-optopus: Why Python needs a better command line argument parser
--------

INTRODUCTION

    To varying degrees of success, command-line argument parsing libraries do a
    mostly adequate job handling the common use cases. They are able to parse
    garden-variety command-line inputs and provide help text to end users. Some
    libraries take partial steps toward supporting a larger set of features:
    basic conversion and validation; varying numbers of optional parameters or
    positional arguments; mutually exclusive options; subcommand-style programs
    like git; and occasionally a small amount of help text customization or the
    ability to control error handling.

    But why settle at such low expectations? Every year thousands of
    command-line scripts are written in Python using argument parsers that are
    just OK: they are less intuitive, more verbose, and more hemmed in by
    restrictions than they need to be.

    Optopus will change that by providing a library that is intuitive and
    efficient to configure; powerful when needed for complex, specialized,
    unusual, or merely particular situations; and designed carefully with an
    eye toward customization and flexibility. At every level of program
    complexity -- ranging from throwaway scripts to the next-big-thing --
    Optopus will offer a superior approach to handling command-line arguments.

    The library is under active development and a beta release has been
    published. The purpose of that release was mainly to reserve the project
    name in pypi.org, but it already provides one small bit of useful
    functionality not currently available in other libraries -- namely,
    no-configuration parsing, which is handy for temporary or experimental
    scripts that require nothing more than open-ended support for options and
    positionals.

        # Install the library in the usual way:

            $ pip install optopus

        # Write almost no code:

            from optopus import Parser

            p = Parser()
            opts = p.parse()

        # Check out the returned data object:

            print(opts)
            print(opts.bar)               # Attribute access.
            print(opts['bar'])            # Key access.
            print('bar' in opts)          # Membership testing.
            for dest, val in opts:        # Direct iteration.
                print((dest, val))

        # Demo usage:

            $ python demo.py Z1 Z2 --bar B1 B2 -x -y Y1 -- Z3
            Result(positionals=['Z1', 'Z2', 'Z3'], bar=['B1', 'B2'], x=True, y='Y1')
            ['B1', 'B2']
            ['B1', 'B2']
            True
            ('positionals', ['Z1', 'Z2', 'Z3'])
            ('bar', ['B1', 'B2'])
            ('x', True)
            ('y', 'Y1')

OPTOPUS VS THE COMPETITION

    I can talk your ears off about the subject of command-line argument parsers
    in Python, Ruby, and, from an earlier era, Perl -- their strengths and
    especially their weaknesses and many annoyances. But rather than starting
    with opinions, let's perform some side-by-side comparisons across a
    spectrum of program types.

    I will use argparse in the comparisons, but not because it is a bad library
    -- to the contrary, it is better than the vast majority of alternatives.
    Argparse is a dream to use compared to its predecessor, optparse, and it is
    easier to configure than the argument parser built into Ruby. Basically,
    argparse is among the best of a barely-adequate bunch.

    The comparisons will start with a minimal script: a bare-bones grep clone
    that will allow us to use Python regexes rather than whatever grep ships
    with. Schematically, we want to handle this usage:

        pgrep [-i] [-v] <rgx> <path>

    Here is the argparse configuration:

        # Example 1: argparse.

        ap = argparse.ArgumentParser(prog = 'pgrep')
        ap.add_argument('-i', action = 'store_true')
        ap.add_argument('-v', action = 'store_true')
        ap.add_argument('rgx')
        ap.add_argument('path')

    The equivalent Optopus configuration dispenses with all of that hassle.
    Instead, it relies on the conventions that most programmers already know
    regarding command-line usage syntax -- the same syntax you just read and
    understood a few paragraphs above. That syntax, along with a small number
    of sensible augmentations, will allow Optopus to reduce developer hassle
    significantly while also providing a more powerful and flexible argument
    parser. The difference between the two configurations is striking.

        # Example 1: optopus.

        p = Parser('pgrep :: [-i] [-v] <rgx> <path>')

    As a second comparison, we will take the same script and make it more
    fleshed-out with some help text and the ability to support zero or more
    file path(s).

        # Example 2: argparse.

        ap = argparse.ArgumentParser(prog = 'pgrep')
        ap.add_argument('-i', '--ignore-case', action = 'store_true', help = 'Ignore case')
        ap.add_argument('-v', '--invert-match', action = 'store_true', help = 'Select non-matching lines')
        ap.add_argument('rgx', help = 'Python regular expression')
        ap.add_argument('path', nargs = '*', help = 'Path(s) to input')

    The Optopus configuration is more efficient (53% the size of argparse),
    more readable, and requires less API knowledge. You just type what you want
    and have to remember nothing more than an intuitive, mostly already-known
    syntax. Note that Example 1 used what Optopus calls a usage-variant syntax:
    it expressed the full command-line grammar in schematic form. Example 2
    uses a closely related syntax, called opt-help syntax. Each line configures
    a single Opt (a configuration object representing one positional argument
    or option) using the same syntax seen in the first example, optionally
    accompanied by one or more aliases and help text. Because the opt-help
    syntax is more featureful at the level of individual Opts (it can declare
    aliases and help text), it is often the easiest mechanism to use for
    non-trivial scripts that do not have any special grammatical needs.

        # Example 2: optopus.

        p = Parser('''pgrep
            <rgx> : Python regular expression
            [<path>...] : Path(s) to input
            [-i --ignore-case] : Ignore case
            [-v --invert-match] : Select non-matching lines
        ''')

    The next step in the script's evolution might be to add some more options,
    along with some conversion and validation of the inputs. The argparse code
    starts to get a bit heavy.

        # Example 3: argparse.

        ap = argparse.ArgumentParser(prog = 'pgrep')
        ap.add_argument('rgx', metavar = '<rgx>', type = re.compile, help = 'Python regular expression')
        ap.add_argument('path', metavar = '<path>', type = pathlib.Path, nargs = '*', help = 'Path(s) to input')
        ap.add_argument('--ignore-case', '-i', action = 'store_true', help = 'Ignore case')
        ap.add_argument('--invert-match', '-v', action = 'store_true', help = 'Select non-matching lines')
        ap.add_argument('--max-count', '-m', metavar = '<n>', type = int, help = 'Stop searching after N matches')
        ap.add_argument('--context', '-C', metavar = '<n>', type = int, help = 'Print N lines of before/after context')
        ap.add_argument('--color', metavar = '<col>', choices = ('red', 'green', 'blue'), help = 'Highlight matching text: red, green, blue')

    By comparison, the Optopus configuration remains compact (71% the size of
    argparse), intuitive, and easy to scan. If you want to spiff it up further
    you can have your editor line everything up on the colon separators. Also
    notice the two phases of configuration: most of the work is done in the
    text syntax (called a parser `spec`, short for specification); and then
    extra configuration is applied via a programmatic API. Notice also that the
    API emphasizes simple conveniences: if any Opts share configuration
    parameters (options -m and -C in our example), they can be handled jointly
    in a single config() call. The last config() call is not required, but it
    helps to clean up the help text, which we will examine shortly. In spite of
    its brevity, the Optopus configuration actually does more validation (in
    the example, `isfile` and `ispositive` are assumed to be callables defined
    by the user).

        # Example 3: optopus.

        p = Parser('''pgrep
            <rgx> : Python regular expression
            [<path>...] : Path(s) to input
            [-i --ignore-case] : Ignore case
            [-v --invert-match] : Select non-matching lines
            [-m --max-count <n>] : Stop searching after N matches
            [-C --context <n>] : Print N lines of before/after context
            [--color red|green|blue] : Highlight matching text
        ''')

        p.config('rgx', convert = re.compile)
        p.config('path', convert = pathlib.Path, validate = isfile)
        p.config('m C', convert = int, validate = ispositive)
        p.config(kind = 'option', sym = 'options')

    Before looking at the final code comparison, we can also consider the
    differences in help text between the two libraries. The output from
    argparse is familiar and reasonable, if a bit awkward at times. It is also
    mildly annoying if you are among those who care about finer details
    related to capitalization, spacing, and overall readability.

        # Example 3: argparse help text.

        usage: pgrep [-h] [--ignore-case] [--invert-match] [--max-count <n>]
                     [--context <n>] [--color <col>] <rgx> [<path> ...]

        positional arguments:
          <rgx>                 Python regular expression
          <path>                Path(s) to input

        optional arguments:
          -h, --help            show this help message and exit
          --ignore-case, -i     Ignore case
          --invert-match, -v    Select non-matching lines
          --max-count <n>, -m <n>
                                Stop searching after N matches
          --context <n>, -C <n>
                                Print N lines of before/after context
          --color <col>         Highlight matching text: red, green, blue

    The Optopus help text is cleaner, easier to read, and more aesthetic. Those
    gains mostly come from a couple of alternative techniques that Optopus
    supports but does not require: first, the ability to easily summarize
    groups of options symbolically in the usage text (as `[options]` in this
    example, which was done in the last `p.config()` call above); and second,
    the separation of option help from an alias listing.

        # Example 3: optopus help text.

        Usage:
          pgrep [options] <rgx> [<path>...]

        Positionals:
          <rgx>                  Python regular expression
          <path>                 Path(s) to input

        Options:
          --help                 Print help text and exit
          --ignore-case          Ignore case
          --invert-match         Select non-matching lines
          --max-count <n>        Stop searching after N matches
          --context <n>          Print N lines of before/after context
          --color <col>          Highlight matching text: red, green, blue

        Aliases:
          --help                 -h
          --ignore-case          -i
          --invert-match         -v
          --max-count            -m
          --context              -C

    As a final comparison, we will expand beyond grepping into a suite of
    regex-based text wrangling utilities: grep, sub (for search and replace),
    and search (for search and grab). For this script, we will need to use
    argparse subparsers, which makes the configuration even heavier and harder
    to read or scan. It requires users to learn and remember even more more
    API. To avoid code repetition for options shared across the subcommands,
    the user has to take some care in defining a secondary data structure
    (`argconf` in this example). And if you work with colleagues who frown on
    long lines (as they probably should, for readability reasons
    well-understood for decades by the publishing industry) you will have to
    expand the code footprint further by wrapping the lines sensibly or by
    extracting help text into a separate data structure to de-bulk the main
    configuration code.

        # Example 4: argparse.

        ap = argparse.ArgumentParser(prog = 'wrangle')

        sps = ap.add_subparsers(dest = 'task', help = 'Task to perform', metavar = '<task>')
        sp1 = sps.add_parser('grep', help = 'Emit lines matching pattern')
        sp2 = sps.add_parser('sub', help = 'Search for pattern and replace')
        sp3 = sps.add_parser('search', help = 'Emit text matching pattern')

        argconf = {
            'rgx': dict(metavar = '<rgx>', type = re.compile, help = 'Python regular expression'),
            'path': dict(metavar = '<path>', type = pathlib.Path, nargs = '*', help = 'Path(s) to input'),
            '-i': dict(action = 'store_true', help = 'Ignore case'),
        }

        sp1.add_argument('--ignore-case', '-i', **argconf['-i'])
        sp1.add_argument('--invert-match', '-v', action = 'store_true', help = 'Select non-matching lines')
        sp1.add_argument('--max-count', '-m', metavar = '<n>', type = int, help = 'Stop searching after N matches')
        sp1.add_argument('--context', '-C', metavar = '<n>', type = int, help = 'Print N lines of before/after context')
        sp1.add_argument('--color', metavar = '<col>', choices = ('red', 'green', 'blue'), help = 'Highlight matching text: red, green, blue')
        sp1.add_argument('rgx', **argconf['rgx'])
        sp1.add_argument('path', **argconf['path'])

        sp2.add_argument('--ignore-case', '-i', **argconf['-i'])
        sp2.add_argument('--nsubs', '-n', metavar = '<n>', type = int, help = 'N of substitutions')
        sp2.add_argument('rgx', **argconf['rgx'])
        sp2.add_argument('rep', metavar = '<rep>', help = 'Replacement text')
        sp2.add_argument('path', **argconf['path'])

        sp3.add_argument('--ignore-case', '-i', **argconf['-i'])
        sp3.add_argument('--group', '-g', metavar = '<n>', type = int, help = 'Emit just capture group N [0 for all]')
        sp3.add_argument('--delim', '-d', metavar = '<s>', help = 'Delimeter for capture groups [tab]')
        sp3.add_argument('--para', '-p', action = 'store_true', help = 'Emit capture groups one-per-line, paragraph-style')
        sp3.add_argument('rgx', **argconf['rgx'])
        sp3.add_argument('path', **argconf['path'])

    Once again, the comparison with Optopus is striking. Even with subcommands,
    the Optopus configuration remains quite intuitive. The user does have to
    learn a few additional syntax rules (the double-colon as a section marker,
    and the syntax for positional usage variants like <task=grep>), but the API
    burden remains low. A Python programmer unfamiliar with the library could
    quickly infer the basic intent even without knowing the all of the rules.
    This example illustrates both syntax styles mentioned above: usage-variant
    syntax to define the subcommand-style grammar that our program needs in the
    first section (for convenience, this section can refer to the Opts via
    their short aliases); followed by another section using opt-help syntax to
    configure the individual Opts more fully. Finally, notice that this
    configuration does more than the argparse example: it defines the -d and -p
    options as alternatives (multually exclusive). That behavior is achievable
    in argparse, at the cost of looking up even more API. Optopus simply builds
    on a usage syntax already known to many developers: a pipe to delimit
    alternatives.

        # Example 4: optopus.

        p = Parser('''wrangle ::
            <task=grep>   [-i] [-v] [-m] [-C]
                          [--color <red|green|blue>]
                          <rgx> [<path>...]
            <task=sub>    [-i] [-n] <rgx> <rep> [<path>...]
            <task=search> [-i] [-g] [-d | -p] <rgx> [<path>...]

            ::

            <task>             : Task to perform
            <task=grep>        : Emit lines matching pattern
            <task=sub>         : Search for pattern and replace
            <task=search>      : Emit text matching pattern
            <rgx>              : Python regular expression
            <path>             : Path(s) to input
            <rep>              : Replacement text
            -i --ignore-case   : Ignore case
            -v --invert-match  : Select non-matching lines
            -m --max-count <n> : Stop searching after N matches
            -C --context <n>   : Print N lines of before/after context
            --color <>         : Highlight matching text
            -n --nsubs <n>     : N of substitutions
            -g --group <n>     : Emit just capture group N [0 for all]
            -d --delim <s>     : Delimeter for capture groups [tab]
            -p --para          : Emit capture groups one-per-line, paragraph-style
        ''')

        p.config('rgx', convert = re.compile)
        p.config('path', convert = pathlib.Path, validate = isfile)
        p.config('m C n', convert = int, validate = ispositive)
        p.config('g', convert = int, validate = nonnegative)

    The help text comparison for the last example further highlights the
    awkward adequacy of argparse: yes it works, but no more than that.

        # Example 4: argparse help text from four usages:
        #            wrangle --help
        #            wrangle grep --help
        #            wrangle sub --help
        #            wrangle search --help

        usage: wrangle [-h] <task> ...

        positional arguments:
          <task>      Task to perform
            grep      Emit lines matching pattern
            sub       Search for pattern and replace
            search    Emit text matching pattern

        optional arguments:
          -h, --help  show this help message and exit

        # ----

        usage: wrangle grep [-h] [--ignore-case] [--invert-match] [--max-count <n>]
                            [--context <n>] [--color <col>]
                            <rgx> [<path> ...]

        positional arguments:
          <rgx>                 Python regular expression
          <path>                Path(s) to input

        optional arguments:
          -h, --help            show this help message and exit
          --ignore-case, -i     Ignore case
          --invert-match, -v    Select non-matching lines
          --max-count <n>, -m <n>
                                Stop searching after N matches
          --context <n>, -C <n>
                                Print N lines of before/after context
          --color <col>         Highlight matching text: red, green, blue

        # ----

        usage: wrangle sub [-h] [--ignore-case] [--nsubs <n>] <rgx> <rep> [<path> ...]

        positional arguments:
          <rgx>                Python regular expression
          <rep>                Replacement text
          <path>               Path(s) to input

        optional arguments:
          -h, --help           show this help message and exit
          --ignore-case, -i    Ignore case
          --nsubs <n>, -n <n>  N of substitutions

        # ----

        usage: wrangle search [-h] [--ignore-case] [--group <n>] [--delim <s>]
                              <rgx> [<path> ...]

        positional arguments:
          <rgx>                Python regular expression
          <path>               Path(s) to input

        optional arguments:
          -h, --help           show this help message and exit
          --ignore-case, -i    Ignore case
          --group <n>, -g <n>  Emit just capture group N [0 for all]
          --delim <s>, -d <s>  Delimeter for capture groups [tab]
          --para, -p           Emit capture groups one-per-line, paragraph-style

    The Optopus help text is cleaner, easier to read, more compact. It is also
    unified rather than separate (everything from a single usage of --help). If
    needed, the parser can be easily configured to support use cases that need
    separate help text for different usage variants (many programs do not).

        # Example 4: optopus help text.

        Usage:
          wrangle grep [-h] [-i] [-v] [-m <n>] [-C <n>]
                  [--color <red|green|blue>] <rgx> [<path>...]
          wrangle sub [-h] [-i] [-n <n>] <rgx> <rep> [<path>...]
          wrangle search [-h] [-i] [-g <n>] [-d <s>] <rgx> [<path>...]
          wrangle -h

        Positionals: task:
          grep                   Emit lines matching pattern
          sub                    Search for pattern and replace
          search                 Emit text matching pattern

        Positionals: other:
          <rgx>                  Python regular expression
          <path>                 Path(s) to input

        Options:
          --help                 Print help text and exit
          --ignore-case          Ignore case
          --invert-match         Select non-matching lines
          --max-count <n>        Stop searching after N matches
          --context <n>          Print N lines of before/after context
          --color <>             Highlight matching text: red, green, blue
          --nsubs <n>            N of substitutions
          --group <n>            Emit just capture group N [0 for all]
          --delim <s>            Delimeter for capture groups [tab]

        Aliases:
          --help                 -h
          --ignore-case          -i
          --invert-match         -v
          --max-count            -m
          --context              -C
          --nsubs                -n
          --group                -g
          --delim                -d

POWERFUL GRAMMARS BUILT FROM SIMPLE PARTS

    Most argument parsing libraries start from the most basic model of
    command-line usage: an ordered sequence of positionals along with an
    unordered set of short and long options that can be freely mixed among the
    positionals and that can take zero or more ordered parameters. That basic
    framework is sometimes extended to support mutually exclusive options and
    subcommand-style programs.

    The argparse library is a representative example in this vein: it does a
    reasonable job for common use cases but struggles with command-lines that
    require a grammar falling beyond the typical. On stackoverflow and the
    Python bug tracker, for example, one can find a variety of desired and
    generally sensible use cases that argparse cannot support at all or can
    support only partially after some uncomfortable hackery.

    The most frequently desired grammatical features fall into the following
    buckets:

        TODO: add links to example from SO or bug tracker.

        - Mutual exclusion beyond the simplest case. The argparse library
          supports mutual exclusion among options considered individually. But
          it cannot apply that type of requirement to groups of options (for
          example, -x OR -y -z).

        - Conditional requirements or exclusions. The argparse library does
          offer subparsers as one mechanism to apply conditional requirements,
          but this can be a heavy device for what are often fairly simple
          grammatical needs (for example, if -x then require either -y or -z;
          or if -a then disallow -b).

        - Flexible specification of alternatives. Again, argparse supports this
          partially (via subparsers or mutually exclusive options), but it
          lacks a simple, general-purpose mechanism for alternatives (for
          example, either -a OR -b OR -a -b).

        - Flexible quantification. The argparse library supports four basic
          quantifiers (N, ? *, and +), but it lacks support for regex-style
          ranges (eg, {1,3}), which can arise in a variety of plausible uses
          cases. There is no strong reason not to support them.

        - More complex repetition. The argparse library can apply quantifiers
          to individual options or positionals, but not to groups (for example,
          two positionals, <x> <y>, repeatable in pairs). Sometimes the group
          that needs to be repeated is the full command-line grammar. In fact,
          after Optopus, my next project involves such a program: a Python tool
          for quick text transformation pipelines in the spirit of sed/awk/perl
          one-liners, but with more intuitive usage, a built-in set of core
          utilities, and an easy mechanism for users to define their own.
          Because the tool is literally a pipeline for text running through
          various conversion and computation stages, it makes sense to model
          the command-line grammar as repeatable. This use case is mostly
          supportable by cobbling together multiple argparse parsers, but it is
          awkward and requires a bit of special logic. Optopus will support an
          admittedly unusual use case like that with almost no extra
          API-learning cost for the user.

        - Parameter or argument independence. When an option has multiple
          parameters or a positional has multiple arguments, most argument
          parsers force them to be configured identically. But sometimes
          independence makes sense (for example, -a <A|B|C> <X|Y>, where each
          parameter has different choices).

    The deeper problem with most argument parsing libraries is that they rest
    on a weak foundation. Perhaps a bit uncharitably, one could say that they
    started with the simplest model of command-line grammar (described at the
    start of this section). Then they tacked on additional features to meet
    some of the more common usage patterns: if users occasionally need
    subcommand-style programs, add a new API to create and configure
    subparsers; if users occasionally need simple mutual exclusion, add a new
    API to handle it; and so forth until the library reaches the technical
    limits of the weak foundation.

    A better model is to look to related domains for a small number of general,
    composable concepts: elements (in this case, positionals, options, and
    their parameters), groups, alternatives, usage variants, and quantifiers.
    At least for most developers, those concepts are frequently observed in
    regular expressions and in the related set of conventions observed in
    technical documentation for command-line programs -- namely, their usage
    syntax. By resting on these composable ideas, Optopus will be able to
    achieve both simplicity and greater power.

    In more schematic terms, Optopus supports a wide variety of command-line
    grammars by combining a few core ideas:

        - Groups enclosed either by parentheses (if required) or square
          brackets (if optional). Groups as first-class citizens is one of the
          crucial missing ingredients in most libraries.

        - Angle brackets for any kind of variable end-user input, whether it be
          positionals (<foo>) or option parameters (--point <x> <y>). The
          universe of command-line programs lacks a consistent convention on
          how to represent variable inputs. There are four main styles relying
          on different bracketing conventions (angle, square, or curly) and
          different capitalization schemes (all uppercase, all lower, or
          mixed). For a variety of technical and practical reasons, Optopus
          mimics Git and some other tools in using angle brackets consistently.

        - Pipes to separate alternatives -- a ubiquitous convention both
          in usage text and regex.

        - Quantifiers that can applied to single elements or groups. This is
          another one of the crucial missing ingredients in most parsers.
          Optopus relies primarily on the quantifiers from usage-syntax
          conventions: `...` for one-or-more and square brackets to convey
          optionality. To those it adds the regex `{m,n}` syntax for quantity
          ranges.

        - Like regular expressions, grammar elements and parsing itself are
          greedy by default. This policy decision is necessary to resolve a
          variety of parsing ambiguities that can arise. Optopus also follows
          regex in using `?` as the device to make a quantifier non-greedy.

        - The ability to name elements or groups symbolically both for display
          in usage text and for the purpose of naming things in the parsed
          result. This behavior is important not for grammatical reasons but in
          order to be able to organize the parsed data in usable ways,
          especially for more complex grammars.

    Examples of most of those grammatical features have already been shown, but
    another might help to make things more explicit. The example below defines
    a grammar for a program with two usage variants (named Add and Delete)
    triggered by the value of the <task> positional ('add' or 'delete'), along
    with a third variant (named Examples) that allows the user to request some
    help text showing examples. Note that usage variants can have explicit
    names (as shown below) or not; if defined, a variant name is mainly useful
    as a convenient label when using the Parser's configuration API.

        Add      : <task=add> (<name> <id>)...
        Delete   : <task=delete> <id>{1,5} [--archive [--json [--indent] | --xml]]
        Examples : --examples

    Each usage variant above has something noteworthy.

        - The Add variant requires the <name> and <id> positionals to come in
          pairs.

        - The Delete variant uses a regex-style quantifier for <id>, and the
          --archive option is configured so that it can be accompanied by other
          options in different combinations (either --xml or --json plus an
          optional --indent).

        - The Examples variant takes an entirely different form from the
          subcommand-style of the other two variants. It illustrates the
          general point noted above: if you start with a narrow vision for
          command-line grammars and then tack on a subparser API, you can
          support garden-variety subcommand-style programs, but nothing else;
          however, if you start with composable, general-purpose concepts you
          can support subcommand-style programs and all kinds of other needs as
          well -- with almost no additional API burden on users.

    Defining command-line grammar via a configuration syntax based on usage
    text is not a new idea. While most argument parsing libraries are like
    argparse in configuring the parser's grammar via a programmatic API, some
    libraries take a different approach: the user writes the usage and help
    text (sometimes enhanced with special syntax elements), the parser is
    derived from that text, and the text (minus any special syntax) is used as
    the literal usage and help text presented to end users. Examples include
    docopt in Python or Getopt::Long::Descriptive, Getopt::Euclid, and
    Getopt::Declare in Perl. I believe my first exposure to the idea came in
    the early 2000s from Damian Conway, a great programming educator and the
    initial author of Getopt::Euclid. He is arguably the inspiration for this
    library: I have been thinking, on and off, about how to make a better
    argument parser since then. A second debt is owed to Vladimir Keleshev, the
    primary author of Python's docopt. That library, in my view, has some
    unfortunate limitations, but it is based on some compelling ideas -- about
    argument parsing and, more broadly, about the kinds of tools developers
    need and do not need. The 2012 PyCon video promoting the library is
    entertaining and wonderfully polemical in the best sense of the word --
    well worth the time of anyone iterested in the subject. Watching the video
    in the early 2010s rekindled my interest in the Optopus project and helped
    me refine ideas I had been mulling over for a long time.

    In spite of those intellectual debts, my experiments with argument parsing
    libraries convinced me that both approaches -- API-driven configuration and
    usage-syntax-driven configuration -- have their strengths and weaknesses.
    Optopus aims to build on the strengths of each:

        - Usage-syntax to define the core. Optopus encourages the use of text
          as the primary mechanism to configure the command-line grammar and
          the logical relationships among the elements, along with the names to
          be used when referring to options, parameters, positionals, groups,
          and usage variants. It also encourages the text syntax for defining
          option aliases and the help text for individual positionals and
          options. Those are the areas where the text-driven approach shines,
          either because the configuration is unavoidably textual (for example,
          help text for individual Opts) or because text is simply a more
          efficient and intuitive configuration mechanism than API calls (the
          grammatical relationships among the elements). Consider the example
          grammar shown above: it conveys a lot of information very efficiently
          and intuitively when compared against what most API-driven libraries
          would require of the user (and none of them could fully support the
          example). In spite of the benefits of text-based configuration, most
          programmers do not want to handcraft the end-user-facing usage and
          help text if a computer program can do it consistently and well (not
          to mention dynamically responding to terminal width or to runtime
          configurations). That is why Optopus takes substantial inspiration
          from, but does not fully adopt, the ideas motivating the text-driven
          parsers like Getopt::Euclid and docopt. Optopus treats the text
          primarily as a configuration syntax, not literal usage text.
          Naturally, it does provide a simple and flexible mechanism for that
          syntax to include blocks of literal text.

        - Programmatic API for the rest. To apply other configurations
          (defaults, conversion, validation, and various other details),
          Optopus builds on the strength of the API approach and adds some
          additional conveniences to keep the developer burden low. Although it
          is possible to configure some of those things via a text syntax, the
          approach has rapidly diminishing returns, because each feature
          addition requires increasingly baroque syntactic features. Optopus
          takes a hybrid approach to capitalize on the benefits of each
          configuration style.

    Finally, it should be noted that all of the library's behaviors will be
    configurable via the API, including the grammar -- not merely to satisfy
    traditionalists, but because, at least for simpler use cases, configuring
    the parser's grammar via the API also works well. Note also that even the
    the API configuration can leverage as much or little of the grammar syntax
    as desired. To illustrate, the following configurations achieve the same
    thing: an optional --dim option having an alias and taking 2 to 3
    parameters. I suspect that many developers will prefer the efficiency and
    intuitivess of the syntax, but that opinion is not enforced by the library.
    Users can freely operate at any point they prefer along the text-to-API
    spectrum.

        # All text syntax.
        Opt('[-d --dim <> <> [<>]]')

        # Hybrid.
        Opt('--dim', nparams = (2,3), ntimes = (0,1), aliases = 'd')

        # All API.
        Opt(dest = 'dim', kind = 'option', nparams = (2,3), ntimes = (0,1), aliases = 'd')

DESIGNED FOR FLEXIBILITY

    In addition to having an insufficiently powerful grammatical foundation,
    existing argument parsers tend to be inflexible in their design and thus
    not open to very much customization. Two areas are particularly noteworthy:

    Help and error text:

        Most libraries offer only limited control over the formatting,
        arrangement, and style of help and error text. Argparse, for example,
        offers a few subclasses that adjust help text in small ways or allow
        the user to supply regular text blocks that will be presented as-is
        rather than wrapped. But the underlying HelpFormatter class is not
        friendly to customization generally. Some of its stylistic choices seem
        non-standard or inelegant to my eye and I've never found ways to adjust
        them without awkward hacks.

        More fundamentally, argparse is not prepared to handle bigger changes,
        ranging from fairly standard needs (for example, help text in man-page
        format) to more innovative approaches. Optopus will offer some of those
        approaches directly with the aim of giving programmers the ability to
        lighten-up and improve the readability of help text.

    Side effects:

        Many argument parsers, including argparse until Python 3.9, are rigid
        in response to invalid input. They start with sensible default
        behavior: in the face of bad input, print brief usage text and an error
        message, then exit. But they turn that default into a requirement by
        providing no good way to prevent the side effects from occurring. By
        good way, I mean one where the library would include sufficient
        contextual data about the error, rather than just providing the error
        text as a string.

        That default behavior works in the most common cases, but sometimes
        programs have other needs. Argument parsing libraries should follow
        ordinary best practices by giving the user the ability to bypass major
        side effects like printing and exiting. Imagine any other data oriented
        library imposing such effects without easy disabling.

    To the extent that the existing libraries do allow customization, the
    mechanisms for doing that are often awkward. Argparse is an apt example:
    many workarounds to user difficulties with the library involve subclassing,
    but most argparse classes do not appear to be well-designed for inheritance
    (and some of their docstrings seem to discourage it outright). At a
    minimum, one a can say that the library does not provide authoritative
    guidance on which classes are amenable to subclassing, if any, and what
    users should do or avoid when doing so.

    Optopus will be built with an eye toward flexibility and customization. To
    the extent feasible, all controllable parameters governing the generation
    of text will be adjustable. And for dynamic configuration needs -- whether
    related to help text, error text, side effects, or parsing -- the library
    will support them via hooks rather than subclassing. Developers needing
    special behavior will not have to worry whether they have implemented a
    method override robustly enough in the face of edge cases or future
    evolution of the library. Instead, they will just have to write an ordinary
    hook function based on a documented API.

REDUCING THE BURDEN ON DEVELOPERS

    Flexibility and customization are aimed not only at a small minority of
    developers with strong opinions about technical documentation and page
    layout. They also have practical ramifications. Developers want to build
    tools that users can easily understand. Without that, those developers face
    higher short-term and long-term support costs.

    The broad theme connecting such matters is to reduce developer hassle as it
    relates to argument handling. Some examples on the Optopus roadmap:

    Efficient Opt configuration API:

        When a program needs more than a few Opts, it is not uncommon for some
        them to have similar configuration needs. Optopus includes a simple,
        minimal-hassle API to query for one or more grammar elements (mainly
        Opts, but sometimes Variants or Groups) and apply supplemental
        configurations to all elements contained in the query result. Those
        configurations are applied to the Opts in an additive fashion, making it
        possible to configure many Opts very efficiently. This was demonstrated
        briefly in a few in the examples above, where multiple Opts were
        configured in one call to accept only positive integers.

    Handy utilties for exiting and error messages:

        Argument parsers are all used in the same general context (command-line
        programs) and such programs have many common needs during the early
        phase of execution when arguments are parsed and validated -- namely,
        printing different types of help or error text and sometimes exiting.
        Those behaviors can be implemented haphazardly or robustly and well
        (for example, exiting with a proper status code, emitting error messages
        to stderr rather than stdout, or even adding color to error output).
        And even when done well, such utilities need to be reimplemented (or
        copy-pasted) from script to script, because it is not necessarily worth
        the trouble to package them as a separate library.

        Optopus is fundamentally an argument parser and will not stray too far
        from that focus, but it will provide commonly needed functionality
        related to argument handling, help text selection and printing, error
        message creation, and proper exiting.

    Readable usage text, via symbolic grouping:

        As illustrated in a few of the examples above, a program's usage text
        can made more readable and helpful to end-users by condensing groups of
        options (or groups of choices) with symbolic names. Such techniques are
        sometimes seen in command-line programs with large numbers of options
        -- so large than an exhaustive listing in the usage text actively
        undermines usability because it overwhelms user attention and patience.
        For example, this simplified snippet of usage text from `git diff`
        illustrates the technique.

            git diff [options] [<commit>] [<path>...]
            git diff [options] --cached [<commit>] [<path>...]

        Because Optopus treats groups as first-class citizens in command-line
        grammar, and because it will also offer flexibible querying and
        configuration APIs allowing developers to organize options into
        meaningful arrangements with symbolic names, developers working on
        larger scripts (or really any script that could benefits from such
        devices) will have flexible mechanisms to generate effective usage text
        that actually helps end-users rather than exhaustively "correct" usage
        text churned out by a rigid API.

    Flexible help text, without API burden:

        Most command-line programs are sufficiently documented simply by
        listing all arguments and options, each with a line of help text.
        Sometimes, however, a different approach works better, such as
        organizing options into labeled sections or simply interspersing blocks
        of text or sub-headings in between various groupings of the listed
        options. Argparse mostly supports those needs via argument groups --
        even more API to learn.

        Because Optopus configuration rests on a textual foundation, providing
        users with more flexibility and control over the structuring of help
        text is fairly easy to accomodate. To illustrate, consider Example 4
        (the wrangle script) and imagine that the developer wanted to organize
        the help text by subcommand, with various chunks of literal text and
        sub-headings mixed in. That can probably be achieved with argparse
        using multiple argument groups per subparser, but most developers would
        not bother with the hassle. With Optopus, developers will be able to
        directly type what is wanted (provided that a few basic syntax rules
        are followed). Here is an illustration of what the grep section of that
        help text might look like. Admittedly, this presentation is too
        elaborate for the script at hand, but the main point is just to
        illustrate the ease of organizing help text as needed.

            grep::

                ```
                The grep command emits input lines matching (or not
                matching) the regular expression.

                Positionals:
                ``

                    <rgx> : Python regular expression
                    <path> : Path(s) to input

                ```
                Search options:
                ```

                    -i --ignore-case : Ignore case
                    -v --invert-match : Select non-matching lines
                    -m --max-count <n> : Stop searching after N matches

                ```
                Output options:
                ```

                    -C --context <n> : Print N lines of before/after context
                    --color <> : Highlight matching text

        Finally, to reiterate a point noted above, the configuration syntax is
        not primarily literal help text: for example, the blocks of regular
        text (marked by triple back-quotes above) will still be
        paragraph-wrapped to proper width by Optopus, while preserving the
        intended indentation level. And of course, that wrapping behavior can
        be turned off globablly, by section, or at the level of indidividual
        text blocks, if needed.

    More helpful help, via high-precedence Opts:

        Most users of command-line programs have had the experience of
        assembling a fairly large command line of positionals and options only
        to be greeted by an usage error message. What happens next? Ideally,
        the user would hit the up arrow to recall the shell command and simply
        add `--help` to the end of the command line. But most argument parsers,
        including argparse, insist on griping rather than helping. Instead of
        printing relevant help (which should be easy to support since `'--help'
        in sys.argv` is true), they doggedly report the same usage error.

        Optopus will address that issue via a mechanism call high-precedence
        options: if a high-precedence option is present among the arguments,
        its dispatch behavior will be triggered. Every Opt can have its
        dispatch attribute set with one or more callables that will be invoked
        when the option is seen. Normally, dispatch occurs only after a
        successful parse. But if such configuration is combined with a
        high-precedence setting for an Opt, its dispatch functions are called
        even in the face of end-user error. This feature is envisioned mainly
        for help-related scenarios, but it is not limited to any specific use
        case.

    Dynamically hidden Opts:

        Sometimes the development or debugging process can be helped by having
        the ability to include hidden Opts, meaning that they work but are never
        mentioned in the usage or help text. A related need is for Opts that
        apply only under specific conditions that must be determined at runtime.
        Although the latter is achievable via argparse -- just wrap parts of the
        argparse setup code in the needed conditional logic -- Optopus will
        support such behaviors via simple API configurations.

    Composable data conversion and validation:

        Argument parsing is very much concerned with the problem of data
        conversion and validation: for example, a command-line grammar can
        include validation-adjacent concepts, such as choices for positionals or
        option parameters.

        Optopus will not attempt to become a data conversion and validation
        library -- that falls beyond the scope of the project. But Opts (and
        possibly Variants) will have `convert` and `validate` attributes that
        can be set to one or more callables. That approach is not a
        revolutionary idea, of course, but it is an arrangement well-suited to
        easy composition of functionality that the user might already have
        at-hand, either from Python itself (int, float, re.compile,
        os.path.isdir, and so forth), from user-written functions or classes,
        and from third-party libraries.

    Convenient dispatching:

        Just as argument parsing is closely linked to conversion and validation,
        its ultimate purpose is dispatch: most command-line scripts take
        arguments, execute one or more functions in response, and then exit.

        Optopus will include convenient mechanisms to do that type of thing.
        One involves the concept of usage variants. As already discussed,
        variants provide a powerful means of expressing a command-line grammar
        and conveying its usage text. But variants also work well as a dispatch
        device. Both Opts and Variants can be configured with one or more
        dispatch functions, which will be called with the parsed result, along
        with any other args/kwargs the user specifies.

    Relaxed parsing modes:

        Existing libraries either ignore or support only small number of parsing
        modes. Argparse, for example, has long supported a parse-known mode and
        in Python 3.7 it added a parse-intermixed mode, which allows positionals
        and options to be intermixed a bit more flexibly on the command-line.

        Standard argument parsing in Optopus will be similar to the flexibility
        exhibited by the argparse intermixed mode. That behavior is basically
        the logical result of applying the core concepts defining the grammar
        syntax, along with a default greedy policy as it relates to
        parsing and the interpretation of the syntax itself.

        In addition, Optopus will support a feature that allows the user to
        create a set of related parsing modes that relax one or more
        requirements. These modes can be combined as needed.

            - Allow-unknown: similar to parse-known behavior in argparse.

            - Allow-uncoverted: overlook data-conversion problems.

            - Allow-unvalidated: overlook data-validation problems.

        The intended use case for relaxed parsing is either to parse the known
        part of the input and leave the rest to be handled differently, or to
        parse as much of the input as possible (even in the face of some
        end-user errors) in order to glean more information about end-user
        intent, perhaps with an eye toward providing more specific help.

    No-configuration parsing modes:

        Optopus will support some no-configuration parsing modes that will
        parse any input based on standard rules. The purpose is to support
        low-stakes or temporary scripts that could benefit from a few
        command-line options, but are not important enough to warrant much
        configuration work.

        In addition to the default no-config parsing, demonstrated in the
        introduction, the library will include a simple mechanism to achieve a
        few different flavors of almost-no-config parsing. Those flavors relate
        to the number of parameters that options will bind to. By default,
        no-config parsing is greedy, both for consistency with the rest of the
        library and also because greedy binding provides the most flexibility
        to the end-user. That parameter-binding behavior can be configured with
        a quantifier to achieve different results.

            Parser()                # Default: greedy.
            Parser(noconf = '0')    # Flag style.
            Parser(noconf = '1')    # Key-value style.
            Parser(noconf = '2,')   # 2+ parameters.

        Those examples blur the line between config and no-config, of course,
        and the last two violate the spirit of no-config by imposing some
        validation requirements on the arguments. But they are consistist with
        the spirit of Optopus, which is to make it easy to parse arguments
        under a variety of situations with minimal hassle.

    Good cooperation with configuration files and environment variables:

        Some command-line programs are substantial enough that developers want
        to allow users to declare some preferences in configuration files or
        environment variables. The typical relationship of those mechanisms to
        argument parsing is in the area of default setting, usually in this
        order:

            - Persistent settings in a configuration file.

            - Somewhat less persistent settings in environment variables. A
              setting here can override the value from a configuration file.

            - Just-in-time settings from the command line arguments. These
              setting override everything else.

        That order of operations implies that the data from configuration files
        and environment variables is mainly used to dynamically influence the
        default values for Opts. Additionally, when an Opt acquires a default
        value from an upstream source, its status can change from being
        required on the command line to optional. In the abstract, `--foo`
        might be a required option, but it should not be required if its value
        is already defined elsewhere.

        Optopus will not try to support direct integration with configuration
        parsing libraries: the universe of config files types and config
        parsing libraries is too large for that.

        Instead, Optopus will allow users to combine configuration data,
        environment variables, and command-line arguments with minimal hassle
        via a general policy and a few convenience utilities.

        The policy is to ensure that all parser configurations are exportable
        and importable as an ordinary data structure. If needed, users can
        partially configure a parser, export its data, apply any modifications
        to that data based on information from config files or environment
        variables, and then use the new data to create the desired parser. That
        is the worst-case scenario for unusual or complex situations.

        More commonly, users will simply leverage some convenience utilities to
        augment Opt configurations. The API details for this behavior are still
        under consideration, but this example illustrates one possible
        approach.

            from optopus import Parser, defkeys
            import os

            # Read a config file into a data structure.
            config = ...

            # Setup the parser from Example 2, but this time with a defaults
            # setting to tell Optopus where to obtain upstream default values,
            # and in which order.

            p = Parser('''pgrep
                <rgx> : Python regular expression
                [<path>...] : Path(s) to input
                [-i --ignore-case] : Ignore case
                [-v --invert-match] : Select non-matching lines
                ''',
                defaults = [config, os.environ],
            )

            # Configure defaults for Opts by telling Optopus which key(s)
            # to use to obtain needed values from those upstream sources.

            p.config('i', default = defkeys('ignore_case', 'pgrep_ignore_case'))
            p.config('v', default = defkeys('invert_match', 'pgrep_invert_match'))

--------
api-vs-text: API-driven vs text-driven
--------

Two fundamental configuration strategies for argument parsers:

    - API-driven:

        - User configures a parser via the programmatic API.
        - The parser generates the help text.
        - Typically allows user to override with literal help text, if desired.
        - Examples: argparse and many others.

    - Text-driven:

        - User writes usage and options text.
        - Library derives the parser from that text.
        - This approach is much less common.
        - Examples: docopt.

The optopus library combines the best of both approaches:

    - API-driven.

        - Tends to require less typing.

        - Generated usage text is mostly fine, especially for simpler projects.

        - Most developers probably prefer an API-driven approach over
          hand-formatting help text themselves.

        - API-generated help text will follow the conventions for documenting
          command-line programs -- conventions that few developers have studied
          in depth and would rather not worry about.

    - Text-driven for grammar and naming:

        - Even though my experiments configuring argument parsers of varyig
          complexity via usage text convinced me of the benefits of an
          API-driven approach, text-driven option parsers have notable
          advantages. Those advantages are focused on command-line grammar and
          the associated naming for parsed data returned to the caller.

        - The text-driven approach emphasizes the idea of usage variants, a
          technique that can greatly enhance usage-text readability --
          especially for complex programs but also for small ones.

                git diff [<commit>] [--] [<path>...]
                git diff --cached [<commit>] [--] [<path>...]
                git diff <commit> <commit> [--] [<path>...]

                frob [--debug] [--foo <f>] <path>...
                frob --help
                frob --version

        - Usage variants open up a range of possibilities in the kinds of
          command-line grammars that can be supported. API-driven parsers
          struggle with command-lines that need any grammar falling beyond the
          most typical cases. On stackoverflow and bugs.python.org, for
          example, one can find many command-line use cases (some of them quite
          simple) that are not supported easily by argparse but that are
          straightforward in docopt.

        - Finally, usage syntax is both efficient and intuitive. When internet
          users discuss command-line grammar scenarios, they invariably use a
          usage syntax to specify the desired grammar. In my own research, I
          experimented with defining the needed grammars via an API, but I
          consistently found the text-based approach simpler to express and
          read. [For a good example, see this argparse discussion where a user
          describes a problem in general terms and suggests how the argparse
          API could be augmented to handle such cases -- and the discussion
          both are somewhat difficult to understand without very careful
          reading and thinking. Then the user provides a short one-line usage
          syntax, and the issue is immediately clear.
          https://bugs.python.org/issue11588]

Configuration via usage syntax is focused on grammar:

    - Optopus keeps that syntax fairly clean, readable, and intutive by
      focusing it solely on the grammar and naming -- the area where it excels.
      Other details, if any are neeeded, are handled via the API.

    - The syntax is also intuitive because it relies heavily on common
      conventions for documenting command-line programs.

    - The syntax will look roughly like familiar usage text, plus a small
      number of additional syntax elements focused on supporting flexible
      command-line grammar.

          - Usage variants. Discussed above.

          - Partial variants, which use the variant concept to define a named
            group of options and/or arguments that can then be inserted into
            one or more usage variants -- avoiding repetition in the definition
            of complex grammars (argparse does this via parents).

          - Named destinations for any group of elements in the grammar.

    - The syntax opens up a wide range of possibilities for complex programs or
      unusual grammars

    - But it also helps at the micro scale, simplifying the configuration of
      individual options.

--------
other-lib-weaknesses: Addressing weaknesses common in other libraries
--------

Providing users with simple ways to handle command-line grammars and usage
variants (just noted).

Supporting everything from quick-and-dirty scripts to complex, highly
customized command-line programs:

    - At once extreme, optopus allows you to parse any default-behavior
      command line, with zero configuration. Just import and go. This parser
      won't enforce any rules, but it will tell you what the end-user entered
      -- which is good enough for many types of quick-and-dirty scripts,
      debugging sessions, experiments, and even early prototypes.

            import optopus
            opts = optopus.parse_args()

    - At the other extreme, you could build the next Git or a variety of
      programs with idiosyncratic grammars, heavily customized help text, and
      many other features.

    - Sitting between the two extremes are numerous conveniences and sensible
      defaults to make option parsing easy, no matter what level of control
      your application needs.

Allowing users to control the generated help text in a fine-grained manner.

    - Program complexity increases the need to organize and fine-tune help
      text, but not necessarily to write and layout the whole thing
      (text-driven libraries require that).

    - Optopus provides many mechanisms for that fine tuning:

        - Simple top-level configurations to control basic layout,
          capitalization, punctuation, etc.

        - Ability to group options into sections.

        - Ability to supply hand-crafted sections whenever needed and to locate
          those sections with precision in the output.

        - Ability to control nearly all parameters driving the help text
          contruction process via configuration and, where necessary, through
          the programmatic hooks. There should be no need to subclass optopus
          or delve into the parser's innards.

        - Support for common styles: command-line vs man-page.

Allowing users to enhance usage-text readability by being able to refer to
groups of options and to omit either short or long options.

    - API-generated usage text tends to be poor not only because it lacks usage
      variants but also because the generated text exhaustively lists all
      options in all of their permutations (short and long).

    - Especially as the number of options grows, readability can be improved
      greatly by referring to sets of options by symbolic names rather than by
      enumerating every possibility.

    - Similarly, readability can be enhanced by focusing the usage text on just
      the long-options (or just the short-options) and then providing a mapping
      between short and long options latter in the help text.

Allowing users to define their arguments and options in ways that encourage
modularity.

    - In optopus a user defines/configures options and arguments as atomic
      units, separate from the issues of command-line grammar, usage variants,
      and options help text.

    - Each of those atomic units can be attached to one or more groups of
      related options.

    - Then those options or option-groups can be leveraged when defining the
      command-line grammar, when expressing the generated usage text, and when
      organizing the options text into sections.

Providing users with full access to the parser configuration, both via the API
and in the form of standard, serializable data structures.

Providing users more conventient mechanisms to reduce repetition in
the configuration of the parser.

--------
other-goals: Other goals
--------

Prioritize the simple use cases. Yes, add features and customization
capability. But do that without sacrificing super super usage patterns.

Usage should be intuitive and declarative, especially for the simplest and most
common use cases. It should not depend on bizarre syntax or on user-created
complex data structures.

The parser's configuration should be expressible as a data structure -- and
creatable from one. This is important for testing, debugging, easy integration
with config files, and using other libraries for data validation.

For complex programs or special needs, users should have full control over
documentation. This includes both usage/help text and the styling of error
messages.

Easy system for validators to be combined flexibly.

Should easily support different help types: (a) brief usage/synopsis, (b) full
help or man-page, and (c) extras or examples.

Include ability to merge options from several sources: ENV variables, config
files, command-line options. Note that the purpose of the configuration sources
(ENV vars and config files) is to set the default values used by the
command-line option parser. When defaults are supplied, it should also cause a
required option to become non-required (in other words, whenever default is set
for an option, it causes required to become False.

Make it easy to test the option parser.

Error handling should be under the user's control, if they want it. This is a
serious flaw in some parsers (eg argparse). The library should support both
"automatic" mode (where the parser will eagerly print help or error message and
then exit) or non-automatic mode (where the parser will simply return an object
containing all information and allow the user to decide what to do. [Note that
argparse has addressed this, in whole or in part, in Python 3.9].

Should have a design that is friendly to customization. Allow users to
customize by writing simple functions or hooks rather than having to subclass.
Consider using the pluggy library so that users can implement simple function
hooks.

Start simple: begin with core behaviors; don't support more flexibility until a
basic working system is in place.

Where possible, rely on convention over configuration: sensible defaults to
allow the most common path to be followed with minimal setup.

Provide good support for --version. Show the application's name and version
number.

Provide helper functions for warn(), exit().

Support various configuration styles: per option configuration (argparse and
many other libraries do this); and thematic or bulk (make one type of setting
on multiple options at once).

Allow the user to have hidden options (eg for developers only).

Support file and dir types as arguments, with checks for existence or non-existence.

For file path arguments, support the ability to treat `-` as stdin or stdout.

Support an easy way to get bash completion.

Support @somefile.txt: user supplies command-line args via a file.

Support parse_known_args().

Support abbreviated option names when there is no ambiguity.

Support some no-configuration argument parsing strategies: default (options are
flags), key-val (options take single args by default), greedy (options consume
as many params as possible).

Support conversion/validation.

Support dispatch mechanisms.

The parser's configuration is likely to be organized as a fairly deep tree
behind the scenes. But make it easy for the user to query that tree to obtain
nodes of interest for configuration and other purposes. Primarily this means
quickly getting Opt instances, but there could be other types of interest as
well.

Let users control the important aspects of the help text: section ordering;
section titles; layout style (eg, compact 2-column or man-page); capitalization
rules; widths; conventions for showing default values; etc.

--------
standard-cli-grammar: Standard command-line grammar
--------

Typical rules of command-line grammar, as commonly understood in Unix tradition:

    - Options start with a prefix:

        --long
        -s

    - Options can take zero or more ordered parameters.

    - Positional arguments are ordered among each other:

        P1 P2 P3 ...

    - Options can be ordered in any way:

        --x4 --x1 --x3 --x2 ...

    - Options can be freely interspersed among the ordered positional arguments.

        --x3 P1 --x1 --x4 P2 --x2 P3 ...

    - Short options can be bundled:

        -x -y -z
        -xyz

--------
cli-grammar-vs-regex: Command-line grammar vs. regex
--------

Although Optopus usage syntax borrows many concepts from regular expressions,
command-line grammar parsing is not readily amenable to handling via regex
parsing approaches.

Positionals are ordered among themselves, but options can appear in any order
(ignoring boundaries and anchors). That flexibility makes it not very intuitive
to convert a command-line grammar into a manageable regular expression. At
every stage, any of the options are possible. But then once an option appears,
it cannot appear again (ignoring repeatables). That means command-line parsing
is context-sensitive.

--------
subparsers-not-needed: Optopus does not need the subparser concept
--------

The subparser concept is much less powerful and flexible than the key concept
of a command-line grammar, along with the related ideas of usage variants and
flexible destination assignment. It's also less intuitive.

The universe of command-line programs could be broken down into a sizable
majority and two small minorities:

    - A sizable majority that needs neither subparsers nor a complex grammar.

    - A small minority that align conceptually with the subparser concept. But
      command-line grammar supports this use case even better.

    - A small minority that are forced by the limitations of current argument
      parsing libraries to resort to subparsers even though the concept does
      not align very well with their needs.

--------
opt-action-not-needed: Optopus does not need the action concept
--------

Arguments can be configured in argparse with an 'action' parameter. The
parameter is a bit overloaded and misleading. It does control some actions (eg,
showing help text), but mostly it is used as a sometimes misnamed device for option type
and destination assignment.

    Action       | Option type       | Example         | Stored      | Notes
    ----------------------------------------------------------------------------------
    store_true   | 1 flag            | --frob          | True        | True == 1
    store_false  | 1 flag            | --frob          | False       | To override a True default
    count        | 1+ flags          | -v -v           | N           | .
    store        | Single            | --foo F         | F           | .
    append       | Repeatable single | -x A -x B       | [A, B]      | Overwrite on repeat
    extend       | Repeatable multi  | -x A B -x C D E | [A B C D E] | .
    help         | High precedence   | .               |             | .
    version      | "    "            | .               | .           | .
    ----------------------------------------------------------------------------------
    store_const  | 1 flag            | --frob          | X           | Not necessary
    append_const | 1+ flag           | --frob --frob   | [X x]       | Not necessary

--------
explicit-option-param-syntax: Why explicit syntax for option parameters is needed
--------

Imagine that the grammar did not require explicit surrouding markers for
parameters, positionals, and literal values: {}, <>, an ''. Every type of
confusion would be possible.

    frob --type x y z   # Meaning of x, y, z unclear.

Some ways to address that problem:

    - Minimize syntax burden. Require that literals be quoted (because rarely
      needed) and positionals use angle brackets (because it is conventional).

    - Enforce consistency: require all 3 types of markers (and because braces
      for params are also conventional).

    - Be creative: require that literals be quoted and give users a mechanism
      to disambiguate when needed. Probably a bad idea: these issues can be
      tricky to think through. Also, for non-standard grammars, a small bit of
      extra typing seems easy compared to having to reason about subleties.

--------
high-precendence-options: High precedence options
--------

Most options control the primary behaviors of a program. But some are
special, most notably those related to user help:

    --help
    --version
    --examples
    --demo

Argument parsing libraries often provide an convenient mechanism for --help and
sometimes --version, but rarely anything else. In addition, they tend to
provide such features in a way that is slightly misleading (at least in a
strict sense) and definitely not as convenient for users as it could be.

Consider a simple subcommand-style program. Assume that both <id> and the
parameter for -n should be integers and that the program has both general help
text and subcommand help text.

    demo [--help] [-n {}] (print|delete) <id>

At least by default, if the end-user supplies the --help option, an argument
parser should (1) print help text and exit, (2) select the help text that is
relevant given the other command-line arguments, and (3) ignore errors in the
other command-line arguments. Some examples of desired behavior:

    demo --help                # General help.
    demo --help delete         # Delete help.
    demo --help -n HI delete   # Same, in spite of invalid -n parameter.

Most argument parsers fail on #3 (they gripe instead of helping) and they do
not easily support #2.

Optopus addresses those problems with two mechanisms: high-precendence options
and flexible dispatching. If an option is configured to be high-precendence,
its presence among the command-line arguments will trigger whatever action it
has been configured to perform, and that dispatching configuration will take
precendence over error reporting. When high-precendence options are used, the
parser performs a best-effort parsing to collect as much contextual information
as it can before calling the code responsible taking action.

There are limits, of course. Some types of bad input can reduce the accuracy of
that best-effort parse. In this example, -Q in an unknown option and is treated
by default as a flag taking no parameters, which then means that HI is is
interpretted an invalid subcommand.

    demo --help -Q HI delete   # General help rather than delete help.

--------
help-text-formatting: Help text formatting
--------

Text wrapping:

    - Respect terminal widths, if known and within boundaries:

        min_width = 40
        max_width = 100

    - Allow users to adjust those parameters.

    - User-supplied text:

        - Break into paragraphs (but preserve info about N of blank lines
          between paragraphs).

        - Rewrap to the desired width (probably using textwrap module).

        - Leave indented paragraphs as-is.

        - Provide an easy syntax for users to suppress line wrapping
          within the text (eg something borrowed from markdown)

Option parameters:

    - Avoid the typical verbosity of API-based help text. By default,
      use a compact notation for parameters:

        [--foo {}] [--bar {}] [--bazz {} {} {}]

    - Let users set their own defaults too:

        p = Parser()
        p.defaults(metavar = 'X')

--------
grammar-parsing-algo: Parsing the grammar syntax
--------

Phase 1: input normalization:

    - Accept text and/or lines of text.
    - Join into a block of text.

Phase 2: lexing:

    - Remember that the lexer analyzes character by character to emit
      a flat streem of the meaningful atomic units of the language.

    - It does not engage in validation logic to assess whether the arrangement
      of those units is syntactically valid.

    - Nor does it try to assemble those character-based atoms into fully
      meaningful entitities, other than in cases where they must be assembled
      to avoid ambiguitity with similar tokens.

Phase 3: parsing:

    - A parser's job is to eat a stream of tokens, organizing them into
      meaningful and valid units, and emitting those units to the caller.

        - Previously, I tried to write the lexer code with a parsing mindset.
          That was too hard.

        - Now we just have to figure out how to organize the consumption of the
          tokens listed above.

    - Focus now on the full grammar. Convenience syntax can be handle later via
      a different subclass, different tokens, different handlers, or
      some combo.

    - Handlers should be substantive from the perspective of the
      language, not low level.

    - Because the tokens and handlers differs somewhat between the grammar
      section and other sections, the parsing needs to be stateful -- advancing
      to the section state at the first section-tile line after the grammar
      section.

Phase 4: assembly:

    - The parser phase is the most complex, so don't overburden it with the
      duty of creating the ultimate grammar elements.

    - Instead, keep the parser simpler by having it emit simple AST-style
      objects.

    - The last phase converts the AST to true grammar elements.

--------
convenience-parsing-algo: Parsing the convenience grammar syntax
--------

The grammar can be built from the parts we already have:

    P1         = positional | positional_definition
    P2         = [ P1 ]

    O1         = short_option | long_option
    O2         = parameter | parameter_definition
    O3         = [ O2 ]

    single_pos = P1+ P2*
    single_opt = O1 O2+ O3*

Apply extra validation at the end to disallow:

    Only a single Opt (if P1 repeats, they must have same dest).
    Group
    PositionalVariant
    ParameterVariant

To orchestrate things we can adjust the SpecParser initializer:

    def __init__(self, text, single = False):
        self.lexer = RegexLexer(text, GRAMMAR_TOKENS)
        if single:
            self.parser_functions = (self.single_pos, self.single_opt)
        else:
            self.parser_functions = (self.variant,)

--------
arg-parsing-algo: Parsing algorithm
--------

Notation and terminology:

    - Purely notational concepts:

        Pos:         A positional Opt.
        MGroup:      A Group having mutex=True.
        Alternative: A Variant or MGroup.
        OPT:         When current arg looks like an Opt.
        POS:         When current arg looks like a Pos.

    - Parsing terms:

        - Alternatives: the Variants and MGroups determine how many
          alternatives we will try.

        - Interpretations: within an alternative, there can be multiple valid
          interpretations of the arguments -- specifically how they are
          allocated to Opts either as positionals or params.

        - Backtracking terms:

            - Current interpretation or parsing route: the interpretation you
              are currently on, based on a successful parse of the current arg.

            - Foregone interpretation: the interpretation that you could have
              selected, but did not -- so you push it to the stack before proceeding
              with the current interpretation.

Some key insights related to backtracking:

    - Parsing decisions that might require backtracking come from positional
      arguments or parameters, not options. Options, if present, are
      non-ambiguous: either they are known and allowed, or not.

    - Backtracking is needed when your current parsing route ends up attaching
      a param to an Opt or an argument to a Pos but then that route ultimately
      fails (on a later argument). You need to backtrack to check any foregone
      alternative interpretations of the input arguments.

    - Alternative interpretations are possible only for Opt with non-static
      nparams, Pos with non-static nargs, or Pos with non-static ntimes.

    - So pushing to the stack needs to happen when your parsing decision for
      the current argument creates a foregone alternative.

    - This occurs only for successful parsing of the current argument; never
      for errors.

    - Variants and MGroups also don't require a backtracking mechanism.

        - Rather, you want to process all of the alternatives in order, based
          on the Grammar. Each alternative either succeeds or fails. And you
          stop on the first success.

        - The best time to load the stack with these alternatives is before the
          while-stack loop begins. This will ensure that each alternative will
          be tried in order. Because we are using a stack, backtracking within
          any specific alternative (due to non-static nparams/nargs) will
          finish before the algorithm advances to a fresh alternative.

        - If you were to try to push foregone interpretations to the stack when
          an alternative fails, you interfere with the correct ordering of the
          alternatives. Perhaps even worse, it's not easy to know within the
          while-stack loop when an alternative has totally failed. Each
          iteration of the loop can be either starting a fresh alternative or
          exploring one of the different interpretations possible within the
          alternative.

A backtracking example:

    Grammar:
        Opt('-f', nparams = (1,3))
        Opt('x', nargs = (3,4))

    Input:
        -f V1 V2 V3 V4 V5

    Parsing logic:

        -f : Valid: attach it to Opt(-f).

        V1 : Attach to Opt(-f)

        V2 : Because Opt(-f) is greedy by default, attach. But
             this attachment is not required due to non-static
             nparams. Before pushing the new State where V2
             is attached to Opt(-f), we should push the foregone
             interpretation -- namely, where we restrict Opt(-f)
             to nparams of (1,1).

        V3 : Same logic: attach and push foregone interpretation.

        V4 : Attach to Opt(x).

        V5 : Same.

        -  : Now we're out of arguments and have not
             satisfied Opt(x). So this interpretation fails.
             The next State in the stack will restrict
             Opt(-f) to nparams of (2,2), which will succeed.

    Logic if Opt(-f) had been non-greedy.

        V2 : Don't attach to Opt(-f). Now the foregone interpretation
             is for Opt(-f) with nparams of (2,3). Push that
             to the stack.

State:

    - Data object to hold parsing state as the various interpretations from the
      grammar are being tried during the while-stack loop.

    - Attributes:

        ai: index of args.

        next_pos: next available Pos [or None].

        nps: nparams remaining for the active Opt [or None].

        avail: map of available Opt to remaining ntimes [0 for exhausted].

        target: Target instance holding parsed data accumulated so far.

        err: error that terminated the current alterantive [or None].

        variant: name/id/index for the current variant; relevant for
        error selection/reporting, not parsing directly.

ArgResult:

    Data object to represent info need to capture the result-so-far
    for the parsing the current arg. Some likely attributes:

        err: data object holding error info
        opt: matched Opt
        val: converted value

    Notation used here:

        ArgResult(ERR: ...) | Current arg failed.
        ArgResult(OPT)      | Current arg matched OPT.
        ArgResult(PARAM)    | Current arg matched PARAM.
        ArgResult(POS)      | Current arg matched POS.
        ArgResult(UNKNOWN)  | For forge-ahead-mode or parse-known-mode.

How to handle Groups with non-static ntimes:

    - A Group can be optional overall (optional is one type of non-static), but
      have required elements if the Group is triggered by the presence of any
      of its elements. For example, if either -x or -y are present, both are
      needed.

        [ -x -y [-i] ]

    - When to handle such matters:

        - During parse. For example, when we see -x, then we would
          immediately adjust ntimes for -y.

        - After a successfull ArgResult. Before checking Opts for sufficient
          nparams, nargs, ntimes, we would first adjust those expectations
          based on any Groups that were activated by the presence of the Opts.

    - The latter, for two reasons:

        - Groups can alter quantifier expections. It makes sense to do all of
          that quantifier checking together.

        - More fundamentally, an optional Group can contain positionals and
          params. Like in the rest of the grammar, greedy is the default. That
          means positionals within optional Groups should be attached eagerly.
          It could get very messy trying to support some special logic just for
          optional Groups. The user has multiple ways to configure the grammar
          if the default greediness isn't desired.

Algorithm: setup:

    Stuff from the end-user or user:

        args = [...]

        P = Parser(...)
        G = P.grammar

    Initialize the stack that drives the algorithm. For every allowed combo of
    Variant and MGroup, add a State instance to represent the initial
    conditions of each alternative.

        # The stack of States.
        stack = [S1, S2, ...]
        stack = list(reversed(stack))

        # Every State examined and whether the entire parse is complete.
        history = []
        success = False

        # Parser-wide inventory of all known OPT.
        known_opts = G.get_all_options()

Algorithm: parsing loop:

    while stack and not success:

        # Prep.

        S = stack.pop()
        arg = args[S.ai]
        T = P.get_arg_type(arg)
        ares = ArgResult()

        # Check arg type.

        if T is OPT:

            # Handle aliases and fuzzy match.
            if arg not in S.avail:
                arg = P.fuzzy_match(arg)

            if arg not in known_opts:
                ares = ArgResult(ERR: globally unknown OPT)
            elif arg not in S.avail:
                ares = ArgResult(ERR: inapplicable OPT)
            elif S.nps is not None:
                ares = ArgResult(ERR: expected param but got OPT)
            elif S.avail[arg] == 0:
                ares = ArgResult(ERR: OPT occurred too many times)
            else:
                ares = ArgResult(OPT)

        else:
            if S.nps[arg]:
                ares = ArgResult(PARAM)
            elif S.next_pos is not None:
                ares = ArgResult(POS)
            else:
                ares = ArgResult(ERR: too many POS arguments)

        # Conversion and validation for PARAM and POS.

        if not ares.ERR and not ares.OPT:
            null = object()
            val = null
            ok = null
            err = None
            try:
                val = ares.opt.convert(arg)
                ok = ares.opt.validate(val)
            except (...) as e:
                ares.err = captured info about the error

            if ok is not True and (forge-ahead-mode or parse-known-mode):
                # Treat as success.
                ares.best_effort = True
                ares.val = arg
            elif val is null:
                ares = ArgResult(ERR: conversion raised an error)
            elif ok is null:
                ares = ArgResult(ERR: validation raised an error)
            elif ok is False:
                ares = ArgResult(ERR: validation returned False)
            else:
                # Success.
                ares.val = val

        # Handle less restrictive parsing modes.

        if ares.ERR and (forge-ahead-mode or parse-known-mode):
            ares = ArgResult(UNKNOWN)

        # Check for overall success if args exhausted.

        if ares.ERR is None and S.ai + 1 == len(args):

            - First check whether any Groups have been activated by the present
              Opts. If so, adjust expected ntimes accordingly.

            - Then check that all Opts have sufficient nparams, nargs, ntimes.

            if OK:
                success = True
            else:
                ares = ArgResult(ERR: insufficient ntimes/nparams/nargs)

        # Store history, push foregone, check overall success.

        if ares.ERR:
            # On error, just store the history.
            S.target.add(ares)
            history.append(S)

        else:

            # Check for foregone interpretation.
            # Not yet sure if we should perform these steps for ArgResult(UNKNOWN).
            if not success and (ares.PARAM or ares.POS):
                If either of these apply:
                    - Matched Opt has non-static nparams.
                    - Match Pos has non-static nargs or ntimes.
                Then:
                    S2 = new State to represent the foregone parsing route
                    stack.push(S2)

            # Store history.
            S.target.add(ares)
            history.append(S)

            # Create next parsing State.
            S1 = new State based on current parsing route
            stack.push(S1)

Algorithm: wrap up:

    if success:
        return history[-1].target

    else:
        - Examine history to find most relevant error.
        - Return or raise, depending on Parser configuration.

Post-parsing logic:

    target = self.do_parse(...)

    Load the data from target into a Result. Details will vary based on Parser
    configuration and parsing-mode.

--------
alternative-parsing-algo: Alternative parsing algorithm won't work after all
--------

The algorithm:

    - When parse() is called, there will be N command line arguments.
      Command-line use cases never have large N.

    - Using the parser configuration, assemble data on the aspects of the
      grammar that are not static. The most common non-static configurations:
      varying nargs, nparams, or ntimes; variants; and alternatives.

    - For grammar elements that have no inherent boundaries (eg, an option
      taking 1+ params), interpret them in as bounded by using N as the upper
      limit.

    - Use all of that information to generate all static grammars that satisfy
      the actual grammar.

    - Check each static grammar against the command line arguments.

    - A successful parse finds exactly one successful static grammar.

What causes a grammar to generate multiple possibilities?

    .                     | Where expressed | Note
    -----------------------------------------------------
    Varying nargs/nparams | Opt             | .
    Varying ntimes        | Opt or Phrase   | Includes required.
    Alternatives          | Phrase          | Includes variants.
    Aliases               | Opt             | .

Benefits of the algorithm:

    - This code seems easy to write:

        - The generation of static grammars seems like a manageable
          situation involving itertools.

        - Parsing a static grammar very simple: no backtracking required.

    - It provides a run-time guard for users against ambiguous grammars.

Three concerns:

    - The approach seems non-standard. A classic stack algorithm seems to suit
      the situation. And that code might not be any harder to write -- perhaps
      just a bit less familiar. Why reinvent the wheel? Make sure there's a
      good reason.

    - Modern operating systems and shells have very large limits on the max
      size of command lines and N of arguments. Why build a good argument
      parsing tool that would fail at moderate values for N -- especially
      when a linear algorithm is known?

    - There won't necessarily be only one successful parse of the static
      grammars, as noted in the discussion of ambiguous grammars. By using a
      greedy assignment policy the parser can ignore that matter. But regular
      expressions have a greedy concept precisely because without it there can
      be more than one successful parse of an input. [On further reflection,
      this point argues against expecting only one successful static grammar.
      But if you try the static grammars in the correct order, based on greedy
      policies in place, you can stop at the first success -- as regex does.]

--------
ambiguous-grammars: Ambiguous grammars are not an issue
--------

From a strictly grammatical perspective, only one positional can have a
non-static nargs or ntimes, because there isn't exactly one valid way to attach
the values to the destination attributes. A similar problem occurs when an
option has non-static nparams and a positional has non-static nargs.
Two examples:

    <xray>...    <y>...
    --xray {}... <y>...

But that's not a problem, because Optopus can do what regular expression
engines do: greedy assignment by default, non-greedy by configuration.

--------
parsed-data-structure: Parsed data structuring: nargs, nparams, ntimes
--------

The meaning of nparams, nargs, and ntimes:

    nparams : N of params (for options)
    nargs   : N args (for positionals)
    ntimes  : Governs only optionality and repetition via {m,n} or its shortcuts.

    Options:                    #  nparams  ntimes

        -y                      #  0        (1,1)
        [-y]                    #  0        (0,1)
        [-y {} {}]              #  2        (0,1)
        -y {} [{}]              #  (1,2)    (1,1)
        -y {}{3}                #  3        (1,1)      # C

    Positionals:                #  nargs    ntimes

        <x>                     #  1        (1,1)
        [<x>]                   #  1        (0,1)
        (<x> <x> <x>){0,2}      #  3        (0,2)
        -----------------------------------------
        <x> <x> <x>             #  3        (1,1)      # A
        <x>{3}                  #  1        (3,3)      # B

Is nargs needed? Why not handle it all with ntimes?

    - Examples A and B are similar but differ in their non-flattened data:

        A: [X1, X2, X2]
        B: [[X1], [X2], [X3]]

    - Users should prefer to configure positionals with nargs first, using
      ntimes only when required (eg, plural nargs and plural ntimes) or when
      they want Result data organized a certain way.

    - Example C illustrates that {m,n} is not just for ntimes:

        - Parameters do not have their own independent ntimes attribute.

        - So the quantifier is interpreted as affecting nparams.

Internally, all data assigned to destinations will be stored in a fully
explicit manner. Assume a list of lists, where nargs/nparams determines the
length of the innermost lists and ntimes determines the length of the outer
list(s).

    - Singular nargs, nparams, and ntimes:

        a1     # Either value or bool (latter if nargs/nparams is zero).

    - Add plural nargs/nparams:

        [a1, a2, ...]

    - Add plural ntimes:

        (<z> <z>){3}

        [[a1, a2], ..., ...]

    - Add a layer of nested plural ntimes:

        (
            --foo <> <>
            (<z> <z>){3}
        ){4}

        foo: nparams 2, ntimes     4
        z  : nargs   2, ntimes 3 x 4

        foo = [[a1, a2], ..., ..., ...]

        z = [
            [[a1, a2], ..., ...],
            ...
            ...
            ...
        ]

Default flattening policy:

    - If the grammar does not contain nested plural ntimes, data
      will be flattened as much as possible, as shown in table below.

    - User can request non-flattened data or flattened (the latted
      to flatten even the 2x2 or nested scenarios).

    nargs or | ntimes    | ntimes 2+                   | ntimes 2+
    nparams  | 0 or 1    | Flattened                   | Non-flattened
    ------------------------------------------------------------------
    0        | bool      | [bool, ...]                 | [[bool], ...]
    1        | a1        | [a1, ...]                   | [[a1], ...]
    2+       | [a1, ...] | [[a1, ...], [a1, ...], ...] | .

--------
eager-attachment-at-bounary: Eager option attachment at repetition boundaries
--------

In the following example, the -z option will bind eagerly to the repeated
triplets of positionals.

    Grammar:                  cmds=(<a> <b> <c> [-z]){2,7}
    Example input:            A1 B1 C1 -z A2 B2 C2
    Returned data for cmds:   opts.cmds[1] = Namespace(a=A1, b=B1, c=C1, z=False)

That policy is consistent with greedy parsing elsewhere. Configuration for this
issue will have to be done via the API.

--------
grammar-syntax-named-unnamed: Grammar syntax: named and unnamed arguments
--------

Positionals must be named:

    frob <a> <b> [<c>]

Option arguments can be named or unnamed:

                                        # opts.mode:
    frob --mode {group} {name} {n}      # - Data object with attributes.
    frob --mode {} {} {}                # - Tuple.

--------
variants-needed: Variants: why they are needed
--------

Are variants needed give that the grammar syntax already has support for
alternatives?

Partial variants are a useful device to express some grammars more
conveniently.

Usage variants are a good mechanism for the user to help Optopus generate more
readable usage text and more relevant portions of it in response to errors.

Variants can provide a low-config mechanism for subcommand-style programs to
provide subcommand help text.

Variants have been a useful concept, and their names convenient handles, when
thinking about and planning this project. That utility might come in handy
later.

So one might think of the following related concepts, from most general
to most specific:

    Group           # Any grouping of grammar elements.
    Alternative     # A grouping where the end-user should choose one.
    Variant         # An alterantive that strongly affects usage text.

--------
destination-assignment: General destination assignment: needed after all
--------

Optopus does need generalized destination assignment. At a minimum, it needs
that feature not just for Opt, but also for partial variants. And once you go
that far, you might as well generalize it.

Consider examples like neck-diagram (nab is similar). With destination
assignment, the specific Opt destinations (cmd, snum, syms, etc) will be nested
underneath the 'commands' namespace (the outer destination assignment). The returned
data would have this structure:

    opts.commands : (
        Namespace(cmd = 'snum', snum = 6),
        Namespace(cmd = 'tuning', notes = ('E', 'A', ...)),
        Namespace(cmd = 'fret', syms = ('1', '3', '5')),
        ...
    )

Without the outer assignment, the returned data would be grouped by the Opt
destination names -- which badly jumbles everything up:

    opts = Namespace(
        cmd   : ['snum, 'tuning', 'fnum', 'fret', 'fret', ...]
        snum  : ['6']
        fnum  : ['5']
        notes : [[...]]
        syms  : [[...], [...], ]
    )

--------
grammar-syntax-complexity: Grammar syntax: is it too complex?
--------

To evaluate the question, I focused on the least intuitive aspect of the syntax
and compared it against the API-driven alternative:

Alternatives:

    - This is an easy call: syntax is intuitive and API usage for this
      situation is annoying.

    - This is a strong example of the superiority of text syntax for grammar
      configuration relative to API.

Quantifiers:

    - The ... is intuitive and practically a convention.

    - The {m,n} syntax directly mimics regex and is also quite intutive.

General destination assignment:

    - This feature is powerful: it allows grammar variation when
      a positional or parameter takes a specific value.

    - Configuring such matters via the API requires the user to understand how
      the library works a bit too closely.

Partials:

    - API usage would require the user make multiple configurations to mark a
      variant as partial and then insert it wherever needed.

    - The partial syntax isn't heavy; in fact, it's moderately intuitve and
      without it, the grammar syntax might even be a bit less immediately
      understandable.

Zones and anchoring:

    - I suspect the desire for zones and anchoring is moderately low but still
      more than nothing.

    - Also, configuring these parameters via the API is simple to understand
      and requires little code.

    - While the zone syntax not too obtrusive, and it is a mixture of intuitive
      (zone markers) and not very intuitive (anchor markers)

    - Infrequent use case, easy to handle via API: let's drop it from grammar syntax.

    - Another question: is the zone concept needed, or could Group do the same
      thing? I increasingly think so.

High precedence:

    - Setting this attribute is easy in the API.

    - Although the syntax is not heavy, it's also not fully intuitive.

    - The majority of use cases will get the built-in help behavior, and the
      library could interpret --help and --version options as high precedence
      by default.

    - Infrequent use case, easy via the API: let's drop it.

--------
optional-positional-placement: Optional positionals before required are not a problem
--------

One might be concerned about Grammars containing optional positionals before
required ones. For example:

    [<m>] <x> <y>

But this is not a problem is we just adhere consistently to greedy policy.
If the user wants positionals attached to <x> and <y> before <m>, they
can express the grammar differently.

--------
parse-known-args: Parse known arguments
--------

How argparse handles it:

    - Instead of returning a single Namespace it returns a tuple:

        (Namespace, List[unknown args])

    - It does still apply all validations to any supplied arguments.

I have found that approach mildly annoying:

    - It requires a change to the calling code to call a different
      method and to unpack the 2-tuple.

    - That makes it a bit less convenient to drive via typical configuration
      mechanisms.

I think it makes more sense for Optopus to treat parse-known-args as one of the
parsing modes that it supports:

    Parsing modes:

        Configured: these modes can be combined. They relax the rules to allow
        deviations. [I am not sold on this naming idea. Think it over.]

            unknown-ok
            unconverted-ok
            invalid-ok

        No configuration:

            Like the rest of the library, Optopus will handle no-config parsing
            with a greedy default. Consider:

            No-config parsing is only helpful for the options: positionals
            will be dumped into a single generic bucket, so the options are
            what matter here.

            The positionals can be segregated to follow the double-hyphen
            marker.

            The rest of the input will be options and parameters, which
            raise no ambiguous boundary questions.

            This means the end user can control the result via their
            arrangement of arguments. That seems consistent with the spirit of
            no-config: no-configuration means imposing no requirements on the
            end-user. Through their argument placement, the end-user determines
            how parameters bind to options, which means they can achieve
            different flavors of parameter binding (flag, key-val, or any N of
            vals).

            In addition, the library will support an almost-noconfig behavior
            allowing the user to impose a specific parameter binding
            requirement. That will be done via a quantifier controlling nparams
            to be consumed per option.

                Parser()                # Default: greedy.
                Parser(noconf = '0')    # Flag style
                Parser(noconf = '1')    # Key-val style
                Parser(noconf = '2,')   # 2+

Optopus:

    - By default:

        - Continue to return a single Result object.

        - Put the unknown arguments in an attribute with an uncommon name, such
          as 'others' or 'unknowns'.

    - Let the user configure this:

        - Name of the unknowns attribute.

        - Whether to return (Result, List[unknowns]) tuple, like argparse.

--------
zones-not-needed: Zones not needed
--------

In my planning I think the concept of Zones was not useful. A zone has no
purpose on its own; rather, it existed purely to support anchoring. And the
anchoring configuration was applied to Opts, not Zones. Just use Groups and
allow Opts to be anchored within them.

--------
help-distpatching: Help distpatching
--------

Optopus aims to support behavior like this:

    frob --help              # Print general help.
    frob configure --help    # Print help for the configure task.

How does the user configure this help dispatching. More generally, what about
supporting other help-printing scenarios that rely not on --help but on some
other options: for example, I've had programs where I want --examples to print
some usage examples for the end-user.

    - Simple use case: standard help feature for a command-line program.

        p = Parser(help = True|False)

    - Help hook: any time the library's help feature is triggered, call the
      user's function with some params and let them return something to tell
      the library which help section(s) to print, if any.

        p = Parser(help = CALLABLE)

    - That approach is flexible for the general case, but it does not speak to
      the most common type of complex use case (a program with subcommands,
      where the subcommands and help sections have a 1:1 correspondence). Some
      additional conveniences to support dispatching based on subcommands --
      or, more correctly, based on the value taken by a specific Opt.

        # For 1:1 correspondence between help sections and Opt values.
        o = Opt('task', help = 'sections')

        # For more flexibility, supply mapping from Opt value to section name.
        o = Opt('task', help = DICT)

--------
dispatch: Dispatch
--------

Dispatching is probably can be pretty simple: tie one or more callables to
Variants, Opts, or even Groups (hard to think of many use cases for the latter,
but it is probably easy to support).

The argument passing details are important. Not everyone wants opts to be
passed everywhere. In other notes, I planned to have dispatch functions called
with three arguments: VAL, OPT, RES (where OPT is the Opt triggering the call,
VAL is the Result value for that Opt, and RES is the parsed Result). But I'm
not sure that plan is very good.

Dispatch occurs after argument parsing and validation. At that point, it is not
clear why the dispatch function needs VAL and OPT. Nor does it seem like users
want all of their dispatch functions tied to a rigid signature (eg, always
passing RES everywhere).

What might users want to pass to dispatch calls?

    - The parsed Result (which does not exist at config-time).
    - Other objects (eg lib).
    - One or more Result.DEST values, perhaps as kwargs.

Example API usages:

    - The example is based on my pocket script, which could be reframed with
      usage variants such as experiment, interactive, and rebuild.

    - The imported RES is a simple configuration object to tell Optopus
      to pass the parsed Result to the dispatch function.

    - The RES.foo examples mean to pass the value of Result.foo.

    - And the disp() function returns a configured object telling Optopus which
      args/kwargs to pass to the function. Its signature is 1+ callables plus
      kwargs.

        from optopus import Parser, RES, disp

        # Load the library and configure the Parser.
        lib = ...
        p = Parser(...)

        # Some dispatching configurations.
        de = disp(experiment,)
        di = disp(do_interactive, lib, RES)
        dr = disp(rebuild_library, limit = RES.lib, progress = RES.progress)

        # Tie those dispatchers to usage variants.
        p.config('experiment', dispatch = de)
        p.config('interactive', dispatch = di)
        p.config('rebuild', dispatch = dr)

That example illustrates one way to achieve a fairly generalized support for
dispatching. A simpler usage form might also be nice -- namely, either a single
callable or a sequence of callables. In this case they are simply passed the
parsed Result.

    p.config('foo', dispatch = f)
    p.config('foo', dispatch = (g, h))

Also worth considering whether it makes any sense to tie dispatching to
positional and parameter variants. For example:

    p.config('task=experiment', dispatch = de)
    p.config('task=interactive', dispatch = di)
    p.config('task=rebuild', dispatch = dr)

--------
argparse-and-greed: argparse and greediness
--------

The argparse library does attach arguments greedily, but it makes no attempt
to backtrack. An example:

    Grammar:

        -z {}... <y> <y>

    Example input:

        -z A B C D E F

    Behavior:

        - Attach everything to -z.
        - Raise error because <y> not given.

--------
end-user-errors: End-user errors
--------

The problem:

    - Each Parser.parse(args) call will generate up to N failures, one per
      interpretation.

    - Ideally, we would report the error most aligned with end-user intent.

    - How do we select the error to report?

Initial ideas for mechanisms to select the most relevant error:

    - Error type, under the theory that some errors are more likely to
      convey intent about which alternative was (or was not) intended.

    - Percentage of input args matched, under regular parsing or
      perhaps forge-ahead parsing.

    - Percentage of available options present in the arguments, under the
      theory that the presence of options is one of the more telling indicators
      of intent. This metric is fairly easy to compute (a frequency distribution
      of options present).

Inferring intent from error types is tempting but not always so powerful:

    - Globally unknown options are an easy case: always select this error,
      because it's true under any interpretation.

    - One might think that an inapplicable option conveys that the current
      interpretation was not intended. But it's easy to create
      counter-examples: for example, a large N of arguments that work perfectly
      for the current interpretation, but the end-user inadvertently included
      an option for a different variant as the first argument (maybe when
      editing a prior command from shell history).

    - Invalid values might seem like an indication the current interpretation
      was intended, under the theory that the args were allocated to a slot but
      just failed in the details. But to know that with any confidence you need
      forge-ahead parsing.

The resolution is to consider how other parsers behave:

    - They always try to consume as much of the input as possible. This suggests
      that the first criterion for error-selection is S.ai.

    - Multiple interpretations can fail with the same S.ai. To resolve ties,
      consider how errors can occur (consuming an OPT, consuming a POS, or
      during final checks). For each of those cases, the error-reporting
      precedence is fairly clear-cut [listed below].

    - To resolve ties, report the error associated with the earliest
      alternative, based on the grammar.

Types of errors in precedence order, by failure source:

    - Trying to consume an OPT:

        - Globally unknown option.

        - Inapplicable option for current alternative (but known to grammar).

    - Trying to consume a POS:

        - Conversion/validation problems: params.

        - Conversion/validation problems: positionals.

        - Excess arguments.

    - Making final checks:

        - Insufficient ntimes: option.

        - Insufficient nparams.

        - Insufficient ntimes: positional.

        - Insufficient nargs.

--------
converters-validators: Converters and validators
--------

Function signatures:

    Function  | Arity | Signature
    -------------------------------------------------------
    Converter | 1     | STR            => OBJ/raise
    Validator | 3     | VAL, OPT, RES  => True/False/raise
    Dispatch  | 3     | VAL, OPT, RES  => None

--------
grammar-querying-api: Grammar querying API
--------

Grammary querying API

    - Because the Grammar can be a tree structure, the API needs good syntax to
      query for grammar elements, both for configuration needs (including the
      ability to perform bulk configurations) and for complex validations.

    - Possible approach:

        g.get(NAME, NAME, ...)          # Get one, dive-style.
        g.get(NAME, [NAME, ...], ...)   # Get multiple.

--------
validation-notes: Validation notes
--------

What to validate:

    - Only user-facing code: the entry points.

    - Let internal code blow up if given bad input.

Consider using a library:

    - valid8 is interesting but seems a bit over-engineered.

    - Its docs point to other tools that could have interesting ideas.

If not a library, consider implementing a simple validation module for the
project:

    - Some of the libraries I saw treated the process very formally, with a
      large API to learn.

    - A simpler approach seems better.

        validate(
            value,      # Value to check.
            convert,    # Callable: value => converted-value
            validate,   # Callable: converted-value => bool
            error,      # Error to raise.
        )

Where should validation logic reside?

    - Option 1: near the call site, so that you do not have to look elsewhere
      to understand the function.

        - Using decorator. Validation library writers seem attracted to this
          approach, but I don't see the appeal. It does not save any typing,
          and I find decorators with a lot of content to be awkward looking --
          aesthetically unappealing.

            @validate(
                x = (
                    int,
                    lambda x: x in range(1,11),
                    'x parameter must be interger 1 through 10: {val}',
                ),
                y = (...),
                z = (...),
            )
            def bar(x, y, z):
                ...

        - Or just using an ordinary function:

            def bar(x, y, z):
                validate(
                    x,
                    int,
                    lambda x: x in range(1,11),
                    'x parameter must be interger 1 through 10: {val}',
                )
                validate(y, ...)
                validate(z, ...)
                ...

    - Option 2: put validation logic a separate module, consolidating such
      details in one location. Let readers focus on the happy-path substance of
      the function, not the grubby validation logic, exception raising, etc.
      That code is mostly formulaic anyway -- stick it in the footnotes.

            # Main code.

            @validate
            def bar(x, y, z):
                ...

            # Validation module:

            register_validators(
                bar = (
                    x,
                    int,
                    lambda x: x in range(1,11),
                    'x parameter must be interger 1 through 10: {val}',
                ),
                ...
            )

        Under this approach, you want the validators to be composable, with the
        ability to define a bigger validator using smaller validators.
        And such compositions may need some helpers:

            validate_all()

--------
strategy-reassessment: Reassess the strategy
--------

After further reflection and looking again at the various job-client* example
scripts, I realize I underestimated the power of the text-based configuration
syntax.

    - It's true that I did find writing the literal help text tedious. I also
      dislike the idea that it will lack dynamic formatting behavior.

    - However, the API based configuration is very ineffecient and repetitive
      compared to the brevity, clarity, and intutiveness of the text approach.

    - Perhaps the right path, again, is to used text-driven configuration, but
      as syntax, not literal help text.

Consider which parts of the ultimate help text must be typed directly by the
programmer:

    - Option or argument names.
    - Help text for each option/argument.
    - Metavars.
    - Aliases.
    - Section names.
    - Choice values (if simple strings).

The simplest, clearest way to write that material is as a block of options
text. Lines likes these cover all of those bases:

    General::
    --job-id -j ID    : The job id.
    --od-user -u USER : Open Directory user who submitted the job.

The only other configurations are (a) syntax for complex grammars, and (b)
stuff well handled by the API (defaults, types, conversion, validation,
dispatch, sometimes choices, etc).

And this text-centric approach is flexible in allowing a variety of
usage patterns:

    - It can be treated as literal options text, for those who prefer that
      approach. Essentialy, Optopus will support a Docopt mode.

    - But treating it as configuration syntax will be easier for many who (1)
      don't want to have to lay everything out precisely and (2) especially
      don't want to have to define a usage grammar even for programs with
      standard command-line needs. If the API approach is ineffecient
      generally, the literal-text approach is ineffecient in requiring a usage
      grammar every time (as docopt does).

The write-up will need to be reframed to emphasize the debt to the text-based
argument parsers and to criticize the API approach for being so inefficient. In
the writeup place greater emphasis on some practical examples illustrating the
superiority of the text-based approach over argparse.

--------
grammar-syntax-revisited: Grammar syntax revisited
--------

Enhance spec syntax increase its power, reducing user hassle:

    - Program name.
    - Options text, optionally with section titles.
    - Opt symbols.
    - Regular text.

Simplify and unify the syntax:

    - Ensure that Optopus supports the full spectrum of usages, ranging from
      quick-and-dirty to complex.

    - Prioritize ease of use for the simplest cases.

        - Program name optional.
        - Variant names optional.
        - Section headings optional.

    - Minimize baroque syntax elements:

        - Reduce special punctuation when possible.
        - Meaningful whitespace is more intuitive that odd punctuation.
        - Make surviving punctuation as unified/congruous as possible.

Use angle brackets for all variable end-user inputs:

    - See variable-end-user-input.

Punctuation markers:

    - Summary of plan:

        Situation       | Marker       | When required
        -------------------------------------------------
        Grammar section | Double colon | If variant(s)
        Other sections  | Double colon | Always
        Opt help        | Colon        | If help text
        Variant         | Colon        | If named

    - Sections:

        - The grammar section:

            - Must appear first in the spec. If user wants a different section
              ordering: define the sections in the spec; use API to move
              sections as needed.

            - No regular text.

            - Default title is `Usage`, configurable only via API.

        - The grammar section, regardless of form, can be followed by zero or
          more other sections that:

            - Must use marker.
            - Can omit a title.
            - Can define opt-help lines.
            - Can include regular text.

            - If a line parses as opt-help, it will be interpreted that way
              (unless quoting is used).

        - What if the user does not want a trailing colon on section titles?

            - Let them adjust via the API.

    - opt-help:

        - Supported Opt grammar subset:

            sym
            dest
            nargs
            nparams
            ntimes
            choices
            aliases
            text

        - Note that opt-help uses a grammar subset, not an alternative grammar:

            - This means, for example, that options are not assumed
              to be optional: square brackets required if intended.

        - Note that opt-help lines can be confused with unnamed variants. The
          issue is fundamental, not really addressable via extended peeks or
          other fancy parsing. For example, does this spec define 3 variants or
          3 bare-bones opt-help lines?

            pgrep
            <rgx>
            --ignore-case -i
            --invert-match -v

        - The most common use case is to derive grammar from 1+ opt-help
          sections. It works well for many standard grammar needs, and opt-help
          is more featureful than variant (because it supports aliases and
          text). So the no-variant use case should have the least hassle.

Dest, sym, and values:

    - Examples without choices:

        Example                 | Usage text            | Dest
        ------------------------------------------------------------------
        <paths>...              | <paths>...            | paths
        <path.paths>...         | <path>...             | paths
        <PATH!paths>...         | PATH...               | paths
        ------------------------------------------------------------------
        --strategy <s>          | --strategy <s>        | strategy
        --elems <e> <e> [<e>]   | --elems <e> <e> [<e>] | elems
        --point <row.x> <COL!y> | --point <row> COL     | point.x, point.y
        --point <.x> <.y>       | --point <p> <p>       | point.x, point.y
        --point <> <>           | --point <p> <p>       | point
        ------------------------------------------------------------------

    - Examples involving choices and positional/parameter variants:

        Example               || Usage text        || Dest
        --------------------------------------------------------------------
        <mode=fast|slow>      || <fast|slow>       || mode
        <mode=fast>           || fast              || mode
        <MODE.mode=fast|slow> || mode              || mode
        <MODE!mode=fast|slow> || MODE              || mode

--------
spec-as-format-string: Spec as a format string not needed
--------

Initially I thought it would be useful to allow the spec to function as a
format string.

But if the format() call occurs early (before spec parsing), there is no
purpose served: the user could just call format() to create the spec in the
first place.

There might be a use case for calling format() after parsing has derived
grammar and opt-help metadata.

    - Presumably the purpose would be to insert material into help text that is
      more under the domain of Optopus than the user.

    - Another possible use case is to call format() after end-user
      arguments are parsed -- eg, in response to error.

    - Defer this until a use case is known.

--------
variable-end-user-input: Representing variable end-user inputs
--------

There are four common styles for representing variable end-user input, along
with some differences in details for specific implementations, especially as it
relates to choices:

    Style     | Parameters  | Positionals | Choices | Examples
    ----------------------------------------------------------------------------
    Angle     | <>          | <>          | {}      | git, picocli
    Sensitive | UPPER       | lower       | {}      | argparse, many Python/Ruby
    Lower     | lower       | lower       | () []   | POSIX, many Unix utilities
    Upper     | UPPER       | UPPER       | () [] ? | rsync
    ----------------------------------------------------------------------------
    Docopt    | <> or UPPER | <>          | () [] ? | .
    Optopus   | <>          | <>          | <>      | .

    - Unclear how docopt and rsync handle choices, but I think they use
      parens/brackets.

Upper and lower styles: easily rejected:

    - They work poorly for positional variants and parameter variants.

    - Usage text is ambiguous: we cannot distinguish merge/delete
      (positional variants) from path (variable input).

        frob [-f] merge [-x] [-y] path
        frob [-f] delete [-z] path

Sensitive style: better but not fully robust:

    - It handles most situations:

        frob [-f] merge [-x] [-y] PATH
        frob [-f] delete [-z] PATH

    - And the Python/Ruby community is accustomed to it.

    - It does fail if the variant values need to be uppercase. Some type of
      quoting or other syntactic workaround would be needed:

        frob [-f] `MERGE` [-x] [-y] PATH
        frob [-f] `DELETE` [-z] PATH

Angle style: robust due to greed:

    - In order to produce robust usage text for variants, literal inputs need
      top precedence.

    - More generally, treating text (whether in grammar syntax or usage text)
      as literal by default, it an good baseline (eg, that is how regex works).

    - The conclusion is that variable inputs must be enclosed, making
      case-based solutions either flawed or insufficiently robust.

    - Optopus was drifting toward {param} and <pos> as the enclosures:

        - That would also be an odd combo. The only precedent is docopt,
          which supports it only as an alternative syntax.

        - In addition, braces have a semi-conventional role for choices in
          tools like argparse, so using them for parameters would be
          anti-conventional.

    - Will there be ambiguities if parameters and positionals have the
      same enclosure?

        --point <x> <y>   # How many parameters?

    - Initially, I thought that parentheses/brackets could resolve such matters
      (see Git usage text, for example). But the brackets do not solve the
      problem by themselves. For example, is this an optional option with 2
      parameters or an optional group with a flag and 2 positionals?

        [--point <x> <y>]

    - Once again, embracing a greedy policy sorts everything out. If parameters
      bind eagerally to angle-bracketed inputs, then the example above is a
      2-parameter option.

Verdict: angle style:

    - The clarity of the approach seems to more than counterbalance the
      small increment of extra typing: all variable inputs are enclosed in
      the same way (positionals, parameters, and thus choices).

    - The approach has strong precedent, especially from Git.

    - Brackets and greedy will sort out any ambiguitity:

        [--point <x> <y>] <z>  # 2-param option, required positional.

    - If needed later, support other styles for usage text and grammar
      syntax (especially sensitive). Note that sensitive style in usage
      text is partially supported via the SYM! notation.

--------
enhanced-quantifiers: Enhanced quantifiers
--------

Quantifiers could be more featureful:

    - A third parameter similar to a range step:

        <x>{0,6,2}      # 0, 2, 4, 6

    - Ability to support noncontiguous quantities:

        <x>{!1,2,3,5}   # 1, 2, 3, or 5

--------
opt-help-lines: Opt help lines
--------

In the grammar syntax, an opt-help line allows any syntax for configuring a
single Opt, plus two other things: aliases and help text.

I considered adding a rule to require that the aliases, if any, reside
separate from the grammar of the Opt configuration. An illustration:

    -f [--foo <>]          # OK.
    -o (--opt <> <>){3}    # OK.

    [-f --foo <>]          # Not OK: the -f alias should be outside brackets.

But the rule seems needlessly touchy. Since configuring a single
Opt already requires nearly the full grammar, it makes more sense to parse
the line as follows:

    expression [: [help-text]]

Then examine expression to extract any aliases and validate that it configures
only a single Opt.

Because it would be difficult to distinguish opt-help continuation lines from
lines of regular text in a section, I decided to require block-quoting for
regular text. This keeps parsing relative sane at a modest cost in usage.

Opt-helps lines can also define help text for positional/parameter
variants. The default help text for such elements (ie, without
any explicit section configuration) is as follows:

    # Configuration:

        <task>             : Task to perform
        <task=foo>         : Foo blah
        <task=bar>         : Bar blah

        --mode <fast|slow> : Mode to use
        --mode <=fast>     : Fast blah
        --mode <=slow>     : Slow blah

    # Resulting help text:

        Positionals: task:
          foo                Foo blah
          bar                Bar blah

        Options: --mode:
          --mode fast        Fast blah
          --mode slow        Slow blah

--------
opt-independence-vs-unity: Opt independence vs unity when sharing same dest
--------

The grammar syntax is very flexible, so Optopus needs to know how to handle
unusual situations, including the repetition or reuse of the same dest. Several
examples:

    - Contiguous repetition as a syntactic alternative for nargs/ntimes:

        <x> <x> [<x>]               # Contiguous; can be condensed.
        -x [-x]                     # Same.

        -x -y -x                    # Noncontiguous but condensable (option ordering irrelevant).

    - Reuse across variants:

        foo : <x> [-y]              # Same configuration.
        bar : -z -y <x>

        foo : <x> [-y]              # Different configuration.
        bar : -z -y <x> <x>

        foo : <x> [-y]              # Different type.
        bar : -z -y [-x]

    - Reuse across alternatives:

        (-x -y | -a -x -z | -q)     # Same configuration.

        (<x=A|B> | <x> <x> <x>)     # Different configuration.
        (<x> | <x> <x> <x>)

        (-x | <x> <x>)              # Different type.

    - Reuse within an alternative:

        <x> (<x> <x>)...            # Different configuration.
        <x> <foo> <x>               # Different configuration (related to arg binding).

        -x <x> <x>                  # Different type.

        - Note: there are no examples here for "same configuration": contiguous
          will be condensed; noncontiguous positionals cannot have same
          configuration (arg binding); and noncontiguous options will be
          condensed.

    - Reuse for separator-based grammars: nab:

        - The nab use case illustrates why Opt independence within the same
          variant is sometimes needed (for a while I had considered disallowing
          reuse within variants).

        - A separator-based grammar needs a single main grammar where all of
          the subcommands can be used in sequence (including repetitions).
          But subcommands are often likely to need Opts with the same dest.

        chomp!   : / <cmd=chomp>
        findall! : / <cmd=findall> <rgx> [-a]
        grep!    : / <cmd=grep> <rgx> [-i] [-v] [-s]
        range!   : / <cmd=range> <start> <stop> [<step>] [-g]
        run!     : / <cmd=run> <code> [-g <>] [-a] [-v] [-i]

        main : [--debug] commands=(chomp! | grep! | range! | run!)...
        help : --help

Opt independence vs unity has possible ramifications in several areas:

    - Spec parsing.
    - Grammar creation.
    - Grammar configuration.
    - Argument parsing.
    - Result creation.
    - Usage text creation.
    - Opt help lines creation.

Policy decisions:

    - During spec parsing, contiguous repetitions of the same dest will be
      condensed when possible. Otherwise, independent Opts will be created.

    - A Grammar is just a list of elements, either Groups or Opts (and a Group
      has the same structure). The dest is not used as an unique identifier, so
      no problems are caused by repetition.

    - During configuration, the user can query for Opts flexibly. If they
      define a weird spec that makes it inconvenient to query for Opts
      individually, then can easily adjust by defining things like Variant.name
      or Group.dest to disambiguate. Worst case, they can query using Group/Opt
      indexes (rather than dests) or just query for several Opts and then
      examine their details to select the one needed for configuration.

    - Argument parsing need not care about dest uniqueness. The parsing is akin
      to seeing arguments and putting them into viable slots. No deep problems
      are caused by multiple slots accepting the same kinds of things.

    - Result creation is the place where unification by dest occurs. Consider
      Opts with different types: -x <x> <x>. This causes no technical problem,
      because the Result can be merged correctly: Result.x = [bool, [x1, x2]].
      The only problem is that the data has an odd structure. The user can
      easily fix that with a different Optopus configuration. If needed, Optous
      can support an option to generate unique dests in the Result (eg, via
      variant/group prefixes). Also see notes below for one type of complex
      Result (for nab).

    - Usage text will closely mimic the naming and structure of the user's
      spec. If there is ambiguity from duplicate dests, the user either wants
      it or they can easy adjust by configuring syms/dests differently.

    - For Opt help text, Section configuration can drive the process. Any
      section containing an opt-help configuration for an Opt will display the
      opt-help line. This allows the common use case where an Opt should be
      listed in multiple places in the help text. If two Opts having the same
      dest are in the same Section, Optopus will generate an opt-help line for
      each Opt, but if the resulting text is the same, it will prune the
      duplicate(s).

Result for the nab example:

    - If the 'commands' dest is NOT in the nab spec, the Result will be
      narrowly correct, but very difficult for the user to understand at
      runtime, because every dest would be a flat list of values, some of them
      coming from different 'cmd' invocations. Nonetheless, there is nothing
      narrowly "incorrect" about this outcome; if the user does not like it,
      the solution is a better configuration.

        Result(
            debug = t1,
            help  = h1,
            cmd   = [chomp, findall, grep, grep, range, run],
            rgx   = [       r1,      r2,   r3              ],
            i     = [                i1,   i2,          i3 ],
            v     = [                v1,   v2,          v3 ],
            s     = [                s1,   s2              ],
            start = [                            s1        ],
            stop  = [                            s1        ],
            step  = [                            s1        ],
            g     = [                            g1,    g1 ],
            code  = [                                   c1 ],
            a     = [       a1,                         a2 ],
        )

    - If commands dest is used, the Result will organize things in
      a meaningful way.

        Result(
            debug = t1,
            help  = h1,
            commands = [
                Result(chomp),
                Result(findall, r1, a1),
                Result(grep, r2, i1, v1, v1),
                Result(grep, r3, i2, v2, v2),
                Result(range, s1, s1, s2),
                Result(run, i3, v3, g2, c1, a2),
            ],
        )

--------
group-level-validation-needed: Why Group-level validation should be retained
--------

If focusing just on ntimes, one might be tempted to collapse Group validation
needs (primarily ntimes) down to the Opts. Some of the discussion in
parsed-data-structure, for example, loosely speaks in such terms.

But the Groups do impose their own requirments. In this example, the ntimes of
the Opts are inter-linked: if any one appears, the requirements of the others
changes dynamically.

    [ -x -y [-i] ]

But Groups do have other attributes: dest and maybe validate. And it seems
difficult to imagine all consequences of grammar flattening. Every time I
experimented with it in the past, problems were encountered. It is possible
that a Target might flatten Group-level ntimes down to the Opts purely for
convenience during parsing. But it seems important to retain the ability to
impose requirements at the Group level rather than only at the Opt level.
Finally, because Groups can nest, storing their requirements at the Opt level
is not immediately straightforward.

--------
misc-new-notes: Miscellaneous new notes
--------

EMPTY.

